================================================================================
File: chat-window.html
Path: .\chat-window.html
Size: 42686
Modified: 2025-04-12T18:24:59.745679
Created: 2025-04-08T15:50:47.604070
Hash: 3aa4dc8cd0f593e6976a9e5f7561fe8cec2202db0b511f5aa67d13500d938b2b
Lines: 1047
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICMP Message Tester</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            padding: 0;
            margin: 0;
            display: flex;
            background-color: var(--bg-light);
            color: var(--text-color);
        }

        .main-content {
            flex: 1;
            max-width: 800px;
            padding: 20px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }

        .debug-panel {
            width: 400px;
            background: white;
            padding: 20px;
            border-left: 1px solid var(--border-color);
            height: 100vh;
            position: fixed;
            right: 0;
            top: 0;
            overflow-y: auto;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
        }

        .debug-panel.active {
            transform: translateX(0);
        }

        .debug-toggle {
            position: fixed;
            right: 20px;
            top: 20px;
            z-index: 1000;
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .debug-toggle:hover {
            background: var(--primary-hover);
        }

        .debug-section {
            margin-bottom: 20px;
            background: white;
            padding: 15px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .debug-section h3 {
            margin-top: 0;
            color: var(--primary-color);
            font-size: 1.1em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 8px;
        }

        label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 500;
            color: var(--text-color);
        }

        input[type="text"], 
        input[type="password"], 
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
            transition: border-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        textarea { 
            height: 120px; 
            resize: vertical;
            font-family: inherit;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        button:hover { 
            background-color: var(--primary-hover);
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        #responseArea, #historyArea {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid var(--border-color);
            background-color: white;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
            font-size: 14px;
            line-height: 1.4;
            max-height: 400px;
            overflow-y: auto;
        }

        .error { 
            color: var(--error-color);
            border-color: var(--error-color);
            background-color: #fff5f5;
        }

        .success {
            color: var(--success-color);
            border-color: var(--success-color);
            background-color: #f0fff4;
        }

        h1 {
            color: var(--text-color);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        h2 {
            color: var(--text-color);
            margin-top: 30px;
            font-size: 1.5em;
        }

        .section-divider {
            margin: 30px 0;
            border: none;
            border-top: 1px solid var(--border-color);
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        @media (max-width: 768px) {
            .main-content {
                padding: 15px;
            }
            
            .debug-panel {
                width: 100%;
            }
        }

        /* Conversation styling */
        .conversation {
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: white;
        }

        .conversation-header {
            padding: 10px;
            background-color: #f3f3f3;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            font-size: 12px;
        }

        .conversation-header span {
            font-weight: 500;
        }

        .messages {
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            margin-bottom: 15px;
            padding: 12px;
            border-radius: 12px;
            position: relative;
            max-width: 80%;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message.user {
            background-color: var(--primary-color);
            color: white;
            margin-left: auto;
            margin-right: 10px;
            border-bottom-right-radius: 4px;
        }

        .message.ai {
            background-color: #f0f0f0;
            color: var(--text-color);
            margin-left: 10px;
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }

        .message-content {
            word-break: break-word;
            white-space: pre-wrap;
            line-height: 1.4;
            margin-bottom: 5px;
        }

        .message-timestamp {
            font-size: 11px;
            opacity: 0.8;
            margin-top: 4px;
        }

        .message-status {
            font-size: 11px;
            opacity: 0.8;
            font-style: italic;
        }

        .message.user .message-timestamp,
        .message.user .message-status {
            color: rgba(255,255,255,0.9);
        }

        .no-messages {
            text-align: center;
            color: #666;
            padding: 20px;
            font-style: italic;
        }

        /* Login status display */
        .login-status {
            margin-top: 10px;
            font-weight: bold;
        }

        .logged-in {
            color: var(--success-color);
        }

        .logged-out {
            color: var(--error-color);
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>ICMP Message Tester</h1>
        
        <div class="debug-section">
            <h2>Configuration</h2>
            <div class="form-group">
                <label for="businessId">Business ID:</label>
                <input type="text" id="businessId" placeholder="Enter your Business ID" value="7ae167a0-d864-43b9-bdaf-fcba35b33f27">
            </div>
            <div class="form-group">
                <label for="userId">User ID:</label>
                <input type="text" id="userId" placeholder="Enter your User ID">
            </div>
            <div class="form-group">
                <label for="apiKey">Business API Key:</label>
                <input type="password" id="apiKey" placeholder="Enter your API Key" value="da828cae6a3e46228aa09d65ba9066e3">
            </div>
            <div class="button-group">
                <button onclick="login()" id="loginButton">Login</button>
            </div>
            <div id="loginStatus" class="login-status logged-out">Not logged in</div>
        </div>

        <div class="debug-section">
            <h2>Send Message</h2>
            <div class="form-group">
                <label for="messageContent">Message:</label>
                <textarea id="messageContent" placeholder="Enter your message here..."></textarea>
            </div>
            <div class="button-group">
                <button onclick="sendMessage()" id="sendButton">Send Message</button>
                <button onclick="fetchHistory()" id="historyButton">Fetch History</button>
                <button onclick="testBackendConnection()" id="pingButton">Test Connection</button>
            </div>
        </div>

        <div class="debug-section">
            <h2>Response</h2>
            <div id="responseArea">Response will appear here...</div>
        </div>

        <div class="debug-section">
            <h2>Conversation History</h2>
            <div id="historyArea">History will appear here...</div>
        </div>

        <div class="debug-section">
            <h2>Authentication</h2>
            <div class="login-container">
                <div class="login-status-display">
                    <span>Status: </span><span id="loginStatus" class="login-status logged-out">Not logged in</span>
                </div>
                <button onclick="login()" id="loginButton">Login</button>
                <button onclick="logout()" id="logoutButton">Logout</button>
            </div>
        </div>
    </div>

    <button class="debug-toggle" onclick="toggleDebugPanel()">Toggle Debug Panel</button>
    
    <div class="debug-panel" id="debugPanel">
        <div class="debug-section">
            <h3>Request Details</h3>
            <div id="requestDetails">No request details available</div>
        </div>
        <div class="debug-section">
            <h3>Response Headers</h3>
            <div id="responseHeaders">No response headers available</div>
        </div>
        <div class="debug-section">
            <h3>Network Status</h3>
            <div id="networkStatus">Ready</div>
        </div>
        <div class="debug-section">
            <h3>CORS Troubleshooting</h3>
            <p>Having connection issues? Try these options:</p>
            <div class="button-group">
                <button onclick="changeApiUrlTo('http://localhost:5000')">Use localhost:5000</button>
                <button onclick="changeApiUrlTo('http://127.0.0.1:5000')">Use 127.0.0.1:5000</button>
                <button onclick="changeApiUrlTo(window.location.protocol + '//' + window.location.hostname + ':5000')">Use current host</button>
            </div>
            <div id="corsStatus"></div>
        </div>
    </div>

    <script>
        // Constants
        //const API_BASE_URL = 'http://localhost:5000';
        // Alternative URL options (uncomment if needed)
        const API_BASE_URL = 'http://127.0.0.1:5000';
        // const API_BASE_URL = window.location.protocol + '//' + window.location.hostname + ':5000';
        // Set global variable for easy updating
        window.API_BASE_URL = API_BASE_URL;
        const DEBUG_PANEL_ID = 'debugPanel';
        const DEFAULT_BUSINESS_ID = '7ae167a0-d864-43b9-bdaf-fcba35b33f27';
        const DEFAULT_API_KEY = 'da828cae6a3e46228aa09d65ba9066e3';
        
        // State management
        let currentStage = null;
        let conversationHistory = [];
        let isLoggedIn = false;
        
        // Initialize the app
        function init() {
            // Check if we're already logged in (if we saved API key to localStorage)
            const savedApiKey = localStorage.getItem('businessApiKey');
            if (savedApiKey) {
                // Pre-fill the form with the saved API key
                document.getElementById('apiKey').value = savedApiKey;
                
                // Check if businessId and userId are in localStorage or URL
                const savedBusinessId = localStorage.getItem('businessId');
                const savedUserId = localStorage.getItem('userId');
                
                if (savedBusinessId) {
                    document.getElementById('businessId').value = savedBusinessId;
                }
                
                if (savedUserId) {
                    document.getElementById('userId').value = savedUserId;
                }
                
                // Try to detect login state
                // Since we can't access HTTP-only cookies, we just assume we're logged in
                // if we have the API key in localStorage. User can always re-login if needed.
                if (savedApiKey && savedBusinessId && savedUserId) {
                    isLoggedIn = true;
                    document.getElementById('loginStatus').textContent = 'Logged in';
                    document.getElementById('loginStatus').className = 'login-status logged-in';
                    document.getElementById('loginButton').textContent = 'Logged In';
                    document.getElementById('loginButton').disabled = true;
                }
            }
            
            // Set default values if not already set
            if (!document.getElementById('businessId').value) {
                document.getElementById('businessId').value = DEFAULT_BUSINESS_ID;
            }
            
            console.log('App initialized');
        }
        
        // Call init when the page loads
        window.addEventListener('DOMContentLoaded', init);
        
        // Utility functions
        function updateNetworkStatus(status, isError = false) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = status;
            statusElement.className = isError ? 'error' : 'success';
        }
        
        function updateRequestDetails(details) {
            const detailsElement = document.getElementById('requestDetails');
            detailsElement.innerHTML = `<pre>${JSON.stringify(details, null, 2)}</pre>`;
        }
        
        function updateResponseHeaders(headers) {
            const headersElement = document.getElementById('responseHeaders');
            headersElement.innerHTML = `<pre>${JSON.stringify(headers, null, 2)}</pre>`;
        }
        
        function showError(message) {
            const responseArea = document.getElementById('responseArea');
            responseArea.innerHTML = `<div class="error">${message}</div>`;
            updateNetworkStatus('Error: ' + message, true);
        }
        
        function showSuccess(message) {
            const responseArea = document.getElementById('responseArea');
            responseArea.innerHTML = `<div class="success">${message}</div>`;
            updateNetworkStatus('Success', false);
        }
        
        function validateInputs() {
            const businessId = document.getElementById('businessId').value.trim();
            const userId = document.getElementById('userId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const message = document.getElementById('messageContent').value.trim();
            
            if (!businessId) {
                showError('Business ID is required');
                return false;
            }
            if (!userId) {
                showError('User ID is required');
                return false;
            }
            if (!apiKey) {
                showError('API Key is required');
                return false;
            }
            if (!message) {
                showError('Message content is required');
                return false;
            }
            
            return true;
        }
        
        async function login() {
            const businessId = document.getElementById('businessId').value.trim();
            const userId = document.getElementById('userId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !userId || !apiKey) {
                showError('Business ID, User ID, and API Key are required to login');
                return;
            }
            
            // Ensure consistent naming convention for the API
            const loginData = {
                userId: userId,
                businessId: businessId,
                businessApiKey: apiKey
            };
            
            updateRequestDetails(loginData);
            updateNetworkStatus('Logging in...');
            
            try {
                const url = `${window.API_BASE_URL}/api/save-config`;
                console.log('Logging in with URL:', url);
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(loginData),
                    credentials: 'include', // Important: include cookies
                    mode: 'cors'
                });
                
                // Log all headers for debugging
                const headersObj = Object.fromEntries(response.headers);
                console.log('Response status:', response.status);
                console.log('Response headers:', headersObj);
                updateResponseHeaders(headersObj);
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        console.error('Error response:', errorData);
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                        console.error('Error response (text):', errorText);
                    }
                    
                    throw new Error(`Login failed! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Login response:', data);
                
                // Verify we received success from the server
                if (data.success) {
                    // Check for the cookie - this will only work on same domain
                    // Otherwise the cookie is HTTP-only and JavaScript can't directly access it
                    const cookies = document.cookie.split(';');
                    const hasCookie = cookies.some(cookie => cookie.trim().startsWith('businessApiKey='));
                    
                    if (hasCookie || true) { // Always set to true for now since HTTP-only cookie can't be read
                        isLoggedIn = true;
                        showSuccess('Login successful!');
                        document.getElementById('loginStatus').textContent = 'Logged in';
                        document.getElementById('loginStatus').className = 'login-status logged-in';
                        document.getElementById('loginButton').textContent = 'Logged In';
                        document.getElementById('loginButton').disabled = true;
                        
                        // Also store credentials for subsequent requests
                        localStorage.setItem('businessApiKey', apiKey);
                        localStorage.setItem('businessId', businessId);
                        localStorage.setItem('userId', userId);
                    } else {
                        console.error('Cookie not set despite successful response');
                        isLoggedIn = false;
                        throw new Error('Authentication cookie not set. Check CORS and cookie settings.');
                    }
                } else {
                    isLoggedIn = false;
                    throw new Error(data.error || 'Login failed for unknown reason');
                }
                
            } catch (error) {
                console.error('Login error:', error);
                isLoggedIn = false;
                showError(`Login failed: ${error.message}`);
                document.getElementById('loginStatus').textContent = 'Not logged in';
                document.getElementById('loginStatus').className = 'login-status logged-out';
            }
        }
        
        async function sendMessage() {
            if (!isLoggedIn) {
                showError('You must login first before sending messages');
                return;
            }
            
            if (!validateInputs()) return;
            
            const businessId = document.getElementById('businessId').value.trim();
            const userId = document.getElementById('userId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const message = document.getElementById('messageContent').value.trim();
            
            const requestData = {
                business_id: businessId,
                user_id: userId,
                message: message
            };
            
            // Create a copy of request data for display (with API key)
            const displayData = {
                ...requestData,
                businessApiKey: apiKey
            };
            
            updateRequestDetails(displayData);
            updateNetworkStatus('Sending message...');
            
            try {
                const url = `${window.API_BASE_URL}/api/message`;
                console.log('Sending message to URL:', url);
                console.log('Request data:', JSON.stringify(requestData));
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Make sure this matches what the server expects
                    },
                    body: JSON.stringify(requestData),
                    credentials: 'include', // Include credentials (cookies)
                    mode: 'cors' // Explicitly request CORS
                });
                
                // Log all headers for debugging
                const headersObj = Object.fromEntries(response.headers);
                console.log('Response status:', response.status);
                console.log('Response headers:', headersObj);
                updateResponseHeaders(headersObj);
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        console.error('Error response:', errorData);
                        errorText = errorData.message || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                        console.error('Error response (text):', errorText);
                    }
                    
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Response data:', data);
                showSuccess('Message sent successfully!');
                
                if (data.success && data.chat_window) {
                    // Update conversation history with the new messages
                    const { user_message, ai_response } = data.chat_window;
                    
                    // Add user message to history
                    conversationHistory.push({
                        id: user_message.id,
                        type: 'user',
                        content: user_message.content,
                        timestamp: user_message.timestamp,
                        status: user_message.status
                    });
                    
                    // Add AI response to history
                    conversationHistory.push({
                        id: ai_response.id,
                        type: 'ai',
                        content: ai_response.content,
                        timestamp: ai_response.timestamp,
                        status: ai_response.status
                    });
                    
                    // Display the messages in the response area
                    const responseArea = document.getElementById('responseArea');
                    responseArea.innerHTML = `
                        <div class="conversation">
                            <div class="messages">
                                <div class="message user">
                                    <div class="message-content">${user_message.content}</div>
                                    <div class="message-timestamp">${new Date(user_message.timestamp).toLocaleString()}</div>
                                    <div class="message-status">${user_message.status}</div>
                                </div>
                                <div class="message ai">
                                    <div class="message-content">${ai_response.content}</div>
                                    <div class="message-timestamp">${new Date(ai_response.timestamp).toLocaleString()}</div>
                                    <div class="message-status">${ai_response.status}</div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // Clear message input
                    document.getElementById('messageContent').value = '';
                    
                    // Update the history display
                    updateHistoryDisplay();
                } else {
                    showError('Invalid response format from server');
                }
                
            } catch (error) {
                console.error('Error details:', error);
                showError(`Failed to send message: ${error.message}`);
            }
        }
        
        function updateHistoryDisplay() {
            const historyArea = document.getElementById('historyArea');
            
            if (conversationHistory.length === 0) {
                historyArea.innerHTML = '<div class="no-messages">No messages in conversation</div>';
                return;
            }
            
            const conversationHtml = conversationHistory.map(message => `
                <div class="message ${message.type}">
                    <div class="message-content">${message.content}</div>
                    <div class="message-timestamp">${new Date(message.timestamp).toLocaleString()}</div>
                    <div class="message-status">${message.status}</div>
                </div>
            `).join('');
            
            historyArea.innerHTML = `
                <div class="conversation">
                    <div class="messages">
                        ${conversationHtml}
                    </div>
                </div>
            `;
        }
        
        async function fetchHistory() {
            if (!isLoggedIn) {
                showError('You must login first before fetching history');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const userId = document.getElementById('userId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !userId || !apiKey) {
                showError('Business ID, User ID, and API Key are required to fetch history');
                return;
            }
            
            // Create request details for display (with API key)
            const displayData = {
                business_id: businessId,
                user_id: userId,
                businessApiKey: apiKey
            };
            
            updateRequestDetails(displayData);
            updateNetworkStatus('Fetching history...');
            
            try {
                const url = `${window.API_BASE_URL}/conversations/${userId}?business_id=${businessId}`;
                console.log('Fetching from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'businessapikey': apiKey // lowercase to match what the server expects in auth.py
                    },
                    credentials: 'include', // Include credentials (cookies)
                    mode: 'cors' // Explicitly request CORS
                });
                
                // Log all headers for debugging
                const headersObj = Object.fromEntries(response.headers);
                console.log('Response status:', response.status);
                console.log('Response headers:', headersObj);
                updateResponseHeaders(headersObj);
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        console.error('Error response:', errorData);
                        errorText = errorData.message || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                        console.error('Error response (text):', errorText);
                    }
                    
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Conversation data:', data);
                
                // Display history
                const historyArea = document.getElementById('historyArea');
                if (data.length === 0) {
                    historyArea.innerHTML = '<div class="message">No conversations found for this user.</div>';
                } else {
                    historyArea.innerHTML = data.map(conv => `
                        <div class="conversation">
                            <div class="conversation-header">
                                <span>Conversation ID: ${conv.conversation_id}</span>
                                <span>Started: ${new Date(conv.start_time).toLocaleString()}</span>
                                <span>Last Updated: ${new Date(conv.last_updated).toLocaleString()}</span>
                                <span>Status: ${conv.status}</span>
                                ${conv.language ? `<span>Language: ${conv.language}</span>` : ''}
                            </div>
                            <div class="messages">
                                ${conv.message ? `
                                    <div class="message user">
                                        <div class="message-content">${conv.message}</div>
                                        <div class="message-timestamp">${new Date(conv.start_time).toLocaleTimeString()}</div>
                                    </div>
                                    ${conv.response ? `
                                        <div class="message ai">
                                            <div class="message-content">${conv.response}</div>
                                            <div class="message-timestamp">${new Date(conv.last_updated).toLocaleTimeString()}</div>
                                        </div>
                                    ` : '<div class="message pending">Waiting for response...</div>'}
                                ` : '<div class="message">No messages in this conversation</div>'}
                            </div>
                        </div>
                    `).join('');
                }
                
                showSuccess('History fetched successfully!');
                
            } catch (error) {
                console.error('Error details:', error);
                showError(`Failed to fetch history: ${error.message}`);
            }
        }
        
        function generateUUID() {
            // RFC4122 version 4 compliant UUID
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        function toggleDebugPanel() {
            const panel = document.getElementById(DEBUG_PANEL_ID);
            panel.classList.toggle('active');
        }
        
        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            // Set default values if fields are empty
            const businessIdField = document.getElementById('businessId');
            const apiKeyField = document.getElementById('apiKey');
            
            if (!businessIdField.value) {
                businessIdField.value = DEFAULT_BUSINESS_ID;
            }
            
            if (!apiKeyField.value) {
                apiKeyField.value = DEFAULT_API_KEY;
            }
            
            // Add input validation on change
            const inputs = document.querySelectorAll('input, textarea');
            inputs.forEach(input => {
                input.addEventListener('input', () => {
                    input.classList.remove('error');
                });
            });
            
            // Generate a valid UUID for the user_id field if empty
            const userIdField = document.getElementById('userId');
            if (!userIdField.value) {
                userIdField.value = generateUUID();
            }
            
            // Add keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                // Ctrl/Cmd + Enter to send message
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    sendMessage();
                }
                // Ctrl/Cmd + H to fetch history
                if ((e.ctrlKey || e.metaKey) && e.key === 'h') {
                    e.preventDefault();
                    fetchHistory();
                }
                // Ctrl/Cmd + L to login
                if ((e.ctrlKey || e.metaKey) && e.key === 'l') {
                    e.preventDefault();
                    login();
                }
            });
        });

        // Add this new function to test basic connectivity
        async function testBackendConnection() {
            updateNetworkStatus('Testing connection...');
            try {
                // First, try to ping the root endpoint
                const url = `${window.API_BASE_URL}/`;
                console.log('Testing connection to:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    mode: 'cors',
                    credentials: 'include'
                });
                
                console.log('Ping response status:', response.status);
                const text = await response.text();
                console.log('Ping response:', text);
                
                const statusElement = document.getElementById('networkStatus');
                statusElement.textContent = `Connection successful: ${response.status} - ${text}`;
                statusElement.className = 'success';
                
                showSuccess(`Backend connection successful: ${text}`);
                
                // Try another endpoint as a secondary test
                try {
                    const pingResponse = await fetch(`${window.API_BASE_URL}/ping`, {
                        method: 'GET',
                        mode: 'cors'
                    });
                    
                    const pingText = await pingResponse.text();
                    console.log('Secondary ping response:', pingText);
                } catch (pingError) {
                    console.log('Secondary ping test failed (this is okay):', pingError);
                }
                
            } catch (error) {
                console.error('Connection test error:', error);
                
                // More detailed error info
                let errorMessage = `Connection failed: ${error.message}`;
                
                // Check for common network errors
                if (error.message.includes('Failed to fetch')) {
                    errorMessage += '\nThis usually means the server is not running or not accessible.';
                } else if (error.message.includes('NetworkError')) {
                    errorMessage += '\nThis is likely a CORS issue. Check if the server has proper CORS headers.';
                } else if (error.message.includes('Not Found')) {
                    errorMessage += '\nThe server is running but the endpoint does not exist.';
                }
                
                errorMessage += '\n\nTry these steps:\n1. Make sure the backend server is running\n2. Check if CORS is properly configured\n3. Try using http://127.0.0.1:5000 instead of localhost';
                
                showError(errorMessage);
                
                // Try alternative URL automatically
                if (window.API_BASE_URL.includes('localhost')) {
                    try {
                        const altUrl = 'http://127.0.0.1:5000/';
                        console.log('Trying alternative URL:', altUrl);
                        
                        const altResponse = await fetch(altUrl, {
                            method: 'GET',
                            mode: 'cors'
                        });
                        
                        if (altResponse.ok) {
                            const altText = await altResponse.text();
                            console.log('Alternative URL response:', altText);
                            showSuccess(`Alternative URL works! Try changing API_BASE_URL to 'http://127.0.0.1:5000'`);
                        }
                    } catch (altError) {
                        console.error('Alternative URL also failed:', altError);
                    }
                }
            }
        }

        // Function to change API URL dynamically
        function changeApiUrlTo(newUrl) {
            const oldUrl = window.API_BASE_URL;
            window.API_BASE_URL = newUrl;
            
            const corsStatus = document.getElementById('corsStatus');
            corsStatus.innerHTML = `<div class="success">Changed API URL from ${oldUrl} to ${newUrl}</div>`;
            
            // Test the connection with the new URL
            testBackendConnection();
        }

        // Function to handle logout
        function logout() {
            // Clear localStorage
            localStorage.removeItem('businessApiKey');
            localStorage.removeItem('businessId');
            localStorage.removeItem('userId');
            
            // Reset UI state
            isLoggedIn = false;
            document.getElementById('loginStatus').textContent = 'Not logged in';
            document.getElementById('loginStatus').className = 'login-status logged-out';
            document.getElementById('loginButton').textContent = 'Login';
            document.getElementById('loginButton').disabled = false;
            
            // Clear cookie if possible
            document.cookie = 'businessApiKey=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            
            // Optionally clear the API key field for security
            // document.getElementById('apiKey').value = '';
            
            showSuccess('Logged out successfully');
            
            // Make a call to the backend to clear cookies
            fetch(`${window.API_BASE_URL}/auth/clear-cookies`, {
                method: 'POST',
                credentials: 'include',
                mode: 'cors'
            }).then(response => {
                console.log('Logout response:', response.status);
            }).catch(error => {
                console.error('Error during logout:', error);
            });
        }
    </script>
</body>
</html> 

================================================================================
File: llm.html
Path: .\llm.html
Size: 44414
Modified: 2025-04-12T23:52:34.500266
Created: 2025-04-12T21:01:22.776694
Hash: fae11315c0f37084ff8722bea7ee3b78b1f01f93955faaaed279e0f15630f00e
Lines: 1125
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICMP LLM API Debugger</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            padding: 0;
            margin: 0;
            display: flex;
            background-color: var(--bg-light);
            color: var(--text-color);
        }

        .main-content {
            flex: 1;
            max-width: 1200px;
            padding: 20px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }

        label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 500;
            color: var(--text-color);
        }

        input[type="text"], 
        input[type="password"], 
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
            transition: border-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        textarea { 
            height: 120px; 
            resize: vertical;
            font-family: inherit;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s;
            margin-right: 10px;
        }

        button:hover { 
            background-color: var(--primary-hover);
        }
        
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        #responseArea {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid var(--border-color);
            background-color: white;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
            font-size: 14px;
            line-height: 1.4;
            max-height: 400px;
            overflow-y: auto;
        }

        .error { 
            color: var(--error-color);
            border-color: var(--error-color);
            background-color: #fff5f5;
        }

        .success {
            color: var(--success-color);
            border-color: var(--success-color);
            background-color: #f0fff4;
        }

        h1 {
            color: var(--text-color);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        h2 {
            color: var(--text-color);
            margin-top: 30px;
            font-size: 1.5em;
        }
        
        h3 {
            color: var(--text-color);
            margin-top: 25px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }

        .section-divider {
            margin: 30px 0;
            border: none;
            border-top: 1px solid var(--border-color);
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
        
        .llm-call {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
        }
        
        .call-header {
            font-weight: bold;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .call-content {
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        
        .prompt-box, .response-box {
            font-family: monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
        }
        
        .prompt-box {
            background-color: #f0f8ff;
            border: 1px solid #b8daff;
        }
        
        .response-box {
            background-color: #f0fff4;
            border: 1px solid #c3e6cb;
        }
        
        .system-prompt {
            font-style: italic;
            color: #6c757d;
            background-color: #f8f9fa;
            padding: 8px;
            border-radius: 4px;
            margin: 5px 0;
        }
        
        .text-muted {
            color: #6c757d;
            font-size: 0.9em;
        }
        
        .logged-in {
            color: var(--success-color);
            font-weight: bold;
        }
        
        .logged-out {
            color: var(--error-color);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .llm-calls-log {
            margin-top: 20px;
        }
        
        .no-calls {
            color: #6c757d;
            font-style: italic;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        
        .call-list {
            list-style-type: none;
            padding: 0;
        }
        
        .call-item {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .call-item:hover {
            background-color: #f0f8ff;
        }
        
        /* Performance metrics */
        .performance-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .metric {
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            text-align: center;
        }
        
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            margin: 10px 0;
        }
        
        /* API Inspector */
        .api-inspector {
            margin: 20px 0;
        }
        
        .request-details, .response-details {
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            margin-bottom: 15px;
            overflow-x: auto;
        }
        
        .api-inspector pre {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
        }
        
        /* Responsive styles */
        @media (max-width: 768px) {
            .main-content {
                padding: 10px;
            }
            
            .llm-call {
                margin: 10px 0;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            button {
                width: 100%;
                margin-bottom: 5px;
            }
            
            .performance-metrics {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>ICMP LLM API Debugger</h1>
        
        <!-- Login Section -->
        <h2>Login</h2>
        <div class="login-section">
            <div class="form-group">
                <label for="businessId">Business ID</label>
                <input id="businessId" type="text" placeholder="Enter Business ID">
            </div>
            
            <div class="form-group">
                <label for="ownerId">Owner ID</label>
                <input id="ownerId" type="text" placeholder="Enter Owner ID">
                <button onclick="lookupOwner()">Look Up Owner</button>
            </div>
            
            <div class="form-group">
                <label for="apiKey">API Key</label>
                <input id="apiKey" type="password" placeholder="Enter API Key">
            </div>
            
            <div class="button-group">
                <button id="loginButton" onclick="login()">Login</button>
                <span id="loginStatus" class="logged-out">Not logged in</span>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- LLM Call Section -->
        <h2>Make LLM Call</h2>
        <div class="llm-section">
            <div class="form-group">
                <label for="inputText">Input Text</label>
                <textarea id="inputText" placeholder="Enter text to send to LLM"></textarea>
            </div>
            
            <div class="form-group">
                <label for="systemPrompt">System Prompt (Optional)</label>
                <textarea id="systemPrompt" placeholder="Enter system prompt"></textarea>
            </div>
            
            <div class="form-group">
                <label for="callType">Call Type</label>
                <select id="callType">
                    <option value="general">General</option>
                    <option value="stage_selection">Stage Selection</option>
                    <option value="data_extraction">Data Extraction</option>
                    <option value="response_generation">Response Generation</option>
                </select>
            </div>
            
            <div class="button-group">
                <button id="sendButton" onclick="makeLLMCall()" disabled>Make LLM Call</button>
            </div>
            
            <div id="responseArea">
                <div class="text-muted">Make an LLM call to see the response</div>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Performance Metrics Section -->
        <h2>Performance Metrics</h2>
        <div id="performanceMetricsArea" class="performance-metrics">
            <div class="metric">
                <div class="metric-label">Total Processing Time</div>
                <div class="metric-value" id="totalProcessingTime">-</div>
                <div class="metric-unit">milliseconds</div>
            </div>
            <div class="metric">
                <div class="metric-label">Token Usage</div>
                <div class="metric-value" id="tokenUsage">-</div>
                <div class="metric-unit">tokens</div>
            </div>
            <div class="metric">
                <div class="metric-label">Estimated Cost</div>
                <div class="metric-value" id="estimatedCost">-</div>
                <div class="metric-unit">USD</div>
            </div>
        </div>
        
        <!-- API Inspector Section -->
        <h2>API Inspector</h2>
        <div id="apiInspectorArea" class="api-inspector">
            <div class="request-details">
                <h4>Request</h4>
                <pre id="apiRequest">No request data available</pre>
            </div>
            <div class="response-details">
                <h4>Response</h4>
                <pre id="apiResponse">No response data available</pre>
            </div>
            <div class="button-group">
                <button id="resendButton" onclick="resendRequest()" disabled>Resend Request</button>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Recent LLM Calls Section -->
        <h2>Recent LLM Calls</h2>
        <div class="button-group">
            <button onclick="fetchRecentCalls()">Refresh Calls</button>
        </div>
        <div id="recentCallsArea">
            <div class="no-calls">No recent LLM calls available</div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Status Section -->
        <h2>Status</h2>
        <div id="statusArea">
            <div id="networkStatus" class="text-muted">No network activity yet</div>
        </div>
    </div>
    
    <script>
        const API_BASE_URL = 'http://127.0.0.1:5000';
        const DEFAULT_BUSINESS_ID = '7ae167a0-d864-43b9-bdaf-fcba35b33f27';
        const DEFAULT_API_KEY = 'da828cae6a3e46228aa09d65ba9066e3';
        
        // State management
        let isLoggedIn = false;
        let lastRequestData = null;
        let lastResponseData = null;
        
        // Initialize the app
        function init() {
            // Check if we're already logged in
            const savedApiKey = localStorage.getItem('businessApiKey');
            if (savedApiKey) {
                // Pre-fill the form with the saved values
                document.getElementById('apiKey').value = savedApiKey;
                
                const savedBusinessId = localStorage.getItem('businessId');
                const savedOwnerId = localStorage.getItem('ownerId');
                
                if (savedBusinessId) {
                    document.getElementById('businessId').value = savedBusinessId;
                }
                
                if (savedOwnerId) {
                    document.getElementById('ownerId').value = savedOwnerId;
                }
                
                // Assume we're logged in if we have all the values
                if (savedApiKey && savedBusinessId && savedOwnerId) {
                    isLoggedIn = true;
                    document.getElementById('loginStatus').textContent = 'Logged in as Owner';
                    document.getElementById('loginStatus').className = 'logged-in';
                    document.getElementById('loginButton').textContent = 'Logged In';
                    document.getElementById('loginButton').disabled = true;
                    document.getElementById('sendButton').disabled = false;
                }
            }
            
            // Set default values if not already set
            if (!document.getElementById('businessId').value) {
                document.getElementById('businessId').value = DEFAULT_BUSINESS_ID;
            }
            
            // Check if API server is running
            checkApiServer();
        }
        
        // Call init when the page loads
        window.addEventListener('DOMContentLoaded', init);
        
        // Check if API server is running
        async function checkApiServer() {
            try {
                const response = await fetch(`${API_BASE_URL}/health`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    },
                    mode: 'cors'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    showSuccess(`API server is running. Database: ${data.database}`);
                } else {
                    showError(`API server returned status: ${response.status}`);
                }
            } catch (error) {
                showError(`API server check failed: ${error.message}`);
            }
        }
        
        // Login function
        async function login() {
            const businessId = document.getElementById('businessId').value.trim();
            const ownerId = document.getElementById('ownerId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !ownerId || !apiKey) {
                showError('Business ID, Owner ID, and API Key are required to login');
                return;
            }
            
            // Prepare login data
            const loginData = {
                userId: ownerId,
                businessId: businessId,
                businessApiKey: apiKey
            };
            
            updateStatus('Logging in...');
            
            try {
                const url = `${API_BASE_URL}/api/verify-owner`;
                console.log('Verifying business owner with URL:', url);
                
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(loginData),
                    mode: 'cors',
                    credentials: 'omit'
                })
                .then(response => {
                    if (!response.ok) {
                        // Check response content type to determine how to parse it
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            return response.json().then(errorData => {
                                throw new Error(`Login failed! status: ${response.status}, message: ${errorData.error || 'Unknown error'}`);
                            });
                        } else {
                            return response.text().then(text => {
                                throw new Error(`Login failed! status: ${response.status}, message: ${text || 'Unknown error'}`);
                            });
                        }
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        isLoggedIn = true;
                        showSuccess('Login successful! Owner verification confirmed.');
                        document.getElementById('loginStatus').textContent = 'Logged in as Owner';
                        document.getElementById('loginStatus').className = 'logged-in';
                        document.getElementById('loginButton').textContent = 'Logged In';
                        document.getElementById('loginButton').disabled = true;
                        document.getElementById('sendButton').disabled = false;
                        
                        // Store credentials for subsequent requests
                        localStorage.setItem('businessApiKey', apiKey);
                        localStorage.setItem('businessId', businessId);
                        localStorage.setItem('ownerId', ownerId);
                        
                        // Fetch recent calls after successful login
                        fetchRecentCalls();
                    } else {
                        isLoggedIn = false;
                        throw new Error(data.error || 'Login failed: Not a business owner');
                    }
                })
                .catch(error => {
                    console.error('Login error:', error);
                    isLoggedIn = false;
                    showError(`Login failed: ${error.message}`);
                    document.getElementById('loginStatus').textContent = 'Not logged in';
                    document.getElementById('loginStatus').className = 'logged-out';
                });
                
            } catch (error) {
                console.error('Login error:', error);
                isLoggedIn = false;
                showError(`Login failed: ${error.message}`);
                document.getElementById('loginStatus').textContent = 'Not logged in';
                document.getElementById('loginStatus').className = 'logged-out';
            }
        }
        
        // Make LLM call function
        async function makeLLMCall() {
            if (!isLoggedIn) {
                showError('You must login first before making LLM calls');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const inputText = document.getElementById('inputText').value.trim();
            const systemPrompt = document.getElementById('systemPrompt').value.trim();
            const callType = document.getElementById('callType').value;
            
            if (!businessId || !apiKey || !inputText) {
                showError('Business ID, API Key, and input text are required');
                return;
            }
            
            // Prepare LLM call data
            const llmData = {
                business_id: businessId,
                input_text: inputText,
                system_prompt: systemPrompt || null,
                call_type: callType
            };
            
            // Store request data for API inspector
            lastRequestData = llmData;
            document.getElementById('apiRequest').textContent = JSON.stringify(llmData, null, 2);
            
            updateStatus('Making LLM call...');
            
            try {
                const url = `${API_BASE_URL}/api/llm/generate`;
                console.log('Making LLM call to URL:', url);
                
                const startTime = performance.now();
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Header for authentication
                    },
                    body: JSON.stringify(llmData),
                    mode: 'cors',
                    credentials: 'omit'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`LLM call failed! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                
                // Store response data for API inspector
                lastResponseData = data;
                document.getElementById('apiResponse').textContent = JSON.stringify(data, null, 2);
                document.getElementById('resendButton').disabled = false;
                
                // Calculate performance metrics
                const endTime = performance.now();
                const totalTime = Math.round(endTime - startTime);
                document.getElementById('totalProcessingTime').textContent = totalTime;
                
                // Estimate token usage (this is a placeholder - actual implementation would need to parse the response)
                const estimatedTokens = Math.round(inputText.length / 4) + Math.round((data.response || '').length / 4);
                document.getElementById('tokenUsage').textContent = estimatedTokens;
                
                // Estimate cost (this is a placeholder - actual implementation would need to use real pricing)
                const estimatedCost = (estimatedTokens / 1000) * 0.002; // $0.002 per 1K tokens
                document.getElementById('estimatedCost').textContent = estimatedCost.toFixed(4);
                
                if (data.success) {
                    showSuccess('LLM call successful!');
                    
                    // Display the response
                    const responseArea = document.getElementById('responseArea');
                    responseArea.innerHTML = `
                        <div class="llm-call">
                            <div class="call-header">LLM Response</div>
                            <div class="response-box">${data.response}</div>
                        </div>
                    `;
                    
                    // Save this call to localStorage
                    saveCallToStorage(inputText, data, callType, systemPrompt, totalTime, estimatedTokens, estimatedCost);
                    
                    // Refresh the recent calls
                    setTimeout(fetchRecentCalls, 1000);
                } else {
                    showError(data.error || 'Unknown error making LLM call');
                }
                
            } catch (error) {
                console.error('LLM call error:', error);
                showError(`Failed to make LLM call: ${error.message}`);
            }
        }
        
        // Function to save a call to localStorage
        function saveCallToStorage(prompt, response, callType, systemPrompt, processingTime, tokenUsage, estimatedCost) {
            try {
                const STORAGE_KEY = 'icmp_llm_calls';
                
                // Get existing calls
                let calls = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
                
                // Create a call object
                const callData = {
                    call_id: 'local_' + Date.now(),
                    timestamp: new Date().toISOString(),
                    input_text: prompt,
                    response: response,
                    call_type: callType,
                    system_prompt: systemPrompt,
                    processing_time_ms: processingTime,
                    token_usage: tokenUsage,
                    estimated_cost: estimatedCost
                };
                
                // Add new call to the beginning of the array
                calls.unshift(callData);
                
                // Keep only the last 20 calls
                if (calls.length > 20) {
                    calls = calls.slice(0, 20);
                }
                
                // Save back to localStorage
                localStorage.setItem(STORAGE_KEY, JSON.stringify(calls));
                
                console.log('LLM call saved to localStorage');
            } catch (error) {
                console.error('Error saving call to storage:', error);
            }
        }
        
        // Fetch recent LLM calls
        async function fetchRecentCalls() {
            if (!isLoggedIn) {
                showError('You must login first before fetching recent calls');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to fetch recent calls');
                return;
            }
            
            updateStatus('Fetching recent LLM calls...');
            
            try {
                // Try to get calls from localStorage first
                const STORAGE_KEY = 'icmp_llm_calls';
                const storedCalls = localStorage.getItem(STORAGE_KEY);
                
                if (storedCalls) {
                    const calls = JSON.parse(storedCalls);
                    displayRecentCalls(calls);
                    showSuccess('Recent LLM calls loaded from local storage');
                    return;
                }
                
                // If no calls in localStorage, try the API
                const url = `${API_BASE_URL}/api/llm/calls/recent?business_id=${encodeURIComponent(businessId)}&limit=10`;
                console.log('Fetching recent LLM calls from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Header for authentication
                    },
                    mode: 'cors',
                    credentials: 'omit'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch recent calls! status: ${response.status}, message: ${errorText}`);
                }
                
                const calls = await response.json();
                
                // Save calls to localStorage for future use
                localStorage.setItem(STORAGE_KEY, JSON.stringify(calls));
                
                // Display the recent calls
                displayRecentCalls(calls);
                
                showSuccess('Recent LLM calls fetched successfully!');
                
            } catch (error) {
                console.error('Error fetching recent calls:', error);
                showError(`Failed to fetch recent calls: ${error.message}`);
                
                // Show a message about using localStorage
                const recentCallsArea = document.getElementById('recentCallsArea');
                recentCallsArea.innerHTML = `
                    <div class="error">
                        <p>Could not fetch recent calls from the API. This may be because:</p>
                        <ul>
                            <li>The API endpoint is not available</li>
                            <li>You don't have permission to access the calls</li>
                            <li>The server is experiencing issues</li>
                        </ul>
                        <p>Please try making a new LLM call to see the results.</p>
                    </div>
                `;
            }
        }
        
        // Display recent calls list
        function displayRecentCalls(calls) {
            const recentCallsArea = document.getElementById('recentCallsArea');
            
            if (!calls || calls.length === 0) {
                recentCallsArea.innerHTML = '<div class="no-calls">No recent LLM calls available</div>';
                return;
            }
            
            let html = '<ul class="call-list">';
            
            calls.forEach(call => {
                html += `
                    <li class="call-item" onclick="displayCallDetails('${call.call_id || 'local'}')">
                        <strong>Input:</strong> ${truncateText(call.input_text || call.prompt, 50)}<br>
                        <strong>Type:</strong> ${call.call_type || 'general'}<br>
                        <strong>Time:</strong> ${formatDateTime(call.timestamp)}<br>
                        <span class="text-muted">Call ID: ${call.call_id || 'local'}</span>
                    </li>
                `;
            });
            
            html += '</ul>';
            
            recentCallsArea.innerHTML = html;
        }
        
        // Display call details
        async function displayCallDetails(callId) {
            if (!isLoggedIn) {
                showError('You must login first before viewing call details');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to view call details');
                return;
            }
            
            updateStatus('Fetching call details...');
            
            try {
                // First check if we have this call in localStorage
                const STORAGE_KEY = 'icmp_llm_calls';
                const storedCalls = localStorage.getItem(STORAGE_KEY);
                
                if (storedCalls) {
                    const calls = JSON.parse(storedCalls);
                    const callData = calls.find(call => call.call_id === callId);
                    
                    if (callData) {
                        // Display the call details from localStorage
                        displayCallDetailsUI(callData);
                        
                        // Update API inspector
                        document.getElementById('apiRequest').textContent = JSON.stringify({
                            business_id: businessId,
                            input_text: callData.input_text || callData.prompt,
                            system_prompt: callData.system_prompt,
                            call_type: callData.call_type
                        }, null, 2);
                        
                        document.getElementById('apiResponse').textContent = JSON.stringify(callData, null, 2);
                        document.getElementById('resendButton').disabled = false;
                        
                        // Update performance metrics
                        document.getElementById('totalProcessingTime').textContent = callData.processing_time_ms || '-';
                        document.getElementById('tokenUsage').textContent = callData.token_usage || '-';
                        document.getElementById('estimatedCost').textContent = callData.estimated_cost || '-';
                        
                        showSuccess('Call details loaded from local storage');
                        return;
                    }
                }
                
                // If not in localStorage, try the API
                const url = `${API_BASE_URL}/api/llm/calls/${callId}?business_id=${encodeURIComponent(businessId)}`;
                console.log('Fetching call details from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Header for authentication
                    },
                    mode: 'cors',
                    credentials: 'omit'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch call details! status: ${response.status}, message: ${errorText}`);
                }
                
                const callData = await response.json();
                
                // Display the call details
                displayCallDetailsUI(callData);
                
                // Update API inspector
                document.getElementById('apiRequest').textContent = JSON.stringify({
                    business_id: businessId,
                    input_text: callData.input_text,
                    system_prompt: callData.system_prompt,
                    call_type: callData.call_type
                }, null, 2);
                
                document.getElementById('apiResponse').textContent = JSON.stringify(callData, null, 2);
                document.getElementById('resendButton').disabled = false;
                
                // Update performance metrics
                document.getElementById('totalProcessingTime').textContent = callData.processing_time_ms || '-';
                document.getElementById('tokenUsage').textContent = callData.token_usage || '-';
                document.getElementById('estimatedCost').textContent = callData.estimated_cost || '-';
                
                showSuccess('Call details fetched successfully!');
                
            } catch (error) {
                console.error('Error fetching call details:', error);
                showError(`Failed to fetch call details: ${error.message}`);
            }
        }
        
        // Display call details UI
        function displayCallDetailsUI(call) {
            const responseArea = document.getElementById('responseArea');
            
            if (!call) {
                responseArea.innerHTML = '<div class="error">No call data available</div>';
                return;
            }
            
            let html = `
                <div class="llm-call">
                    <div class="call-header">LLM Call Details</div>
                    <div class="call-content">
                        <div><strong>Call ID:</strong> ${call.call_id || 'N/A'}</div>
                        <div><strong>Call Type:</strong> ${call.call_type || 'general'}</div>
                        <div><strong>Timestamp:</strong> ${formatDateTime(call.timestamp) || 'N/A'}</div>
                        
                        <div class="prompt-container">
                            <strong>Input Text:</strong>
                            <div class="prompt-box">${call.input_text || 'N/A'}</div>
                        </div>
                        
                        ${call.system_prompt ? `
                        <div class="system-prompt-container">
                            <strong>System Prompt:</strong>
                            <div class="system-prompt">${call.system_prompt}</div>
                        </div>
                        ` : ''}
                        
                        <div class="response-container">
                            <strong>Response:</strong>
                            <div class="response-box">${call.response || 'N/A'}</div>
                        </div>
                    </div>
                </div>
            `;
            
            responseArea.innerHTML = html;
        }
        
        // Resend request function
        function resendRequest() {
            if (!lastRequestData) {
                showError('No request data available to resend');
                return;
            }
            
            // Reuse the makeLLMCall function with the stored request data
            document.getElementById('inputText').value = lastRequestData.input_text;
            document.getElementById('systemPrompt').value = lastRequestData.system_prompt || '';
            document.getElementById('callType').value = lastRequestData.call_type || 'general';
            makeLLMCall();
        }
        
        // Helper functions
        function formatDateTime(dateStr) {
            if (!dateStr) return 'Unknown';
            
            try {
                const date = new Date(dateStr);
                return date.toLocaleString();
            } catch (e) {
                return dateStr;
            }
        }
        
        function truncateText(text, maxLength) {
            if (!text) return 'N/A';
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }
        
        function showError(message) {
            const responseArea = document.getElementById('responseArea');
            responseArea.innerHTML = `<div class="error">${message}</div>`;
            updateStatus(`Error: ${message}`, true);
        }
        
        function showSuccess(message) {
            updateStatus(message, false);
        }
        
        function updateStatus(message, isError = false) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = message;
            statusElement.className = isError ? 'error' : 'success';
        }
        
        // Look up owner ID function
        async function lookupOwner() {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to look up owner');
                return;
            }
            
            // Prepare lookup data
            const lookupData = {
                businessId: businessId,
                businessApiKey: apiKey
            };
            
            updateStatus('Looking up owner...');
            
            try {
                const url = `${API_BASE_URL}/api/lookup-owner`;
                console.log('Looking up owner with URL:', url);
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(lookupData),
                    mode: 'cors',
                    credentials: 'omit'
                });
                
                if (!response.ok) {
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await response.json();
                        throw new Error(`Lookup failed! status: ${response.status}, message: ${errorData.error || 'Unknown error'}`);
                    } else {
                        const text = await response.text();
                        throw new Error(`Lookup failed! status: ${response.status}, message: ${text || 'Unknown error'}`);
                    }
                }
                
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('ownerId').value = data.owner_id;
                    showSuccess(`Owner ID found: ${data.owner_id}`);
                } else {
                    throw new Error(data.error || 'Failed to find owner ID');
                }
                
            } catch (error) {
                console.error('Lookup error:', error);
                showError(`Failed to look up owner ID: ${error.message}`);
            }
        }
    </script>
</body>
</html> 

================================================================================
File: llm_calls.html
Path: .\llm_calls.html
Size: 19234
Modified: 2025-04-12T20:35:22.920162
Created: 2025-04-12T20:11:59.704935
Hash: 34f2e06786e71fd692d050993a0349e37cf72f06a37daf4f97f112feae3a5ac6
Lines: 433
================================================================================
// Check if API server is running
async function checkApiServer(url) {
    try {
        console.log('Checking API server at:', url);
        
        // First try a simple GET request to the base URL
        try {
            console.log('Trying GET request to base URL');
            const baseResponse = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                },
                mode: 'cors'
            });
            console.log('Base URL response status:', baseResponse.status);
            
            // If we get a 404, it might mean the API server is running but the endpoint doesn't exist
            if (baseResponse.status === 404) {
                console.log('Base URL returned 404, API server might be running but endpoint not found');
                return true;
            }
        } catch (baseError) {
            console.log('Base URL request failed:', baseError.message);
            
            // If we get a CORS error, try with no-cors mode
            if (baseError.message.includes('CORS') || baseError.message.includes('Failed to fetch')) {
                console.log('CORS error detected, trying with no-cors mode...');
                try {
                    const noCorsResponse = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        },
                        mode: 'no-cors'
                    });
                    console.log('No-cors request succeeded, server might be running');
                    return true;
                } catch (noCorsError) {
                    console.log('No-cors request also failed:', noCorsError.message);
                }
            }
        }
        
        // Try to make a request to the save-config endpoint
        const testUrl = `${url}/save-config`;
        console.log('Testing API endpoint:', testUrl);
        
        try {
            const response = await fetch(testUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    userId: 'test',
                    businessId: 'test',
                    businessApiKey: 'test'
                }),
                mode: 'cors'
            });
            
            // Even if we get a 400 or 401, it means the server is running
            console.log('API server response status:', response.status);
            
            // If we get a 404, it means the server is not running or the endpoint doesn't exist
            if (response.status === 404) {
                console.log('API endpoint returned 404, server might not be running');
                
                // Show a more specific error message
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger mt-3';
                errorDiv.innerHTML = `
                    <h5>API Server Not Found</h5>
                    <p>The API server at <code>${url}</code> is not accessible. This could be because:</p>
                    <ol>
                        <li>The API server is not running. Please start it with: <code>python app.py</code> (in the backend directory)</li>
                        <li>The API server is running on a different port or URL</li>
                        <li>The API endpoint path is incorrect</li>
                    </ol>
                    <p>Please check your API server configuration and try again.</p>
                `;
                
                // Add the error to the page
                const container = document.querySelector('.container');
                container.insertBefore(errorDiv, document.querySelector('.card'));
                
                // Remove the error after 15 seconds
                setTimeout(() => {
                    errorDiv.remove();
                }, 15000);
                
                return false;
            }
            
            return response.status !== 404;
        } catch (endpointError) {
            console.log('Endpoint request failed:', endpointError.message);
            
            // If we get a CORS error, try with no-cors mode
            if (endpointError.message.includes('CORS') || endpointError.message.includes('Failed to fetch')) {
                console.log('CORS error detected for endpoint, trying with no-cors mode...');
                try {
                    const noCorsResponse = await fetch(testUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            userId: 'test',
                            businessId: 'test',
                            businessApiKey: 'test'
                        }),
                        mode: 'no-cors'
                    });
                    console.log('No-cors endpoint request succeeded, server might be running');
                    return true;
                } catch (noCorsError) {
                    console.log('No-cors endpoint request also failed:', noCorsError.message);
                }
            }
            
            // Show a CORS-specific error message
            const corsDiv = document.createElement('div');
            corsDiv.className = 'alert alert-warning mt-3';
            corsDiv.innerHTML = `
                <h5>CORS Error Detected</h5>
                <p>The API server might be running, but your browser is blocking the request due to CORS policy.</p>
                <p>This typically happens when:</p>
                <ol>
                    <li>You're accessing the page from a different origin than the API server</li>
                    <li>The API server doesn't have CORS headers configured properly</li>
                </ol>
                <p>Solutions:</p>
                <ol>
                    <li>Configure your API server to allow CORS requests from your origin</li>
                    <li>Use a browser extension to disable CORS (for development only)</li>
                    <li>Serve both the frontend and API from the same origin</li>
                </ol>
                <p>If you're serving this page from port 8000 and the API is on port 5000, you need to enable CORS on your API server.</p>
            `;
            
            // Add the error to the page
            const container = document.querySelector('.container');
            container.insertBefore(corsDiv, document.querySelector('.card'));
            
            // Remove the error after 15 seconds
            setTimeout(() => {
                corsDiv.remove();
            }, 15000);
            
            return false;
        }
    } catch (error) {
        console.error('API server check failed:', error);
        
        // Show a generic error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger mt-3';
        errorDiv.innerHTML = `
            <h5>API Server Connection Error</h5>
            <p>Failed to connect to the API server at <code>${url}</code>.</p>
            <p>Error: ${error.message}</p>
            <p>Please check if the API server is running and accessible.</p>
            <p>If you're serving this page from port 8000 and the API is on port 5000, make sure:</p>
            <ol>
                <li>The API server is running: <code>python app.py</code> (in the backend directory)</li>
                <li>The API server has CORS enabled to allow requests from <code>http://localhost:8000</code></li>
            </ol>
        `;
        
        // Add the error to the page
        const container = document.querySelector('.container');
        container.insertBefore(errorDiv, document.querySelector('.card'));
        
        // Remove the error after 15 seconds
        setTimeout(() => {
            errorDiv.remove();
        }, 15000);
        
        return false;
    }
} 

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    // Disable send button until login
    document.getElementById('sendButton').disabled = true;
    
    // Set default API URL based on the current context
    if (window.location.protocol === 'file:') {
        // If opened directly from file system, use localhost:5000
        API_BASE_URL = 'http://localhost:5000/api';
        console.log('Detected file:// protocol, setting default API URL to:', API_BASE_URL);
    } else {
        // If served from a web server, check if it's the same origin as the API
        const currentPort = window.location.port;
        if (currentPort === '5000') {
            // If served from port 5000, use relative path
            API_BASE_URL = '/api';
            console.log('Served from port 5000, using relative API URL:', API_BASE_URL);
        } else {
            // If served from a different port, use absolute URL to port 5000
            API_BASE_URL = 'http://localhost:5000/api';
            console.log('Served from port', currentPort, ', using absolute API URL:', API_BASE_URL);
        }
    }
    
    // Show appropriate warning based on context
    const warningDiv = document.createElement('div');
    warningDiv.className = 'alert alert-warning';
    
    if (window.location.protocol === 'file:') {
        warningDiv.innerHTML = `
            <h4>⚠️ Important: Using File Protocol</h4>
            <p>You are opening this page directly from your file system. For better compatibility, you have two options:</p>
            <ol>
                <li><strong>Use the React Application (Recommended):</strong>
                    <ul>
                        <li>Run the API server: <code>python app.py</code> (in the backend directory)</li>
                        <li>Run the React app: <code>npm start</code> (in the front-end directory)</li>
                        <li>Access the app at <a href="http://localhost:3000" target="_blank">http://localhost:3000</a></li>
                    </ul>
                </li>
                <li><strong>Use this Standalone HTML File:</strong>
                    <ul>
                        <li>Run the API server: <code>python app.py</code> (in the backend directory)</li>
                        <li>Make sure your API server has CORS enabled for file:// protocol</li>
                        <li>Enter your credentials below and click Login</li>
                    </ul>
                </li>
            </ol>
            <p>If you're seeing CORS errors, please use the React application instead.</p>
        `;
    } else if (window.location.port !== '5000') {
        warningDiv.innerHTML = `
            <h4>⚠️ Important: API Server Port Mismatch</h4>
            <p>You are accessing this page from port ${window.location.port}, but the API server is expected to run on port 5000.</p>
            <p>Please ensure:</p>
            <ol>
                <li>The API server is running on port 5000: <code>python app.py</code> (in the backend directory)</li>
                <li>The API URL below is set to <code>http://localhost:5000/api</code></li>
            </ol>
            <p>If you're seeing 404 errors, it means the API server is not running or is running on a different port.</p>
        `;
    }
    
    if (warningDiv.innerHTML) {
        document.querySelector('.container').insertBefore(warningDiv, document.querySelector('.card'));
    }

    // Update API base URL input
    const apiUrlInput = document.getElementById('apiBaseUrl');
    if (apiUrlInput) {
        apiUrlInput.value = API_BASE_URL;
        apiUrlInput.addEventListener('change', function() {
            API_BASE_URL = this.value;
            console.log('API Base URL updated to:', API_BASE_URL);
            
            // Show warning if URL doesn't end with /api
            if (!API_BASE_URL.endsWith('/api')) {
                const warning = document.createElement('div');
                warning.className = 'alert alert-warning mt-2';
                warning.textContent = 'Warning: API URL should end with /api';
                apiUrlInput.parentNode.appendChild(warning);
                setTimeout(() => warning.remove(), 5000);
            }
        });
    }

    // Add test connection button
    const testButton = document.createElement('button');
    testButton.className = 'btn btn-info btn-sm ms-2';
    testButton.textContent = 'Test Connection';
    testButton.onclick = async function() {
        try {
            const isRunning = await checkApiServer(API_BASE_URL);
            if (isRunning) {
                showAlert('API server is running and accessible!', 'success');
            } else {
                showAlert('API server is not accessible. Please check if it\'s running on port 5000.', 'danger');
            }
        } catch (error) {
            showAlert('Error testing connection: ' + error.message, 'danger');
        }
    };
    apiUrlInput.parentNode.appendChild(testButton);
}); 

// Login function
async function login() {
    try {
        // Get values from form
        const businessId = document.getElementById('businessId').value.trim();
        const apiKey = document.getElementById('apiKey').value.trim();
        const ownerId = document.getElementById('ownerId').value.trim();
        
        // Validate inputs
        if (!businessId || !apiKey || !ownerId) {
            showError('Please enter all required fields');
            return;
        }
        
        // Update API base URL if provided
        const apiBaseUrlInput = document.getElementById('apiBaseUrl');
        if (apiBaseUrlInput && apiBaseUrlInput.value) {
            API_BASE_URL = apiBaseUrlInput.value.trim();
            console.log('Using custom API URL:', API_BASE_URL);
        }
        
        // Check if API server is running
        console.log('Checking if API server is running at:', API_BASE_URL);
        const isRunning = await checkApiServer(API_BASE_URL);
        
        if (!isRunning) {
            showError(`API server is not accessible at ${API_BASE_URL}. Please ensure:
                <ol>
                    <li>The API server is running: <code>python app.py</code> (in the backend directory)</li>
                    <li>The API URL is correct: <code>${API_BASE_URL}</code></li>
                    <li>You're not getting CORS errors (check browser console)</li>
                </ol>
                <p>If you're serving this page from a different port than the API server, make sure to use the full URL including the port number.</p>`);
            return;
        }
        
        // Show loading state
        const loginButton = document.getElementById('loginButton');
        const originalText = loginButton.textContent;
        loginButton.disabled = true;
        loginButton.textContent = 'Logging in...';
        
        // Prepare login data
        const loginData = {
            businessId: businessId,
            businessApiKey: apiKey,
            ownerId: ownerId
        };
        
        console.log('Attempting login with data:', {...loginData, businessApiKey: '***'});
        
        // Make login request
        const response = await fetch(`${API_BASE_URL}/save-config`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(loginData)
        });
        
        console.log('Login response status:', response.status);
        
        // Clone the response before reading it
        const responseClone = response.clone();
        
        // Check if response is OK
        if (!response.ok) {
            // Try to get error details from response
            let errorMessage = `Login failed: ${response.status} ${response.statusText}`;
            try {
                const errorData = await responseClone.json();
                if (errorData && errorData.error) {
                    errorMessage = `Login failed: ${errorData.error}`;
                }
            } catch (e) {
                console.log('Could not parse error response as JSON');
            }
            
            throw new Error(errorMessage);
        }
        
        // Parse response data
        const data = await response.json();
        console.log('Login successful, response data:', data);
        
        // Store credentials
        BUSINESS_ID = businessId;
        API_KEY = apiKey;
        OWNER_ID = ownerId;
        
        // Enable send button
        document.getElementById('sendButton').disabled = false;
        
        // Show success message
        showAlert('Login successful! You can now send messages.', 'success');
        
        // Update UI
        loginButton.textContent = 'Logged In';
        loginButton.classList.remove('btn-primary');
        loginButton.classList.add('btn-success');
        
        // Hide login form
        document.getElementById('loginForm').style.display = 'none';
        
        // Show message form
        document.getElementById('messageForm').style.display = 'block';
        
    } catch (error) {
        console.error('Login error:', error);
        
        // Reset login button
        const loginButton = document.getElementById('loginButton');
        loginButton.disabled = false;
        loginButton.textContent = 'Login';
        
        // Show error message
        showError(`Login failed: ${error.message}`);
        
        // Add troubleshooting tips
        const troubleshootingTips = document.createElement('div');
        troubleshootingTips.className = 'alert alert-info mt-3';
        troubleshootingTips.innerHTML = `
            <h5>Troubleshooting Tips:</h5>
            <ol>
                <li>Check if the API server is running on port 5000</li>
                <li>Verify your Business ID, API Key, and Owner ID are correct</li>
                <li>If you're seeing CORS errors, make sure the API server has CORS enabled</li>
                <li>Try using the "Test Connection" button to check API connectivity</li>
            </ol>
        `;
        
        // Add the tips to the page
        const loginCard = document.querySelector('.card');
        loginCard.appendChild(troubleshootingTips);
        
        // Remove the tips after 10 seconds
        setTimeout(() => {
            troubleshootingTips.remove();
        }, 10000);
    }
} 

================================================================================
File: llm_debugger.html
Path: .\llm_debugger.html
Size: 16300
Modified: 2025-04-12T23:19:44.340442
Created: 2025-04-12T22:44:01.378023
Hash: 6e470a13e7e6bf0eea0158cc25e32e30dfa4a7e04c73edbf46ec2ffb584062cb
Lines: 450
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICMP LLM Debugger</title>
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --background-color: #f5f6fa;
            --text-color: #2c3e50;
            --border-color: #dcdde1;
            --success-color: #27ae60;
            --error-color: #e74c3c;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid var(--border-color);
        }

        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: none;
            background: none;
            color: var(--text-color);
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .tab.active {
            color: var(--secondary-color);
            border-bottom: 2px solid var(--secondary-color);
        }

        .tab-content {
            display: none;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }

        input[type="text"],
        input[type="password"],
        textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 14px;
        }

        textarea {
            min-height: 150px;
            resize: vertical;
        }

        button {
            background-color: var(--secondary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #2980b9;
        }

        button:disabled {
            background-color: #bdc3c7;
            cursor: not-allowed;
        }

        .response {
            margin-top: 20px;
            padding: 15px;
            border-radius: 4px;
            background-color: #f8f9fa;
            border: 1px solid var(--border-color);
        }

        .response pre {
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .error {
            color: var(--error-color);
            padding: 10px;
            border-radius: 4px;
            background-color: #fde8e8;
            margin-top: 10px;
        }

        .success {
            color: var(--success-color);
            padding: 10px;
            border-radius: 4px;
            background-color: #e8f5e9;
            margin-top: 10px;
        }

        .status {
            margin-top: 10px;
            font-size: 14px;
            color: #666;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid var(--secondary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ICMP LLM Debugger</h1>
            <p>Debug and test LLM interactions</p>
        </div>

        <div class="tabs">
            <button class="tab active" onclick="showTab('login')">Login</button>
            <button class="tab" onclick="showTab('llm-call')">Make LLM Call</button>
            <button class="tab" onclick="showTab('recent-calls')">Recent Calls</button>
        </div>

        <div id="login" class="tab-content active">
            <div class="form-group">
                <label for="businessId">Business ID:</label>
                <input type="text" id="businessId" placeholder="Enter your business ID">
            </div>
            <div class="form-group">
                <label for="ownerId">Owner ID:</label>
                <input type="text" id="ownerId" placeholder="Enter your owner ID">
            </div>
            <div class="form-group">
                <label for="apiKey">API Key:</label>
                <input type="password" id="apiKey" placeholder="Enter your API key">
            </div>
            <button onclick="login()">Login</button>
            <div id="loginStatus" class="status"></div>
        </div>

        <div id="llm-call" class="tab-content">
            <div class="form-group">
                <label for="prompt">Prompt:</label>
                <textarea id="prompt" placeholder="Enter your prompt here..."></textarea>
            </div>
            <div class="form-group">
                <label for="context">Context (optional):</label>
                <textarea id="context" placeholder="Enter any additional context..."></textarea>
            </div>
            <button onclick="makeLLMCall()">Send Request</button>
            <div id="llmStatus" class="status"></div>
            <div id="llmResponse" class="response hidden"></div>
        </div>

        <div id="recent-calls" class="tab-content">
            <div class="form-group">
                <label>Recent LLM Calls</label>
                <p class="text-muted">These are calls made from message_handling.html and llm.html</p>
            </div>
            <button onclick="loadRecentCalls()">Refresh Calls</button>
            <div id="recentCallsList" class="response"></div>
        </div>
    </div>

    <script>
        let apiKey = '';
        let businessId = '';
        let ownerId = '';
        const API_BASE_URL = 'http://localhost:5000';
        const STORAGE_KEY = 'icmp_llm_calls';

        function showTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');
            document.querySelector(`button[onclick="showTab('${tabId}')"]`).classList.add('active');
            
            // Load recent calls when switching to the recent-calls tab
            if (tabId === 'recent-calls') {
                loadRecentCalls();
            }
        }

        async function login() {
            const apiKeyInput = document.getElementById('apiKey');
            const businessIdInput = document.getElementById('businessId');
            const ownerIdInput = document.getElementById('ownerId');
            const loginStatus = document.getElementById('loginStatus');
            
            apiKey = apiKeyInput.value.trim();
            businessId = businessIdInput.value.trim();
            ownerId = ownerIdInput.value.trim();
            
            if (!apiKey || !businessId || !ownerId) {
                loginStatus.innerHTML = '<div class="error">Please enter all required fields</div>';
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/verify-owner`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'businessapikey': apiKey
                    },
                    body: JSON.stringify({
                        userId: ownerId,
                        businessId: businessId,
                        businessApiKey: apiKey
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        loginStatus.innerHTML = '<div class="success">Login successful!</div>';
                        showTab('llm-call');
                        
                        // Store credentials for future use
                        localStorage.setItem('icmp_api_key', apiKey);
                        localStorage.setItem('icmp_business_id', businessId);
                        localStorage.setItem('icmp_owner_id', ownerId);
                    } else {
                        loginStatus.innerHTML = `<div class="error">Login failed: ${data.error || 'Unknown error'}</div>`;
                    }
                } else {
                    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
                    loginStatus.innerHTML = `<div class="error">Login failed: ${errorData.error || 'Server error'}</div>`;
                }
            } catch (error) {
                loginStatus.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }

        async function makeLLMCall() {
            if (!apiKey || !businessId) {
                document.getElementById('llmStatus').innerHTML = '<div class="error">Please login first</div>';
                return;
            }

            const prompt = document.getElementById('prompt').value.trim();
            const context = document.getElementById('context').value.trim();
            const llmStatus = document.getElementById('llmStatus');
            const llmResponse = document.getElementById('llmResponse');

            if (!prompt) {
                llmStatus.innerHTML = '<div class="error">Please enter a prompt</div>';
                return;
            }

            llmStatus.innerHTML = '<div class="loading"></div>Processing request...';
            llmResponse.classList.add('hidden');

            try {
                const response = await fetch(`${API_BASE_URL}/api/llm/generate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'businessapikey': apiKey
                    },
                    body: JSON.stringify({
                        business_id: businessId,
                        input_text: prompt,
                        context: context || undefined
                    })
                });

                const data = await response.json();
                
                if (response.ok) {
                    llmStatus.innerHTML = '<div class="success">Request successful!</div>';
                    llmResponse.classList.remove('hidden');
                    llmResponse.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
                    
                    // Save this call to localStorage
                    saveCallToStorage(prompt, data);
                    
                    // If we're on the recent-calls tab, refresh the display
                    if (document.getElementById('recent-calls').classList.contains('active')) {
                        loadRecentCalls();
                    }
                } else {
                    llmStatus.innerHTML = `<div class="error">Error: ${data.error || 'Unknown error'}</div>`;
                }
            } catch (error) {
                llmStatus.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }
        
        // Function to save a call to localStorage
        function saveCallToStorage(prompt, response) {
            try {
                // Get existing calls
                let calls = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
                
                // Add new call
                calls.unshift({
                    call_id: 'local_' + Date.now(),
                    timestamp: new Date().toISOString(),
                    input_text: prompt,
                    response: response,
                    call_type: 'general'
                });
                
                // Keep only the last 20 calls
                if (calls.length > 20) {
                    calls = calls.slice(0, 20);
                }
                
                // Save back to localStorage
                localStorage.setItem(STORAGE_KEY, JSON.stringify(calls));
                
                console.log('LLM call saved to localStorage');
            } catch (error) {
                console.error('Error saving call to storage:', error);
            }
        }
        
        // Function to load recent calls from localStorage
        function loadRecentCalls() {
            const recentCallsList = document.getElementById('recentCallsList');
            
            try {
                const calls = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
                
                if (calls.length === 0) {
                    recentCallsList.innerHTML = '<div class="status">No recent calls found</div>';
                    return;
                }
                
                let html = '';
                
                calls.forEach(call => {
                    html += `
                        <div class="response" style="margin-bottom: 10px;">
                            <strong>Timestamp:</strong> ${new Date(call.timestamp).toLocaleString()}<br>
                            <strong>Prompt:</strong> ${call.input_text || call.prompt || 'N/A'}<br>
                            <strong>Response:</strong><br>
                            <pre>${JSON.stringify(call.response, null, 2)}</pre>
                        </div>
                    `;
                });
                
                recentCallsList.innerHTML = html;
            } catch (error) {
                console.error('Error loading calls from storage:', error);
                recentCallsList.innerHTML = `<div class="error">Error loading calls: ${error.message}</div>`;
            }
        }

        // Check if credentials are stored in localStorage
        window.onload = function() {
            const storedApiKey = localStorage.getItem('icmp_api_key');
            const storedBusinessId = localStorage.getItem('icmp_business_id');
            const storedOwnerId = localStorage.getItem('icmp_owner_id');
            
            if (storedApiKey && storedBusinessId && storedOwnerId) {
                apiKey = storedApiKey;
                businessId = storedBusinessId;
                ownerId = storedOwnerId;
                
                document.getElementById('apiKey').value = storedApiKey;
                document.getElementById('businessId').value = storedBusinessId;
                document.getElementById('ownerId').value = storedOwnerId;
                
                // Auto-login with stored credentials
                login();
            }
            
            // Set up an interval to check for new calls every 5 seconds
            setInterval(loadRecentCalls, 5000);
        };
    </script>
</body>
</html> 

================================================================================
File: message_handling.html
Path: .\message_handling.html
Size: 57113
Modified: 2025-04-13T19:49:48.016386
Created: 2025-04-11T15:15:10.708002
Hash: 0f2a01fdb1ba28eac4f62b229c36451bcaebc440e33a0eea566cc76bda65bacc
Lines: 1431
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICMP Message Processing Debugger</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            padding: 0;
            margin: 0;
            display: flex;
            background-color: var(--bg-light);
            color: var(--text-color);
        }

        .main-content {
            flex: 1;
            max-width: 1200px;
            padding: 20px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }

        label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 500;
            color: var(--text-color);
        }

        input[type="text"], 
        input[type="password"], 
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
            transition: border-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        textarea { 
            height: 120px; 
            resize: vertical;
            font-family: inherit;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s;
            margin-right: 10px;
        }

        button:hover { 
            background-color: var(--primary-hover);
        }
        
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        #responseArea {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid var(--border-color);
            background-color: white;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
            font-size: 14px;
            line-height: 1.4;
            max-height: 400px;
            overflow-y: auto;
        }

        .error { 
            color: var(--error-color);
            border-color: var(--error-color);
            background-color: #fff5f5;
        }

        .success {
            color: var(--success-color);
            border-color: var(--success-color);
            background-color: #f0fff4;
        }

        h1 {
            color: var(--text-color);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        h2 {
            color: var(--text-color);
            margin-top: 30px;
            font-size: 1.5em;
        }
        
        h3 {
            color: var(--text-color);
            margin-top: 25px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }

        .section-divider {
            margin: 30px 0;
            border: none;
            border-top: 1px solid var(--border-color);
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
        
        .process-step {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
        }
        
        .step-header {
            font-weight: bold;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .step-content {
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        
        .prompt-box, .response-box {
            font-family: monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
        }
        
        .prompt-box {
            background-color: #f0f8ff;
            border: 1px solid #b8daff;
        }
        
        .response-box {
            background-color: #f0fff4;
            border: 1px solid #c3e6cb;
        }
        
        .system-prompt {
            font-style: italic;
            color: #6c757d;
            background-color: #f8f9fa;
            padding: 8px;
            border-radius: 4px;
            margin: 5px 0;
        }
        
        .text-muted {
            color: #6c757d;
            font-size: 0.9em;
        }
        
        .logged-in {
            color: var(--success-color);
            font-weight: bold;
        }
        
        .logged-out {
            color: var(--error-color);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .process-log {
            margin-top: 20px;
        }
        
        .no-logs {
            color: #6c757d;
            font-style: italic;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        
        .log-list {
            list-style-type: none;
            padding: 0;
        }
        
        .log-item {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .log-item:hover {
            background-color: #f0f8ff;
        }
        
        /* New styles for flow diagram */
        .flow-diagram {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin: 30px 0;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            overflow-x: auto;
        }
        
        .stage-node {
            padding: 15px;
            background-color: white;
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            text-align: center;
            min-width: 150px;
            position: relative;
        }
        
        .stage-node.active {
            background-color: #e6f7ff;
            border-color: #0056b3;
            box-shadow: 0 0 10px rgba(0,123,255,0.3);
        }
        
        .stage-node.completed {
            background-color: #f0fff4;
            border-color: #28a745;
        }
        
        .arrow {
            font-size: 24px;
            color: var(--primary-color);
            margin: 0 10px;
        }
        
        /* New styles for variable substitution */
        .variable-substitution {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        
        .original-template, .context-data, .substituted-template {
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
        }
        
        .variable-highlight {
            background-color: #fff3cd;
            padding: 2px 4px;
            border-radius: 3px;
        }
        
        /* New styles for API inspector */
        .api-inspector {
            margin: 20px 0;
        }
        
        .request-details, .response-details {
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            margin-bottom: 15px;
            overflow-x: auto;
        }
        
        .api-inspector pre {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
        }
        
        /* New styles for performance metrics */
        .performance-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .metric {
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            text-align: center;
        }
        
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            margin: 10px 0;
        }
        
        /* Responsive styles */
        @media (max-width: 768px) {
            .main-content {
                padding: 10px;
            }
            
            .process-step {
                margin: 10px 0;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            button {
                width: 100%;
                margin-bottom: 5px;
            }
            
            .variable-substitution {
                grid-template-columns: 1fr;
            }
            
            .performance-metrics {
                grid-template-columns: 1fr;
            }
            
            .flow-diagram {
                flex-direction: column;
                align-items: stretch;
            }
            
            .stage-node {
                margin-bottom: 10px;
            }
            
            .arrow {
                transform: rotate(90deg);
                margin: 5px 0;
            }
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>ICMP Message Processing Debugger</h1>
        
        <!-- Login Section -->
        <h2>Login</h2>
        <div class="login-section">
            <div class="form-group">
                <label for="businessId">Business ID</label>
                <input id="businessId" type="text" placeholder="Enter Business ID">
            </div>
            
            <div class="form-group">
                <label for="ownerId">Owner ID</label>
                <input id="ownerId" type="text" placeholder="Enter Owner ID">
                <button onclick="lookupOwner()">Look Up Owner</button>
            </div>
            
            <div class="form-group">
                <label for="apiKey">API Key</label>
                <input id="apiKey" type="password" placeholder="Enter API Key">
            </div>
            
            <div class="button-group">
                <button id="loginButton" onclick="login()">Login</button>
                <span id="loginStatus" class="logged-out">Not logged in</span>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Message Sending Section -->
        <h2>Send Message</h2>
        <div class="message-section">
            <div class="form-group">
                <label for="userId">Message Sender ID (different user)</label>
                <input id="userId" type="text" placeholder="Enter User ID or generate new">
                <button onclick="document.getElementById('userId').value = generateUUID()">Generate New</button>
            </div>
            
            <div class="form-group">
                <label for="messageContent">Message Content</label>
                <textarea id="messageContent" placeholder="Enter your message"></textarea>
            </div>
            
            <div class="button-group">
                <button id="sendButton" onclick="sendMessageAndDebug()">Send & Debug</button>
            </div>
            
            <div id="responseArea">
                <div class="text-muted">Send a message to see the response</div>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Flow Diagram Section (New) -->
        <h2>Message Processing Flow</h2>
        <div class="flow-diagram">
            <div class="stage-node" id="stage-selection-node">Stage Selection</div>
            <div class="arrow">→</div>
            <div class="stage-node" id="data-extraction-node">Data Extraction</div>
            <div class="arrow">→</div>
            <div class="stage-node" id="response-generation-node">Response Generation</div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Processing Details Section -->
        <h2>Processing Details</h2>
        <div id="processLogArea" class="process-log">
            <div class="no-logs">No processing data available yet</div>
        </div>
        
        <!-- Variable Substitution Section (New) -->
        <h2>Variable Substitution</h2>
        <div id="variableSubstitutionArea" class="variable-substitution">
            <div class="original-template">
                <h4>Original Template</h4>
                <pre id="originalTemplate">No template data available</pre>
            </div>
            <div class="context-data">
                <h4>Context Data</h4>
                <pre id="contextData">No context data available</pre>
            </div>
            <div class="substituted-template">
                <h4>Substituted Template</h4>
                <pre id="substitutedTemplate">No substituted template available</pre>
            </div>
        </div>
        
        <!-- Performance Metrics Section (New) -->
        <h2>Performance Metrics</h2>
        <div id="performanceMetricsArea" class="performance-metrics">
            <div class="metric">
                <div class="metric-label">Total Processing Time</div>
                <div class="metric-value" id="totalProcessingTime">-</div>
                <div class="metric-unit">milliseconds</div>
            </div>
            <div class="metric">
                <div class="metric-label">Token Usage</div>
                <div class="metric-value" id="tokenUsage">-</div>
                <div class="metric-unit">tokens</div>
            </div>
            <div class="metric">
                <div class="metric-label">Estimated Cost</div>
                <div class="metric-value" id="estimatedCost">-</div>
                <div class="metric-unit">USD</div>
            </div>
        </div>
        
        <!-- API Inspector Section (New) -->
        <h2>API Inspector</h2>
        <div id="apiInspectorArea" class="api-inspector">
            <div class="request-details">
                <h4>Request</h4>
                <pre id="apiRequest">No request data available</pre>
            </div>
            <div class="response-details">
                <h4>Response</h4>
                <pre id="apiResponse">No response data available</pre>
            </div>
            <div class="button-group">
                <button id="resendButton" onclick="resendRequest()" disabled>Resend Request</button>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Recent Logs Section -->
        <h2>Recent Process Logs</h2>
        <div class="button-group">
            <button onclick="fetchRecentLogs()">Refresh Logs</button>
        </div>
        <div id="recentLogsArea">
            <div class="no-logs">No recent logs available</div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Status Section -->
        <h2>Status</h2>
        <div id="statusArea">
            <div id="networkStatus" class="text-muted">No network activity yet</div>
        </div>
        
        <div class="process-steps">
            <div class="process-step">
                <div class="step-header">Stage 1: Intent Detection</div>
                <div class="step-content">
                    <div class="prompt-box" id="intentPrompt"></div>
                    <div class="response-box" id="intentResponse"></div>
                </div>
            </div>
            
            <div class="process-step">
                <div class="step-header">Stage 2: Data Extraction</div>
                <div class="step-content">
                    <div class="prompt-box" id="extractionPrompt"></div>
                    <div class="response-box" id="extractionResponse"></div>
                </div>
            </div>
            
            <div class="process-step">
                <div class="step-header">Stage 3: Response Generation</div>
                <div class="step-content">
                    <div class="prompt-box" id="responsePrompt"></div>
                    <div class="response-box" id="responseResponse"></div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        const API_BASE_URL = 'http://127.0.0.1:5000';
        const DEFAULT_BUSINESS_ID = '7ae167a0-d864-43b9-bdaf-fcba35b33f27';
        const DEFAULT_API_KEY = 'da828cae6a3e46228aa09d65ba9066e3';
        
        // State management
        let isLoggedIn = false;
        let currentLogId = null;
        let lastRequestData = null;
        let lastResponseData = null;
        
        // Initialize the app
        function init() {
            // Check if we're already logged in
            const savedApiKey = localStorage.getItem('businessApiKey');
            if (savedApiKey) {
                // Pre-fill the form with the saved values
                document.getElementById('apiKey').value = savedApiKey;
                
                const savedBusinessId = localStorage.getItem('businessId');
                const savedOwnerId = localStorage.getItem('ownerId');
                
                if (savedBusinessId) {
                    document.getElementById('businessId').value = savedBusinessId;
                }
                
                if (savedOwnerId) {
                    document.getElementById('ownerId').value = savedOwnerId;
                }
                
                // Assume we're logged in if we have all the values
                if (savedApiKey && savedBusinessId && savedOwnerId) {
                    isLoggedIn = true;
                    document.getElementById('loginStatus').textContent = 'Logged in as Owner';
                    document.getElementById('loginStatus').className = 'logged-in';
                    document.getElementById('loginButton').textContent = 'Logged In';
                    document.getElementById('loginButton').disabled = true;
                }
            }
            
            // Set default values if not already set
            if (!document.getElementById('businessId').value) {
                document.getElementById('businessId').value = DEFAULT_BUSINESS_ID;
            }
            
            // Generate a UUID for user_id if not already set
            if (!document.getElementById('userId').value) {
                document.getElementById('userId').value = generateUUID();
            }
            
            // Initialize flow diagram
            resetFlowDiagram();
        }
        
        // Call init when the page loads
        window.addEventListener('DOMContentLoaded', init);
        
        // Utility function to generate a UUID
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Login function
        async function login() {
            const businessId = document.getElementById('businessId').value.trim();
            const ownerId = document.getElementById('ownerId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !ownerId || !apiKey) {
                showError('Business ID, Owner ID, and API Key are required to login');
                return;
            }
            
            // Prepare login data
            const loginData = {
                userId: ownerId,
                businessId: businessId,
                businessApiKey: apiKey
            };
            
            updateStatus('Logging in...');
            
            try {
                const url = `${API_BASE_URL}/api/verify-owner`;
                console.log('Verifying business owner with URL:', url);
                
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(loginData),
                    credentials: 'include', // Include cookies
                    mode: 'cors'
                })
                .then(response => {
                    if (!response.ok) {
                        // Check response content type to determine how to parse it
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            return response.json().then(errorData => {
                                throw new Error(`Login failed! status: ${response.status}, message: ${errorData.error || 'Unknown error'}`);
                            });
                        } else {
                            return response.text().then(text => {
                                throw new Error(`Login failed! status: ${response.status}, message: ${text || 'Unknown error'}`);
                            });
                        }
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        isLoggedIn = true;
                        showSuccess('Login successful! Owner verification confirmed.');
                        document.getElementById('loginStatus').textContent = 'Logged in as Owner';
                        document.getElementById('loginStatus').className = 'logged-in';
                        document.getElementById('loginButton').textContent = 'Logged In';
                        document.getElementById('loginButton').disabled = true;
                        
                        // Store credentials for subsequent requests
                        localStorage.setItem('businessApiKey', apiKey);
                        localStorage.setItem('businessId', businessId);
                        localStorage.setItem('ownerId', ownerId);
                        
                        // Fetch recent logs after successful login
                        fetchRecentLogs();
                    } else {
                        isLoggedIn = false;
                        throw new Error(data.error || 'Login failed: Not a business owner');
                    }
                })
                .catch(error => {
                    console.error('Login error:', error);
                    isLoggedIn = false;
                    showError(`Login failed: ${error.message}`);
                    document.getElementById('loginStatus').textContent = 'Not logged in';
                    document.getElementById('loginStatus').className = 'logged-out';
                });
                
            } catch (error) {
                console.error('Login error:', error);
                isLoggedIn = false;
                showError(`Login failed: ${error.message}`);
                document.getElementById('loginStatus').textContent = 'Not logged in';
                document.getElementById('loginStatus').className = 'logged-out';
            }
        }
        
        // Send message and debug function
        async function sendMessageAndDebug() {
            if (!isLoggedIn) {
                showError('You must login first before sending messages');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const userId = document.getElementById('userId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const message = document.getElementById('messageContent').value.trim();
            
            if (!businessId || !userId || !apiKey || !message) {
                showError('Business ID, User ID, API Key, and message content are required');
                return;
            }
            
            // Prepare message data
            const messageData = {
                business_id: businessId,
                user_id: userId,
                message: message
            };
            
            // Store request data for API inspector
            lastRequestData = messageData;
            document.getElementById('apiRequest').textContent = JSON.stringify(messageData, null, 2);
            
            // Reset flow diagram
            resetFlowDiagram();
            
            updateStatus('Sending message...');
            
            try {
                const url = `${API_BASE_URL}/api/message`;
                console.log('Sending message to URL:', url);
                
                const startTime = performance.now();
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Header for authentication
                    },
                    body: JSON.stringify(messageData),
                    credentials: 'include', // Include cookies
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Message failed! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                
                // Store response data for API inspector
                lastResponseData = data;
                document.getElementById('apiResponse').textContent = JSON.stringify(data, null, 2);
                document.getElementById('resendButton').disabled = false;
                
                // Calculate performance metrics
                const endTime = performance.now();
                const totalTime = Math.round(endTime - startTime);
                document.getElementById('totalProcessingTime').textContent = totalTime;
                
                // Estimate token usage (this is a placeholder - actual implementation would need to parse the response)
                const estimatedTokens = Math.round(message.length / 4) + Math.round((data.response || '').length / 4);
                document.getElementById('tokenUsage').textContent = estimatedTokens;
                
                // Estimate cost (this is a placeholder - actual implementation would need to use real pricing)
                const estimatedCost = (estimatedTokens / 1000) * 0.002; // $0.002 per 1K tokens
                document.getElementById('estimatedCost').textContent = estimatedCost.toFixed(4);
                
                if (data.success) {
                    showSuccess('Message sent successfully!');
                    
                    // Display the response
                    const responseArea = document.getElementById('responseArea');
                    if (data.chat_window) {
                        const { user_message, ai_response } = data.chat_window;
                        responseArea.innerHTML = `
                            <div class="process-step">
                                <div class="step-header">User Message:</div>
                                <div class="prompt-box">${user_message.content}</div>
                            </div>
                            <div class="process-step">
                                <div class="step-header">AI Response:</div>
                                <div class="response-box">${data.response}</div>
                            </div>
                        `;
                    } else {
                        responseArea.innerHTML = `
                            <div class="response-box">${data.response}</div>
                        `;
                    }
                    
                    // If there's a process log ID, fetch and display the details
                    if (data.process_log_id) {
                        currentLogId = data.process_log_id;
                        setTimeout(() => fetchProcessLog(data.process_log_id), 500);
                    } else {
                        showError('No process log ID returned. Detailed debugging not available.');
                    }
                    
                    // Refresh the recent logs
                    setTimeout(fetchRecentLogs, 1000);
                } else {
                    showError(data.error || 'Unknown error sending message');
                }
                
            } catch (error) {
                console.error('Message error:', error);
                showError(`Failed to send message: ${error.message}`);
            }
        }
        
        // Fetch process log details
        async function fetchProcessLog(logId) {
            if (!isLoggedIn) {
                showError('You must login first before fetching logs');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey || !logId) {
                showError('Business ID, API Key, and Log ID are required to fetch processing details');
                return;
            }
            
            updateStatus('Fetching process log...');
            
            try {
                const url = `${API_BASE_URL}/api/message/logs/${logId}?business_id=${encodeURIComponent(businessId)}`;
                console.log('Fetching process log from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Header for authentication
                    },
                    credentials: 'include', // Include cookies
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch process log! status: ${response.status}, message: ${errorText}`);
                }
                
                const logData = await response.json();
                
                // Display the process log
                displayProcessLog(logData);
                
                // Update flow diagram based on processing steps
                updateFlowDiagram(logData);
                
                // Display variable substitution if available
                displayVariableSubstitution(logData);
                
            } catch (error) {
                console.error('Error fetching process log:', error);
                showError(`Failed to fetch process log: ${error.message}`);
            }
        }
        
        // Fetch recent process logs
        async function fetchRecentLogs() {
            if (!isLoggedIn) {
                showError('You must login first before fetching logs');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to fetch recent logs');
                return;
            }
            
            updateStatus('Fetching recent logs...');
            
            try {
                const url = `${API_BASE_URL}/api/message/logs/recent?business_id=${encodeURIComponent(businessId)}&limit=10`;
                console.log('Fetching recent logs from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'businessapikey': apiKey // Header for authentication
                    },
                    credentials: 'include', // Include cookies
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch recent logs! status: ${response.status}, message: ${errorText}`);
                }
                
                const logs = await response.json();
                
                // Display the recent logs
                displayRecentLogs(logs);
                
                showSuccess('Recent logs fetched successfully!');
                
            } catch (error) {
                console.error('Error fetching recent logs:', error);
                showError(`Failed to fetch recent logs: ${error.message}`);
            }
        }
        
        // Display process log details
        function displayProcessLog(log) {
            const processLogArea = document.getElementById('processLogArea');
            
            if (!log) {
                processLogArea.innerHTML = '<div class="no-logs">No processing data available</div>';
                return;
            }
            
            let html = `
                <h3>Process Log Details</h3>
                <div class="process-step">
                    <div class="step-header">Original Message</div>
                    <div class="prompt-box">${log.original_message || 'N/A'}</div>
                    <div class="text-muted">
                        Log ID: ${log.log_id || 'N/A'}<br>
                        Conversation ID: ${log.conversation_id || 'N/A'}<br>
                        Time: ${formatDateTime(log.start_time) || 'N/A'}
                    </div>
                </div>
                
                <div class="process-step">
                    <div class="step-header">Current Stage Information</div>
                    <div class="step-content">
                        <div><strong>Stage ID:</strong> ${log.stage_id || 'No specific stage'}</div>
                        <div><strong>Stage Name:</strong> ${log.current_stage_name || 'Default'}</div>
                        ${log.agent_id ? `<div><strong>Agent ID:</strong> ${log.agent_id}</div>` : ''}
                    </div>
                </div>
            `;
            
            // Process each step
            if (log.processing_steps && log.processing_steps.length > 0) {
                html += `<h3>Processing Steps</h3>`;
                
                log.processing_steps.forEach((step, index) => {
                    html += `
                        <div class="process-step">
                            <div class="step-header">${formatStepName(step.step)} (Step ${index + 1})</div>
                            
                            <div class="step-content">
                                <div class="template-info">
                                    <strong>Template:</strong> ${step.template_name || 'Unknown Template'} (${step.template_id || 'N/A'})<br>
                                    <strong>Time:</strong> ${formatDateTime(step.timestamp) || 'N/A'}
                                </div>
                                
                                ${step.system_prompt ? `
                                <div class="system-prompt-container">
                                    <strong>System Prompt:</strong>
                                    <div class="system-prompt">${step.system_prompt}</div>
                                </div>
                                ` : ''}
                                
                                <div class="prompt-container">
                                    <strong>Prompt:</strong>
                                    <div class="prompt-box" style="white-space: pre-wrap;">${step.prompt || 'N/A'}</div>
                                </div>
                                
                                <div class="response-container">
                                    <strong>Response:</strong>
                                    <div class="response-box" style="white-space: pre-wrap;">${step.response || 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                    `;
                });
            } else {
                html += '<div class="no-logs">No processing steps recorded</div>';
            }
            
            // Final response
            html += `
                <h3>Final Result</h3>
                <div class="process-step">
                    <div class="step-header">Final Response</div>
                    <div class="response-box" style="white-space: pre-wrap;">${
                        log.processing_steps
                            .find(step => step.step === 'response_generation')?.response || 'N/A'
                    }</div>
                </div>
            `;
            
            processLogArea.innerHTML = html;
        }
        
        // Display recent logs list
        function displayRecentLogs(logs) {
            const recentLogsArea = document.getElementById('recentLogsArea');
            
            if (!logs || logs.length === 0) {
                recentLogsArea.innerHTML = '<div class="no-logs">No recent logs available</div>';
                return;
            }
            
            let html = '<ul class="log-list">';
            
            logs.forEach(log => {
                html += `
                    <li class="log-item" onclick="fetchProcessLog('${log.log_id}')">
                        <strong>Message:</strong> ${truncateText(log.original_message, 50)}<br>
                        <strong>Time:</strong> ${formatDateTime(log.start_time)}<br>
                        <span class="text-muted">Log ID: ${log.log_id}</span>
                    </li>
                `;
            });
            
            html += '</ul>';
            
            recentLogsArea.innerHTML = html;
        }
        
        // Display variable substitution
        function displayVariableSubstitution(log) {
            if (!log || !log.processing_steps || log.processing_steps.length === 0) {
                document.getElementById('originalTemplate').textContent = 'No template data available';
                document.getElementById('contextData').textContent = 'No context data available';
                document.getElementById('substitutedTemplate').textContent = 'No substituted template available';
                return;
            }
            
            // Find the first step with template data
            const step = log.processing_steps[0];
            
            if (step.template_content) {
                // Extract variables from template (simple regex for demonstration)
                const variables = step.template_content.match(/\{\{([^}]+)\}\}/g) || [];
                let highlightedTemplate = step.template_content;
                
                // Highlight variables
                variables.forEach(variable => {
                    highlightedTemplate = highlightedTemplate.replace(
                        variable, 
                        `<span class="variable-highlight">${variable}</span>`
                    );
                });
                
                document.getElementById('originalTemplate').innerHTML = highlightedTemplate;
            } else {
                document.getElementById('originalTemplate').textContent = 'No template content available';
            }
            
            // Display context data if available
            if (step.context) {
                document.getElementById('contextData').textContent = JSON.stringify(step.context, null, 2);
            } else {
                document.getElementById('contextData').textContent = 'No context data available';
            }
            
            // Display substituted template if available
            if (step.substituted_template) {
                document.getElementById('substitutedTemplate').textContent = step.substituted_template;
            } else if (step.prompt) {
                document.getElementById('substitutedTemplate').textContent = step.prompt;
            } else {
                document.getElementById('substitutedTemplate').textContent = 'No substituted template available';
            }
        }
        
        // Reset flow diagram
        function resetFlowDiagram() {
            const nodes = document.querySelectorAll('.stage-node');
            nodes.forEach(node => {
                node.classList.remove('active', 'completed');
            });
        }
        
        // Update flow diagram based on processing steps
        function updateFlowDiagram(log) {
            if (!log || !log.processing_steps || log.processing_steps.length === 0) {
                return;
            }
            
            // Reset the diagram
            resetFlowDiagram();
            
            // Mark completed steps
            const completedSteps = new Set();
            log.processing_steps.forEach(step => {
                completedSteps.add(step.step);
            });
            
            // Update nodes based on completed steps
            if (completedSteps.has('stage_selection')) {
                document.getElementById('stage-selection-node').classList.add('completed');
            }
            
            if (completedSteps.has('data_extraction')) {
                document.getElementById('data-extraction-node').classList.add('completed');
            }
            
            if (completedSteps.has('response_generation')) {
                document.getElementById('response-generation-node').classList.add('completed');
            }
            
            // Mark the current active step (last step in the list)
            const lastStep = log.processing_steps[log.processing_steps.length - 1];
            if (lastStep) {
                const activeNode = document.getElementById(`${lastStep.step}-node`);
                if (activeNode) {
                    activeNode.classList.add('active');
                }
            }
        }
        
        // Resend request function
        function resendRequest() {
            if (!lastRequestData) {
                showError('No request data available to resend');
                return;
            }
            
            // Reuse the sendMessageAndDebug function with the stored request data
            document.getElementById('messageContent').value = lastRequestData.message;
            sendMessageAndDebug();
        }
        
        // Helper functions
        function formatStepName(stepName) {
            if (!stepName) return 'Unknown Step';
            
            const names = {
                'stage_selection': 'Stage Selection (Determining Conversation Flow)',
                'data_extraction': 'Data Extraction (Extracting Key Information)',
                'response_generation': 'Response Generation (Creating Final Response)'
            };
            
            return names[stepName] || stepName;
        }
        
        function formatDateTime(dateStr) {
            if (!dateStr) return 'Unknown';
            
            try {
                const date = new Date(dateStr);
                return date.toLocaleString();
            } catch (e) {
                return dateStr;
            }
        }
        
        function truncateText(text, maxLength) {
            if (!text) return 'N/A';
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }
        
        function showError(message) {
            const responseArea = document.getElementById('responseArea');
            responseArea.innerHTML = `<div class="error">${message}</div>`;
            updateStatus(`Error: ${message}`, true);
        }
        
        function showSuccess(message) {
            updateStatus(message, false);
        }
        
        function updateStatus(message, isError = false) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = message;
            statusElement.className = isError ? 'error' : 'success';
        }
        
        // Look up owner ID function
        async function lookupOwner() {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to look up owner');
                return;
            }
            
            // Prepare lookup data
            const lookupData = {
                businessId: businessId,
                businessApiKey: apiKey
            };
            
            updateStatus('Looking up owner...');
            
            try {
                const url = `${API_BASE_URL}/api/lookup-owner`;
                console.log('Looking up owner with URL:', url);
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(lookupData),
                    credentials: 'include', // Include cookies
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await response.json();
                        throw new Error(`Lookup failed! status: ${response.status}, message: ${errorData.error || 'Unknown error'}`);
                    } else {
                        const text = await response.text();
                        throw new Error(`Lookup failed! status: ${response.status}, message: ${text || 'Unknown error'}`);
                    }
                }
                
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('ownerId').value = data.owner_id;
                    showSuccess(`Owner ID found: ${data.owner_id}`);
                } else {
                    throw new Error(data.error || 'Failed to find owner ID');
                }
                
            } catch (error) {
                console.error('Lookup error:', error);
                showError(`Failed to look up owner ID: ${error.message}`);
            }
        }
        
        // Add this function to save LLM calls to localStorage
        function saveLLMCallToStorage(prompt, response) {
            try {
                const STORAGE_KEY = 'icmp_llm_calls';
                
                // Get existing calls
                let calls = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
                
                // Add new call
                calls.unshift({
                    timestamp: new Date().toISOString(),
                    prompt: prompt,
                    response: response
                });
                
                // Keep only the last 20 calls
                if (calls.length > 20) {
                    calls = calls.slice(0, 20);
                }
                
                // Save back to localStorage
                localStorage.setItem(STORAGE_KEY, JSON.stringify(calls));
                
                console.log('LLM call saved to localStorage');
            } catch (error) {
                console.error('Error saving LLM call to storage:', error);
            }
        }
        
        // Find the function that makes the LLM call and add the saveLLMCallToStorage call
        // This is a generic example - you'll need to adapt it to your specific code
        
        // Example: If you have a function like this:
        async function makeLLMCall(prompt) {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required');
                return;
            }
            
            try {
                const url = `${API_BASE_URL}/api/llm/generate`;
                console.log('Making LLM call to URL:', url);
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'businessapikey': apiKey
                    },
                    body: JSON.stringify({
                        business_id: businessId,
                        input_text: prompt,
                        call_type: 'message_handling'
                    }),
                    mode: 'cors',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to make LLM call');
                }
                
                const data = await response.json();
                
                if (data.success) {
                    // Save to localStorage
                    saveLLMCallToStorage(prompt, data.response);
                    
                    // Display the response
                    const responseArea = document.getElementById('responseArea');
                    responseArea.innerHTML = `
                        <div class="llm-call">
                            <div class="call-header">LLM Response</div>
                            <div class="response-box">${data.response}</div>
                        </div>
                    `;
                    
                    showSuccess('LLM call successful!');
                    return data.response;
                } else {
                    throw new Error(data.error || 'Unknown error making LLM call');
                }
                
            } catch (error) {
                console.error('LLM call error:', error);
                showError(`Failed to make LLM call: ${error.message}`);
                return null;
            }
        }
        
        function displayMessageResponse(data) {
            if (data.success) {
                // Check if processing_steps exists before trying to access it
                if (data.processing_steps && Array.isArray(data.processing_steps)) {
                    // Display Stage 1: Intent Detection
                    const intentStep = data.processing_steps.find(step => step.step === 'intent_detection');
                    document.getElementById('intentPrompt').textContent = intentStep?.prompt || '';
                    document.getElementById('intentResponse').textContent = intentStep?.response || '';
                    
                    // Display Stage 2: Data Extraction
                    const extractionStep = data.processing_steps.find(step => step.step === 'data_extraction');
                    document.getElementById('extractionPrompt').textContent = extractionStep?.prompt || '';
                    document.getElementById('extractionResponse').textContent = extractionStep?.response || '';
                    
                    // Display Stage 3: Response Generation
                    const responseStep = data.processing_steps.find(step => step.step === 'response_generation');
                    document.getElementById('responsePrompt').textContent = responseStep?.prompt || '';
                    document.getElementById('responseResponse').textContent = responseStep?.response || '';
                } else {
                    // If no processing steps, display a message
                    document.getElementById('intentPrompt').textContent = 'No processing steps available';
                    document.getElementById('intentResponse').textContent = '';
                    document.getElementById('extractionPrompt').textContent = 'No processing steps available';
                    document.getElementById('extractionResponse').textContent = '';
                    document.getElementById('responsePrompt').textContent = 'No processing steps available';
                    document.getElementById('responseResponse').textContent = '';
                }
                
                // Update chat window
                if (data.chat_window) {
                    updateChatWindow(data.chat_window);
                }
            } else {
                document.getElementById('responseArea').textContent = 'Error: ' + data.error;
                document.getElementById('responseArea').classList.add('error');
            }
        }
    </script>
</body>
</html>


================================================================================
File: stages.html
Path: .\stages.html
Size: 54060
Modified: 2025-04-12T11:28:37.613487
Created: 2025-04-11T22:58:11.208923
Hash: d55106ced657674448a2d02bf44c9eb46a844055909d12c0ee59713f31562657
Lines: 1319
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICMP Stage Management</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            padding: 0;
            margin: 0;
            display: flex;
            background-color: var(--bg-light);
            color: var(--text-color);
        }

        .main-content {
            flex: 1;
            max-width: 1200px;
            padding: 20px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }

        label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 500;
            color: var(--text-color);
        }

        input[type="text"], 
        input[type="password"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
            transition: border-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        textarea { 
            height: 120px; 
            resize: vertical;
            font-family: inherit;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s;
            margin-right: 10px;
        }

        button:hover { 
            background-color: var(--primary-hover);
        }
        
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        .error { 
            color: var(--error-color);
            border-color: var(--error-color);
            background-color: #fff5f5;
        }

        .success {
            color: var(--success-color);
            border-color: var(--success-color);
            background-color: #f0fff4;
        }

        h1 {
            color: var(--text-color);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        h2 {
            color: var(--text-color);
            margin-top: 30px;
            font-size: 1.5em;
        }
        
        h3 {
            color: var(--text-color);
            margin-top: 20px;
            font-size: 1.2em;
        }

        .section-divider {
            margin: 30px 0;
            border: none;
            border-top: 1px solid var(--border-color);
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
        
        .stages-list {
            list-style: none;
            padding: 0;
        }
        
        .stage-item {
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            transition: box-shadow 0.2s;
            cursor: pointer;
        }
        
        .stage-item:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .stage-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .stage-item-name {
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .stage-item-type {
            padding: 3px 8px;
            border-radius: 4px;
            background-color: #e9ecef;
            font-size: 0.8em;
            margin-right: 10px;
        }
        
        .stage-item-description {
            margin-bottom: 10px;
            color: #666;
        }
        
        .stage-item-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.8em;
            color: #888;
        }
        
        .template-details {
            margin: 8px 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            display: flex;
            flex-wrap: wrap;
        }
        
        .template-detail {
            margin-right: 15px;
            margin-bottom: 5px;
            font-size: 0.9em;
            padding: 3px 8px;
            background-color: #e9ecef;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .template-detail:hover {
            background-color: #dae0e5;
        }
        
        .template-label {
            font-weight: bold;
            margin-right: 5px;
        }
        
        .template-id {
            font-family: monospace;
            font-size: 0.9em;
        }
        
        .stage-delete-btn {
            background-color: var(--error-color);
            color: white;
            border: none;
            border-radius: 4px;
            padding: 3px 8px;
            font-size: 0.8em;
            cursor: pointer;
            margin-left: 10px;
        }
        
        .stage-delete-btn:hover {
            background-color: #c82333;
        }
        
        .stage-actions {
            display: flex;
            align-items: center;
        }
        
        .template-card {
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }
        
        .template-card-header {
            font-weight: bold;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .template-card-content {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }
        
        .tab.active {
            border-bottom: 2px solid var(--primary-color);
            font-weight: bold;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }

        .delete-btn {
            background-color: var(--error-color);
            color: white;
        }
        
        .delete-btn:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>ICMP Stage Management</h1>
        
        <!-- Configuration Section -->
        <div id="configSection">
            <h2>Configuration</h2>
            <div class="config-section">
                <div class="form-group">
                    <label for="businessId">Business ID</label>
                    <input id="businessId" type="text" placeholder="Enter Business ID">
                </div>
                
                <div class="form-group">
                    <label for="apiKey">Business API Key</label>
                    <input id="apiKey" type="password" placeholder="Enter Business API Key">
                </div>
                
                <div class="form-group">
                    <label for="agentId">Agent ID (optional)</label>
                    <input id="agentId" type="text" placeholder="Enter Agent ID (optional)">
                </div>
                
                <div class="button-group">
                    <button id="loginButton" onclick="login()">Login</button>
                    <span id="loginStatus" class="logged-out">Not logged in</span>
                </div>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Tabs Navigation -->
        <div class="tabs">
            <div class="tab active" onclick="showTab('stagesList')">Stages List</div>
            <div class="tab" onclick="showTab('createStage')">Create Stage</div>
            <div class="tab" onclick="showTab('editStage')">Edit Stage</div>
        </div>
        
        <!-- Stages List Content -->
        <div id="stagesListContent" class="tab-content active">
            <h2>Stages</h2>
            <div class="button-group">
                <button onclick="fetchStages()">Refresh Stages</button>
            </div>
            <div id="stagesList"></div>
        </div>
        
        <!-- Create Stage Content -->
        <div id="createStageContent" class="tab-content">
            <h2>Create Stage</h2>
            <div class="form-group">
                <label for="stageName">Stage Name</label>
                <input id="stageName" type="text" placeholder="Enter stage name">
            </div>
            
            <div class="form-group">
                <label for="stageDescription">Stage Description</label>
                <textarea id="stageDescription" placeholder="Enter stage description"></textarea>
            </div>
            
            <div class="form-group">
                <label for="stageType">Stage Type</label>
                <select id="stageType">
                    <option value="conversation">Conversation</option>
                    <option value="response">Response</option>
                    <option value="form">Form</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="stageSelectionTemplateId">Stage Selection Template ID</label>
                <select id="stageSelectionTemplateId">
                    <!-- Populated dynamically -->
                </select>
            </div>
            
            <div class="form-group">
                <label for="dataExtractionTemplateId">Data Extraction Template ID</label>
                <select id="dataExtractionTemplateId">
                    <!-- Populated dynamically -->
                </select>
            </div>
            
            <div class="form-group">
                <label for="responseGenerationTemplateId">Response Generation Template ID</label>
                <select id="responseGenerationTemplateId">
                    <!-- Populated dynamically -->
                </select>
            </div>
            
            <div class="button-group">
                <button onclick="createStage()">Create Stage</button>
            </div>
        </div>
        
        <!-- Edit Stage Content -->
        <div id="editStageContent" class="tab-content">
            <h2>Edit Stage</h2>
            <div class="form-group">
                <label for="editStageId">Stage ID</label>
                <input id="editStageId" type="text" readonly>
            </div>
            
            <div class="form-group">
                <label for="editStageName">Stage Name</label>
                <input id="editStageName" type="text" placeholder="Enter stage name">
            </div>
            
            <div class="form-group">
                <label for="editStageDescription">Stage Description</label>
                <textarea id="editStageDescription" placeholder="Enter stage description"></textarea>
            </div>
            
            <div class="form-group">
                <label for="editStageType">Stage Type</label>
                <select id="editStageType">
                    <option value="conversation">Conversation</option>
                    <option value="response">Response</option>
                    <option value="form">Form</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="editStageSelectionTemplateId">Stage Selection Template ID</label>
                <select id="editStageSelectionTemplateId">
                    <!-- Populated dynamically -->
                </select>
            </div>
            
            <div class="form-group">
                <label for="editDataExtractionTemplateId">Data Extraction Template ID</label>
                <select id="editDataExtractionTemplateId">
                    <!-- Populated dynamically -->
                </select>
            </div>
            
            <div class="form-group">
                <label for="editResponseGenerationTemplateId">Response Generation Template ID</label>
                <select id="editResponseGenerationTemplateId">
                    <!-- Populated dynamically -->
                </select>
            </div>
            
            <div class="button-group">
                <button onclick="updateStage()">Update Stage</button>
                <button onclick="confirmDeleteCurrentStage()" class="delete-btn">Delete Stage</button>
                <button onclick="cancelEdit()">Cancel</button>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Status Section -->
        <div id="statusSection">
            <h2>Status</h2>
            <div id="statusArea">
                <div id="networkStatus" class="text-muted">No network activity yet</div>
            </div>
        </div>
    </div>
    
    <script>
        const API_BASE_URL = 'http://127.0.0.1:5000';
        const DEFAULT_BUSINESS_ID = '7ae167a0-d864-43b9-bdaf-fcba35b33f27';
        const DEFAULT_API_KEY = 'da828cae6a3e46228aa09d65ba9066e3';
        
        // State management
        let isLoggedIn = false;
        let templates = [];
        let stages = [];
        let selectedStageId = null;
        
        // Initialize the app
        function init() {
            // Check if we're already logged in
            const savedApiKey = localStorage.getItem('businessApiKey');
            if (savedApiKey) {
                // Pre-fill the form with the saved values
                document.getElementById('apiKey').value = savedApiKey;
                
                const savedBusinessId = localStorage.getItem('businessId');
                const savedAgentId = localStorage.getItem('agentId');
                
                if (savedBusinessId) {
                    document.getElementById('businessId').value = savedBusinessId;
                }
                
                if (savedAgentId) {
                    document.getElementById('agentId').value = savedAgentId;
                }
                
                // Assume we're logged in if we have all the values
                if (savedApiKey && savedBusinessId) {
                    isLoggedIn = true;
                    document.getElementById('loginStatus').textContent = 'Logged in';
                    document.getElementById('loginStatus').className = 'logged-in';
                    document.getElementById('loginButton').textContent = 'Logged In';
                    document.getElementById('loginButton').disabled = true;
                    
                    // Fetch stages
                    fetchStages();
                    
                    // Fetch templates for dropdown lists
                    fetchTemplates();
                }
            }
            
            // Set default values if not already set
            if (!document.getElementById('businessId').value) {
                document.getElementById('businessId').value = DEFAULT_BUSINESS_ID;
            }
        }
        
        // Call init when the page loads
        window.addEventListener('DOMContentLoaded', init);
        
        // Utility function to generate a UUID
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Login function
        function login() {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to login');
                return;
            }
            
            updateStatus('Logging in...');
            
            // Store credentials
            localStorage.setItem('businessApiKey', apiKey);
            localStorage.setItem('businessId', businessId);
            
            const agentId = document.getElementById('agentId').value.trim();
            if (agentId) {
                localStorage.setItem('agentId', agentId);
            }
            
            isLoggedIn = true;
            document.getElementById('loginStatus').textContent = 'Logged in';
            document.getElementById('loginStatus').className = 'logged-in';
            document.getElementById('loginButton').textContent = 'Logged In';
            document.getElementById('loginButton').disabled = true;
            
            // Fetch stages
            fetchStages();
            
            // Fetch templates for dropdown lists
            fetchTemplates();
            
            showSuccess('Logged in successfully');
        }
        
        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.classList.remove('active');
            });
            
            // Deactivate all tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Activate the selected tab
            document.getElementById(tabName + 'Content').classList.add('active');
            
            // Find and activate the tab button
            const tabButtons = document.querySelectorAll('.tab');
            tabButtons.forEach(button => {
                if (button.textContent.toLowerCase().includes(tabName.toLowerCase())) {
                    button.classList.add('active');
                }
            });
        }
        
        // Normalize UUID
        function normalizeUUID(uuid) {
            if (!uuid) return null;
            
            try {
                // Convert to lowercase and trim whitespace
                const normalizedUUID = uuid.toLowerCase().trim();
                // Check if it's a valid UUID format
                const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
                
                if (uuidRegex.test(normalizedUUID)) {
                    return normalizedUUID;
                }
                console.warn('Invalid UUID format:', uuid);
                return uuid; // Return original if not matching pattern
            } catch (error) {
                console.error('Error normalizing UUID:', error);
                return uuid; // Return original on error
            }
        }
        
        // Fetch stages
        async function fetchStages() {
            if (!isLoggedIn) {
                showError('You must login first before fetching stages');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to fetch stages');
                return;
            }
            
            updateStatus('Fetching stages...');
            
            try {
                let url = `${API_BASE_URL}/stages?business_id=${normalizeUUID(businessId)}`;
                if (agentId) {
                    url += `&agent_id=${normalizeUUID(agentId)}`;
                }
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch stages! status: ${response.status}, message: ${errorText}`);
                }
                
                stages = await response.json();
                
                // Display the stages
                displayStages(stages);
                
                showSuccess('Stages fetched successfully!');
            } catch (error) {
                console.error('Error fetching stages:', error);
                showError(`Failed to fetch stages: ${error.message}`);
            }
        }
        
        // Fetch templates
        async function fetchTemplates() {
            if (!isLoggedIn) {
                showError('You must login first before fetching templates');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to fetch templates');
                return;
            }
            
            updateStatus('Fetching templates...');
            
            try {
                let url = `${API_BASE_URL}/templates?business_id=${businessId}`;
                if (agentId) {
                    url += `&agent_id=${agentId}`;
                }
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch templates! status: ${response.status}, message: ${errorText}`);
                }
                
                templates = await response.json();
                
                // Populate template dropdowns
                populateTemplateDropdowns();
                
                showSuccess('Templates fetched successfully!');
            } catch (error) {
                console.error('Error fetching templates:', error);
                showError(`Failed to fetch templates: ${error.message}`);
            }
        }
        
        // Populate template dropdowns
        function populateTemplateDropdowns() {
            const stageSelectionTemplates = templates.filter(template => 
                template.template_type === 'stage_selection' || template.template_type === 'default_stage_selection');
                
            const dataExtractionTemplates = templates.filter(template => 
                template.template_type === 'data_extraction' || template.template_type === 'default_data_extraction');
                
            const responseGenerationTemplates = templates.filter(template => 
                template.template_type === 'response_generation' || template.template_type === 'default_response_generation');
            
            // Populate create stage dropdowns
            populateDropdown('stageSelectionTemplateId', stageSelectionTemplates);
            populateDropdown('dataExtractionTemplateId', dataExtractionTemplates);
            populateDropdown('responseGenerationTemplateId', responseGenerationTemplates);
            
            // Populate edit stage dropdowns
            populateDropdown('editStageSelectionTemplateId', stageSelectionTemplates);
            populateDropdown('editDataExtractionTemplateId', dataExtractionTemplates);
            populateDropdown('editResponseGenerationTemplateId', responseGenerationTemplates);
        }
        
        // Helper function to populate a dropdown
        function populateDropdown(elementId, items) {
            const dropdown = document.getElementById(elementId);
            dropdown.innerHTML = '';
            
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.template_id;
                option.textContent = item.template_name;
                dropdown.appendChild(option);
            });
        }
        
        // Display stages
        function displayStages(stagesList) {
            const stagesListElement = document.getElementById('stagesList');
            
            if (!stagesList || stagesList.length === 0) {
                stagesListElement.innerHTML = '<div class="no-stages">No stages found</div>';
                return;
            }
            
            let html = '<ul class="stages-list">';
            
            stagesList.forEach(stage => {
                html += `
                    <li class="stage-item">
                        <div class="stage-item-header">
                            <div style="display: flex; align-items: center;" onclick="selectStage('${stage.stage_id}')">
                                <div class="stage-item-name">${stage.stage_name}</div>
                                <div class="stage-item-type">${stage.stage_type}</div>
                            </div>
                            <div class="stage-actions">
                                <button class="stage-delete-btn" onclick="confirmDeleteStage('${stage.stage_id}', '${stage.stage_name}', event)">Delete</button>
                            </div>
                        </div>
                        <div class="stage-item-content" onclick="selectStage('${stage.stage_id}')">${escapeHtml(truncateText(stage.stage_description || 'No description', 200))}</div>
                        <div class="template-details">
                            <div class="template-detail" onclick="openTemplateEditor('${stage.stage_selection_template_id}', event)">
                                <span class="template-label">Selection:</span> 
                                <span class="template-id">${truncateText(stage.stage_selection_template_id || 'None', 12)}</span>
                            </div>
                            <div class="template-detail" onclick="openTemplateEditor('${stage.data_extraction_template_id}', event)">
                                <span class="template-label">Extraction:</span> 
                                <span class="template-id">${truncateText(stage.data_extraction_template_id || 'None', 12)}</span>
                            </div>
                            <div class="template-detail" onclick="openTemplateEditor('${stage.response_generation_template_id}', event)">
                                <span class="template-label">Response:</span> 
                                <span class="template-id">${truncateText(stage.response_generation_template_id || 'None', 12)}</span>
                            </div>
                        </div>
                        <div class="stage-item-meta">
                            <div>ID: ${stage.stage_id}</div>
                        </div>
                    </li>
                `;
            });
            
            html += '</ul>';
            
            stagesListElement.innerHTML = html;
        }
        
        // Select a stage
        function selectStage(stageId) {
            selectedStageId = stageId;
            
            // Find the stage in our list
            const stage = stages.find(s => s.stage_id === stageId);
            if (!stage) {
                showError('Stage not found');
                return;
            }
            
            // Populate the edit form
            document.getElementById('editStageId').value = stage.stage_id;
            document.getElementById('editStageName').value = stage.stage_name;
            document.getElementById('editStageDescription').value = stage.stage_description;
            document.getElementById('editStageType').value = stage.stage_type;
            
            // Set template dropdown values
            if (document.getElementById('editStageSelectionTemplateId')) {
                document.getElementById('editStageSelectionTemplateId').value = stage.stage_selection_template_id;
            }
            
            if (document.getElementById('editDataExtractionTemplateId')) {
                document.getElementById('editDataExtractionTemplateId').value = stage.data_extraction_template_id;
            }
            
            if (document.getElementById('editResponseGenerationTemplateId')) {
                document.getElementById('editResponseGenerationTemplateId').value = stage.response_generation_template_id;
            }
            
            // Switch to edit tab
            showTab('editStage');
        }
        
        // Create a new stage
        async function createStage() {
            if (!isLoggedIn) {
                showError('You must login first before creating a stage');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            const stageName = document.getElementById('stageName').value.trim();
            const stageDescription = document.getElementById('stageDescription').value.trim();
            const stageType = document.getElementById('stageType').value;
            const stageSelectionTemplateId = document.getElementById('stageSelectionTemplateId').value;
            const dataExtractionTemplateId = document.getElementById('dataExtractionTemplateId').value;
            const responseGenerationTemplateId = document.getElementById('responseGenerationTemplateId').value;
            
            if (!businessId || !apiKey || !stageName || !stageDescription || !stageType ||
                !stageSelectionTemplateId || !dataExtractionTemplateId || !responseGenerationTemplateId) {
                showError('All fields are required');
                return;
            }
            
            updateStatus('Creating stage...');
            
            try {
                const stageData = {
                    business_id: normalizeUUID(businessId),
                    stage_name: stageName,
                    stage_description: stageDescription,
                    stage_type: stageType,
                    stage_selection_template_id: normalizeUUID(stageSelectionTemplateId),
                    data_extraction_template_id: normalizeUUID(dataExtractionTemplateId),
                    response_generation_template_id: normalizeUUID(responseGenerationTemplateId)
                };
                
                // Add agent_id if provided
                if (agentId) {
                    stageData.agent_id = normalizeUUID(agentId);
                }
                
                const response = await fetch(`${API_BASE_URL}/stages`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include',
                    body: JSON.stringify(stageData)
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to create stage! status: ${response.status}, message: ${errorText}`);
                }
                
                const newStage = await response.json();
                
                // Clear form
                document.getElementById('stageName').value = '';
                document.getElementById('stageDescription').value = '';
                
                // Refresh stages
                fetchStages();
                
                showSuccess('Stage created successfully!');
                
                // Switch to stages list tab
                showTab('stagesList');
            } catch (error) {
                console.error('Error creating stage:', error);
                showError(`Failed to create stage: ${error.message}`);
            }
        }
        
        // Update a stage
        async function updateStage() {
            if (!isLoggedIn || !selectedStageId) {
                showError('You must login and select a stage before updating');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            const stageId = document.getElementById('editStageId').value;
            const stageName = document.getElementById('editStageName').value.trim();
            const stageDescription = document.getElementById('editStageDescription').value.trim();
            const stageType = document.getElementById('editStageType').value;
            const stageSelectionTemplateId = document.getElementById('editStageSelectionTemplateId').value;
            const dataExtractionTemplateId = document.getElementById('editDataExtractionTemplateId').value;
            const responseGenerationTemplateId = document.getElementById('editResponseGenerationTemplateId').value;
            
            if (!businessId || !apiKey || !stageName || !stageDescription || !stageType ||
                !stageSelectionTemplateId || !dataExtractionTemplateId || !responseGenerationTemplateId) {
                showError('All fields are required');
                return;
            }
            
            updateStatus('Updating stage...');
            
            try {
                const stageData = {
                    business_id: normalizeUUID(businessId),
                    stage_name: stageName,
                    stage_description: stageDescription,
                    stage_type: stageType,
                    stage_selection_template_id: normalizeUUID(stageSelectionTemplateId),
                    data_extraction_template_id: normalizeUUID(dataExtractionTemplateId),
                    response_generation_template_id: normalizeUUID(responseGenerationTemplateId)
                };
                
                // Add agent_id if provided
                if (agentId) {
                    stageData.agent_id = normalizeUUID(agentId);
                }
                
                const response = await fetch(`${API_BASE_URL}/stages/${normalizeUUID(stageId)}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include',
                    body: JSON.stringify(stageData)
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to update stage! status: ${response.status}, message: ${errorText}`);
                }
                
                // Refresh stages
                fetchStages();
                
                showSuccess('Stage updated successfully!');
                
                // Switch to stages list tab
                showTab('stagesList');
            } catch (error) {
                console.error('Error updating stage:', error);
                showError(`Failed to update stage: ${error.message}`);
            }
        }
        
        // Cancel editing
        function cancelEdit() {
            selectedStageId = null;
            
            // Clear edit form
            document.getElementById('editStageId').value = '';
            document.getElementById('editStageName').value = '';
            document.getElementById('editStageDescription').value = '';
            
            // Switch to stages list tab
            showTab('stagesList');
        }
        
        // Helper functions
        function formatDateTime(dateStr) {
            if (!dateStr) return 'Unknown';
            
            try {
                const date = new Date(dateStr);
                return date.toLocaleString();
            } catch (e) {
                return dateStr;
            }
        }
        
        // Helper function to truncate text
        function truncateText(text, maxLength) {
            if (!text) return '';
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }
        
        // Helper function to escape HTML
        function escapeHtml(text) {
            if (!text) return '';
            return text
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
        
        function showError(message) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = message;
            statusElement.className = 'error';
        }
        
        function showSuccess(message) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = message;
            statusElement.className = 'success';
        }
        
        function updateStatus(message, isError = false) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = message;
            statusElement.className = isError ? 'error' : 'success';
        }

        // Open template editor in templates.html
        function openTemplateEditor(templateId, event) {
            if (!templateId || templateId === 'None') {
                showError('No template ID provided');
                return;
            }
            
            // Stop propagation to prevent stage selection
            if (event) {
                event.stopPropagation();
            }
            
            // Open templates.html with template ID parameter
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const url = `templates.html?template_id=${templateId}&business_id=${encodeURIComponent(businessId)}&api_key=${encodeURIComponent(apiKey)}`;
            
            window.open(url, '_blank');
        }

        // Delete stage function
        async function deleteStage(stageId) {
            if (!isLoggedIn) {
                showError('You must login first before deleting a stage');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required');
                return;
            }
            
            updateStatus('Deleting stage...');
            
            try {
                const response = await fetch(`${API_BASE_URL}/stages/${normalizeUUID(stageId)}?business_id=${normalizeUUID(businessId)}`, {
                    method: 'DELETE',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    let errorData = {};
                    try {
                        errorData = await response.json();
                    } catch (jsonError) {
                        const errorText = await response.text();
                        throw new Error(`Failed to delete stage! status: ${response.status}, message: ${errorText}`);
                    }
                    
                    // Check for the new specific foreign key violation error code
                    if (errorData.error_code === 'FOREIGN_KEY_VIOLATION') {
                        // Ask the user if they want to reassign conversations
                        if (confirm(`${errorData.message} Would you like to reassign these conversations to another stage?`)) {
                            showReassignmentDialog(stageId);
                            return;
                        } else {
                            showError(errorData.message);
                            return;
                        }
                    }
                    // Also keep the old check for foreign key errors from general exception handler
                    else if (errorData.error && errorData.error.includes('foreign key constraint') && errorData.error.includes('conversations')) {
                        // Ask the user if they want to reassign conversations
                        if (confirm('This stage has conversations referencing it. Would you like to reassign these conversations to another stage?')) {
                            showReassignmentDialog(stageId);
                            return;
                        } else {
                            showError('Cannot delete stage: There are conversations still using this stage. Please delete those conversations first or assign them to a different stage.');
                            return;
                        }
                    }
                    
                    throw new Error(`Failed to delete stage! status: ${response.status}, message: ${errorData.error || errorData.message || 'Unknown error'}`);
                }
                
                // Refresh stages list
                fetchStages();
                
                showSuccess('Stage deleted successfully!');
            } catch (error) {
                console.error('Error deleting stage:', error);
                showError(`Failed to delete stage: ${error.message}`);
            }
        }
        
        // Show dialog to reassign conversations
        async function showReassignmentDialog(sourceStageId) {
            // Find the stage name for display
            const sourceStage = stages.find(s => s.stage_id === sourceStageId);
            if (!sourceStage) {
                showError('Could not find stage information');
                return;
            }
            
            // Create a dialog element
            const dialogHtml = `
                <div id="reassignmentDialog" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
                    <div style="background: white; padding: 20px; border-radius: 8px; max-width: 500px; width: 100%;">
                        <h3>Reassign Conversations</h3>
                        <p>Select a stage to reassign all conversations from "${sourceStage.stage_name}" to:</p>
                        <select id="targetStageSelect" style="width: 100%; padding: 10px; margin: 10px 0;">
                            ${stages.filter(s => s.stage_id !== sourceStageId).map(s => 
                                `<option value="${s.stage_id}">${s.stage_name}</option>`
                            ).join('')}
                        </select>
                        <div style="display: flex; justify-content: flex-end; margin-top: 15px;">
                            <button id="cancelReassignBtn" style="background-color: #6c757d; margin-right: 10px;">Cancel</button>
                            <button id="confirmReassignBtn" style="background-color: var(--primary-color);">Reassign & Delete</button>
                        </div>
                    </div>
                </div>
            `;
            
            // Add the dialog to the page
            document.body.insertAdjacentHTML('beforeend', dialogHtml);
            
            // Add event listeners
            document.getElementById('cancelReassignBtn').addEventListener('click', () => {
                document.getElementById('reassignmentDialog').remove();
            });
            
            document.getElementById('confirmReassignBtn').addEventListener('click', async () => {
                const targetStageId = document.getElementById('targetStageSelect').value;
                
                // Remove the dialog
                document.getElementById('reassignmentDialog').remove();
                
                // Call the reassign function
                await reassignConversationsAndDeleteStage(sourceStageId, targetStageId);
            });
        }
        
        // Reassign conversations and delete stage
        async function reassignConversationsAndDeleteStage(sourceStageId, targetStageId) {
            if (!isLoggedIn) {
                showError('You must login first');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required');
                return;
            }
            
            updateStatus('Reassigning conversations...');
            
            try {
                // First call the API to reassign conversations
                const reassignResponse = await fetch(`${API_BASE_URL}/conversations/reassign?business_id=${normalizeUUID(businessId)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        source_stage_id: normalizeUUID(sourceStageId),
                        target_stage_id: normalizeUUID(targetStageId),
                        business_id: normalizeUUID(businessId)
                    })
                });
                
                if (!reassignResponse.ok) {
                    let errorText = '';
                    try {
                        const errorData = await reassignResponse.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await reassignResponse.text();
                    }
                    
                    throw new Error(`Failed to reassign conversations! status: ${reassignResponse.status}, message: ${errorText}`);
                }
                
                // If reassignment successful, now try to delete the stage
                updateStatus('Conversations reassigned. Deleting stage...');
                
                const deleteResponse = await fetch(`${API_BASE_URL}/stages/${normalizeUUID(sourceStageId)}?business_id=${normalizeUUID(businessId)}`, {
                    method: 'DELETE',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include'
                });
                
                if (!deleteResponse.ok) {
                    let errorText = '';
                    try {
                        const errorData = await deleteResponse.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await deleteResponse.text();
                    }
                    
                    throw new Error(`Failed to delete stage after reassignment! status: ${deleteResponse.status}, message: ${errorText}`);
                }
                
                // Refresh stages list
                fetchStages();
                
                showSuccess('Conversations reassigned and stage deleted successfully!');
            } catch (error) {
                console.error('Error reassigning conversations:', error);
                showError(`Failed: ${error.message}`);
            }
        }

        // Confirm stage deletion with a popup
        function confirmDeleteStage(stageId, stageName, event) {
            if (event) {
                event.stopPropagation(); // Prevent stage selection
            }
            
            if (confirm(`Are you sure you want to delete the stage "${stageName}"?\n\nIf there are any conversations using this stage, you'll be prompted to reassign them to another stage before deletion. This action cannot be undone.`)) {
                deleteStage(stageId);
            }
        }

        // Confirm deletion of currently selected stage
        function confirmDeleteCurrentStage() {
            if (!selectedStageId) {
                showError('No stage selected');
                return;
            }
            
            const stageName = document.getElementById('editStageName').value.trim();
            
            if (confirm(`Are you sure you want to delete the stage "${stageName}"?\n\nIf there are any conversations using this stage, you'll be prompted to reassign them to another stage before deletion. This action cannot be undone.`)) {
                deleteStage(selectedStageId);
                // After deletion, return to stages list
                showTab('stagesList');
            }
        }
    </script>
</body>
</html> 

================================================================================
File: templates.html
Path: .\templates.html
Size: 55568
Modified: 2025-04-12T10:51:23.900087
Created: 2025-04-11T23:11:05.541551
Hash: 1c5e7bc665805b427407b24ebc6defc35aade322689f423c5bcce9307c2f3e4b
Lines: 1337
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICMP Template Management</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            padding: 0;
            margin: 0;
            display: flex;
            background-color: var(--bg-light);
            color: var(--text-color);
        }

        .main-content {
            flex: 1;
            max-width: 1200px;
            padding: 20px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }

        label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 500;
            color: var(--text-color);
        }

        input[type="text"], 
        input[type="password"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
            transition: border-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

        textarea { 
            height: 120px; 
            resize: vertical;
            font-family: inherit;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s;
            margin-right: 10px;
        }

        button:hover { 
            background-color: var(--primary-hover);
        }
        
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        .error { 
            color: var(--error-color);
            border-color: var(--error-color);
            background-color: #fff5f5;
        }

        .success {
            color: var(--success-color);
            border-color: var(--success-color);
            background-color: #f0fff4;
        }
        
        .info {
            color: #0275d8;
            border-color: #0275d8;
            background-color: #e6f3ff;
        }

        h1 {
            color: var(--text-color);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        h2 {
            color: var(--text-color);
            margin-top: 30px;
            font-size: 1.5em;
        }
        
        h3 {
            color: var(--text-color);
            margin-top: 20px;
            font-size: 1.2em;
        }

        .section-divider {
            margin: 30px 0;
            border: none;
            border-top: 1px solid var(--border-color);
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
        
        .templates-list {
            list-style: none;
            padding: 0;
        }
        
        .template-item {
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            transition: box-shadow 0.2s;
            cursor: pointer;
        }
        
        .template-item:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .template-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .template-item-name {
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .template-item-type {
            padding: 3px 8px;
            border-radius: 4px;
            background-color: #e9ecef;
            font-size: 0.8em;
        }
        
        .template-item-content {
            margin-bottom: 10px;
            color: #666;
            font-family: monospace;
            white-space: pre-wrap;
            background-color: #f8f9fa;
            padding: 8px;
            border-radius: 4px;
            max-height: 100px;
            overflow-y: auto;
        }
        
        .template-item-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.8em;
            color: #888;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }
        
        .tab.active {
            border-bottom: 2px solid var(--primary-color);
            font-weight: bold;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .variable-tag {
            display: inline-block;
            background-color: #e9ecef;
            padding: 2px 6px;
            margin: 2px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.85em;
        }
        
        .variables-container {
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>ICMP Template Management</h1>
        
        <!-- Configuration Section -->
        <div id="configSection">
            <h2>Configuration</h2>
            <div class="config-section">
                <div class="form-group">
                    <label for="businessId">Business ID</label>
                    <input id="businessId" type="text" placeholder="Enter Business ID">
                </div>
                
                <div class="form-group">
                    <label for="apiKey">Business API Key</label>
                    <input id="apiKey" type="password" placeholder="Enter Business API Key">
                </div>
                
                <div class="form-group">
                    <label for="agentId">Agent ID (optional)</label>
                    <input id="agentId" type="text" placeholder="Enter Agent ID (optional)">
                </div>
                
                <div class="button-group">
                    <button id="loginButton" onclick="login()">Login</button>
                    <span id="loginStatus" class="logged-out">Not logged in</span>
                </div>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Tabs Navigation -->
        <div class="tabs">
            <div class="tab active" onclick="showTab('templatesList')">Templates List</div>
            <div class="tab" onclick="showTab('createTemplate')">Create Template</div>
            <div class="tab" onclick="showTab('editTemplate')">Edit Template</div>
        </div>
        
        <!-- Templates List Content -->
        <div id="templatesListContent" class="tab-content active">
            <h2>Templates</h2>
            <div class="form-group">
                <label for="templateTypeFilter">Filter by Type</label>
                <select id="templateTypeFilter" onchange="filterTemplates()">
                    <option value="all">All Types</option>
                    <option value="stage_selection">Stage Selection</option>
                    <option value="data_extraction">Data Extraction</option>
                    <option value="response_generation">Response Generation</option>
                    <option value="default_stage_selection">Default Stage Selection</option>
                    <option value="default_data_extraction">Default Data Extraction</option>
                    <option value="default_response_generation">Default Response Generation</option>
                </select>
            </div>
            <div class="button-group">
                <button onclick="fetchTemplates()">Refresh Templates</button>
            </div>
            <div id="templatesList"></div>
        </div>
        
        <!-- Create Template Content -->
        <div id="createTemplateContent" class="tab-content">
            <h2>Create Template</h2>
            <div class="form-group">
                <label for="templateName">Template Name</label>
                <input id="templateName" type="text" placeholder="Enter template name">
            </div>
            
            <div class="form-group">
                <label for="templateType">Template Type</label>
                <select id="templateType">
                    <option value="stage_selection">Stage Selection</option>
                    <option value="data_extraction">Data Extraction</option>
                    <option value="response_generation">Response Generation</option>
                    <option value="default_stage_selection">Default Stage Selection</option>
                    <option value="default_data_extraction">Default Data Extraction</option>
                    <option value="default_response_generation">Default Response Generation</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="templateContent">Template Content (use {variable_name} or {{variable_name}} for variables)</label>
                <textarea id="templateContent" placeholder="Enter template content with variables in curly braces, e.g. {variable_name} or {{variable_name}}" rows="10"></textarea>
            </div>
            
            <div class="form-group">
                <label for="systemPrompt">System Prompt (optional)</label>
                <textarea id="systemPrompt" placeholder="Enter system prompt (optional)"></textarea>
            </div>
            
            <div class="form-group">
                <label>Detected Variables</label>
                <div id="detectedVariables" class="variables-container">
                    <span class="text-muted">Variables will appear here as you type</span>
                </div>
            </div>
            
            <div class="button-group">
                <button onclick="createTemplate()">Create Template</button>
            </div>
        </div>
        
        <!-- Edit Template Content -->
        <div id="editTemplateContent" class="tab-content">
            <h2>Edit Template</h2>
            <div class="form-group">
                <label for="editTemplateId">Template ID</label>
                <input id="editTemplateId" type="text" readonly>
            </div>
            
            <div class="form-group">
                <label for="editTemplateName">Template Name</label>
                <input id="editTemplateName" type="text" placeholder="Enter template name">
            </div>
            
            <div class="form-group">
                <label for="editTemplateType">Template Type</label>
                <select id="editTemplateType">
                    <option value="stage_selection">Stage Selection</option>
                    <option value="data_extraction">Data Extraction</option>
                    <option value="response_generation">Response Generation</option>
                    <option value="default_stage_selection">Default Stage Selection</option>
                    <option value="default_data_extraction">Default Data Extraction</option>
                    <option value="default_response_generation">Default Response Generation</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="editTemplateContent">Template Content (use {variable_name} or {{variable_name}} for variables)</label>
                <textarea id="editTemplateContent" placeholder="Enter template content with variables in curly braces, e.g. {variable_name} or {{variable_name}}" rows="10"></textarea>
            </div>
            
            <div class="form-group">
                <label for="editSystemPrompt">System Prompt (optional)</label>
                <textarea id="editSystemPrompt" placeholder="Enter system prompt (optional)"></textarea>
            </div>
            
            <div class="form-group">
                <label>Detected Variables</label>
                <div id="editDetectedVariables" class="variables-container">
                    <span class="text-muted">Variables will appear here as you type</span>
                </div>
            </div>
            
            <div class="button-group">
                <button onclick="updateTemplate()">Update Template</button>
                <button onclick="duplicateTemplate()">Duplicate Template</button>
                <button onclick="cancelEdit()">Cancel</button>
                <button onclick="debugTemplate()" style="background-color: #6c757d;">Debug Template</button>
            </div>
            
            <div id="debugInfo" class="card" style="margin-top: 15px; display: none;">
                <div class="card-header">Debug Information</div>
                <pre id="debugContent" style="max-height: 300px; overflow-y: auto;"></pre>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Status Section -->
        <div id="statusSection">
            <h2>Status</h2>
            <div id="statusArea">
                <div id="networkStatus" class="text-muted">No network activity yet</div>
            </div>
        </div>
    </div>
    
    <script>
        // Handle both file:// protocol and http:// protocol
        const isFileProtocol = window.location.protocol === 'file:';
        const API_BASE_URL = isFileProtocol 
            ? 'http://localhost:5000' 
            : window.location.protocol + '//' + window.location.hostname + ':5000';
            
        const DEFAULT_BUSINESS_ID = '7ae167a0-d864-43b9-bdaf-fcba35b33f27';
        const DEFAULT_API_KEY = 'da828cae6a3e46228aa09d65ba9066e3';
        
        // State management
        let isLoggedIn = false;
        let templates = [];
        let filteredTemplates = [];
        let selectedTemplateId = null;
        
        // Initialize the app
        function init() {
            console.log("Initializing with API_BASE_URL:", API_BASE_URL);
            
            // Check for URL parameters (when opened from stages.html)
            const urlParams = new URLSearchParams(window.location.search);
            const templateIdParam = urlParams.get('template_id');
            const businessIdParam = urlParams.get('business_id');
            const apiKeyParam = urlParams.get('api_key');
            
            console.log("URL parameters:", { 
                templateId: templateIdParam,
                businessId: businessIdParam,
                hasApiKey: apiKeyParam ? true : false
            });
            
            // If parameters are provided, use them
            if (businessIdParam) {
                document.getElementById('businessId').value = businessIdParam;
            }
            
            if (apiKeyParam) {
                document.getElementById('apiKey').value = apiKeyParam;
            }
            
            // Store the template ID for later use after login
            if (templateIdParam) {
                console.log("Template ID param found:", templateIdParam);
                localStorage.setItem('pendingTemplateId', templateIdParam);
            }
            
            // Check if we're already logged in
            const savedApiKey = localStorage.getItem('businessApiKey');
            if (savedApiKey && !apiKeyParam) {
                // Pre-fill the form with the saved values
                document.getElementById('apiKey').value = savedApiKey;
                
                const savedBusinessId = localStorage.getItem('businessId');
                const savedAgentId = localStorage.getItem('agentId');
                
                if (savedBusinessId && !businessIdParam) {
                    document.getElementById('businessId').value = savedBusinessId;
                }
                
                if (savedAgentId) {
                    document.getElementById('agentId').value = savedAgentId;
                }
                
                // Assume we're logged in if we have all the values
                if (savedApiKey && savedBusinessId) {
                    isLoggedIn = true;
                    document.getElementById('loginStatus').textContent = 'Logged in';
                    document.getElementById('loginStatus').className = 'logged-in';
                    document.getElementById('loginButton').textContent = 'Logged In';
                    document.getElementById('loginButton').disabled = true;
                    
                    // When using file:// protocol, don't auto-fetch to avoid CORS issues
                    if (!isFileProtocol) {
                        // If template ID is provided in URL, fetch it directly
                        if (templateIdParam) {
                            fetchTemplateById(templateIdParam);
                        } else {
                            // Otherwise fetch all templates
                            fetchTemplates();
                        }
                    } else {
                        showInfo("Using file:// protocol - click 'Login' to manually load data");
                    }
                }
            } else if (businessIdParam && apiKeyParam) {
                // Auto-login with provided parameters
                isLoggedIn = true;
                document.getElementById('loginStatus').textContent = 'Logged in';
                document.getElementById('loginStatus').className = 'logged-in';
                document.getElementById('loginButton').textContent = 'Logged In';
                document.getElementById('loginButton').disabled = true;
                
                // Store credentials
                localStorage.setItem('businessApiKey', apiKeyParam);
                localStorage.setItem('businessId', businessIdParam);
                
                // When using file:// protocol, don't auto-fetch to avoid CORS issues
                if (!isFileProtocol) {
                    // If template ID is provided in URL, fetch it directly
                    if (templateIdParam) {
                        fetchTemplateById(templateIdParam);
                    } else {
                        // Otherwise fetch all templates
                        fetchTemplates();
                    }
                } else {
                    showInfo("Using file:// protocol - click 'Login' to manually load data");
                }
            }
            
            // Set default values if not already set
            if (!document.getElementById('businessId').value) {
                document.getElementById('businessId').value = DEFAULT_BUSINESS_ID;
            }
            
            // Set up event listeners for variable detection
            document.getElementById('templateContent').addEventListener('input', detectVariables);
            document.getElementById('editTemplateContent').addEventListener('input', detectEditVariables);
        }
        
        // Call init when the page loads
        window.addEventListener('DOMContentLoaded', init);
        
        // Utility function to generate a UUID
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Normalize UUID
        function normalizeUUID(uuid) {
            if (!uuid) return null;
            
            try {
                // Convert to lowercase and trim whitespace
                const normalizedUUID = uuid.toLowerCase().trim();
                // Check if it's a valid UUID format
                const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
                
                if (uuidRegex.test(normalizedUUID)) {
                    return normalizedUUID;
                }
                console.warn('Invalid UUID format:', uuid);
                return uuid; // Return original if not matching pattern
            } catch (error) {
                console.error('Error normalizing UUID:', error);
                return uuid; // Return original on error
            }
        }
        
        // Escape HTML to prevent XSS
        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
        
        // Truncate text with ellipsis
        function truncateText(text, maxLength) {
            if (!text) return '';
            if (text.length <= maxLength) return text;
            return text.slice(0, maxLength) + '...';
        }
        
        // Extract variables from content
        function extractVariables(content) {
            if (!content) return [];
            
            // Support both single and double curly braces
            const singleCurlyRegex = /{([^{}]+)}/g;
            const doubleCurlyRegex = /{{([^{}]+)}}/g;
            
            const singleMatches = content.match(singleCurlyRegex) || [];
            const doubleMatches = content.match(doubleCurlyRegex) || [];
            
            // Process single curly brace matches
            const singleVars = singleMatches.map(match => match.slice(1, -1));
            
            // Process double curly brace matches
            const doubleVars = doubleMatches.map(match => match.slice(2, -2));
            
            // Combine and filter out duplicates
            const allVars = [...singleVars, ...doubleVars];
            const uniqueVars = [...new Set(allVars)];
            
            return uniqueVars;
        }
        
        // Login function
        function login() {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to login');
                return;
            }
            
            updateStatus('Logging in...');
            
            // Store credentials
            localStorage.setItem('businessApiKey', apiKey);
            localStorage.setItem('businessId', businessId);
            
            const agentId = document.getElementById('agentId').value.trim();
            if (agentId) {
                localStorage.setItem('agentId', agentId);
            }
            
            isLoggedIn = true;
            document.getElementById('loginStatus').textContent = 'Logged in';
            document.getElementById('loginStatus').className = 'logged-in';
            document.getElementById('loginButton').textContent = 'Logged In';
            document.getElementById('loginButton').disabled = true;
            
            // Check if we have a pending template ID from URL parameters
            const pendingTemplateId = localStorage.getItem('pendingTemplateId');
            if (pendingTemplateId) {
                console.log("Found pending template ID:", pendingTemplateId);
                fetchTemplateById(pendingTemplateId);
                localStorage.removeItem('pendingTemplateId'); // Clear it after use
            } else {
                // Otherwise, fetch all templates
                fetchTemplates();
            }
            
            showSuccess('Logged in successfully');
        }
        
        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.classList.remove('active');
            });
            
            // Deactivate all tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Activate the selected tab
            document.getElementById(tabName + 'Content').classList.add('active');
            
            // Find and activate the tab button
            const tabButtons = document.querySelectorAll('.tab');
            tabButtons.forEach(button => {
                if (button.textContent.toLowerCase().includes(tabName.toLowerCase())) {
                    button.classList.add('active');
                }
            });
        }
        
        // Fetch templates
        async function fetchTemplates() {
            if (!isLoggedIn) {
                showError('You must login first before fetching templates');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required');
                return;
            }
            
            console.log("Fetch Templates - Parameters:", {
                businessId,
                apiKeyProvided: !!apiKey,
                agentId: agentId || "none"
            });
            
            // Format URL parameters
            const urlParams = new URLSearchParams();
            urlParams.append('business_id', businessId);
            if (agentId) {
                urlParams.append('agent_id', agentId);
            }
            
            updateStatus('Fetching templates...');
            
            try {
                const url = `${API_BASE_URL}/templates?${urlParams.toString()}`;
                console.log("Fetch Templates - Request URL:", url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include'
                });
                
                console.log("Fetch Templates - Response Status:", response.status);
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                        console.error("Fetch Templates - Error Data:", errorData);
                    } catch (jsonError) {
                        errorText = await response.text();
                        console.error("Fetch Templates - Error Text:", errorText);
                    }
                    
                    throw new Error(`Failed to fetch templates! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                console.log("Fetch Templates - Retrieved templates:", data);
                
                // Store templates and update display
                templates = data || [];
                filterTemplates(); // Apply any active filters
                
                updateStatus(`Loaded ${templates.length} templates`);
            } catch (error) {
                console.error('Error fetching templates:', error);
                showError(`Failed to fetch templates: ${error.message}`);
            }
        }
        
        // Filter templates by type
        function filterTemplates() {
            const filterType = document.getElementById('templateTypeFilter').value;
            
            if (filterType === 'all') {
                filteredTemplates = templates;
            } else {
                filteredTemplates = templates.filter(template => template.template_type === filterType);
            }
            
            // Display the filtered templates
            displayTemplates(filteredTemplates);
        }
        
        // Display templates
        function displayTemplates(templatesList) {
            const templatesListElement = document.getElementById('templatesList');
            
            if (!templatesList || templatesList.length === 0) {
                templatesListElement.innerHTML = '<div class="no-templates">No templates found</div>';
                return;
            }
            
            let html = '<ul class="templates-list">';
            
            templatesList.forEach(template => {
                const variables = extractVariables(template.content || '');
                const variablesHtml = variables.length > 0
                    ? variables.map(v => `<span class="variable-tag">${v}</span>`).join(' ')
                    : '<span class="text-muted">No variables</span>';
                
                html += `
                    <li class="template-item" onclick="selectTemplate('${template.template_id}')">
                        <div class="template-item-header">
                            <div class="template-item-name">${template.template_name}</div>
                            <div class="template-item-type">${template.template_type}</div>
                        </div>
                        <div class="template-item-content">${escapeHtml(truncateText(template.content, 200))}</div>
                        <div class="variables-container">
                            ${variablesHtml}
                        </div>
                        <div class="template-item-meta">
                            <div>ID: ${template.template_id}</div>
                        </div>
                    </li>
                `;
            });
            
            html += '</ul>';
            
            templatesListElement.innerHTML = html;
        }
        
        // Select a template
        function selectTemplate(templateId) {
            selectedTemplateId = templateId;
            
            // Find the template in our list
            const template = templates.find(t => t.template_id === templateId);
            if (!template) {
                showError(`Template not found: ${templateId}`);
                return;
            }
            
            console.log("Selected template content:", template.content);
            
            // Populate the edit form
            document.getElementById('editTemplateId').value = template.template_id;
            document.getElementById('editTemplateName').value = template.template_name || '';
            document.getElementById('editTemplateType').value = template.template_type || '';
            
            // Handle content display - use the raw content directly
            let displayContent = template.content || '';
            document.getElementById('editTemplateContent').value = displayContent;
            
            // Handle system prompt
            document.getElementById('editSystemPrompt').value = template.system_prompt || '';
            
            // Detect variables in the content
            detectEditVariables();
            
            // Switch to edit tab
            showTab('editTemplate');
            
            // Show success message
            showSuccess(`Selected template: ${template.template_name}`);
            
            return template;
        }
        
        // Create a new template
        async function createTemplate() {
            if (!isLoggedIn) {
                showError('You must login first before creating a template');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            const templateName = document.getElementById('templateName').value.trim();
            const templateType = document.getElementById('templateType').value;
            const templateContent = document.getElementById('templateContent').value.trim();
            const systemPrompt = document.getElementById('systemPrompt').value.trim();
            
            if (!businessId || !apiKey || !templateName || !templateContent || !templateType) {
                showError('Business ID, API Key, template name, content, and type are required');
                return;
            }
            
            updateStatus('Creating template...');
            
            try {
                const templateData = {
                    business_id: businessId,
                    template_name: templateName,
                    template_type: templateType,
                    content: templateContent,
                    system_prompt: systemPrompt
                };
                
                // Add agent_id if provided
                if (agentId) {
                    templateData.agent_id = agentId;
                }
                
                const response = await fetch(`${API_BASE_URL}/templates`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include',
                    body: JSON.stringify(templateData)
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to create template! status: ${response.status}, message: ${errorText}`);
                }
                
                const newTemplate = await response.json();
                
                // Clear form
                document.getElementById('templateName').value = '';
                document.getElementById('templateContent').value = '';
                document.getElementById('systemPrompt').value = '';
                document.getElementById('detectedVariables').innerHTML = '<span class="text-muted">Variables will appear here as you type</span>';
                
                // Refresh templates
                fetchTemplates();
                
                showSuccess('Template created successfully!');
                
                // Switch to templates list tab
                showTab('templatesList');
            } catch (error) {
                console.error('Error creating template:', error);
                showError(`Failed to create template: ${error.message}`);
            }
        }
        
        // Update a template
        async function updateTemplate() {
            if (!isLoggedIn || !selectedTemplateId) {
                showError('You must login and select a template before updating');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            const templateId = document.getElementById('editTemplateId').value;
            const templateName = document.getElementById('editTemplateName').value.trim();
            const templateType = document.getElementById('editTemplateType').value;
            const templateContent = document.getElementById('editTemplateContent').value.trim();
            const systemPrompt = document.getElementById('editSystemPrompt').value.trim();
            
            console.log("Update Template - Input values:", {
                businessId,
                apiKey: apiKey ? "API KEY PROVIDED" : "MISSING",
                agentId,
                templateId,
                templateName,
                templateType,
                templateContent,
                systemPrompt
            });
            
            if (!businessId || !apiKey || !templateName || !templateContent || !templateType) {
                showError('Business ID, API Key, template name, content, and type are required');
                return;
            }
            
            updateStatus('Updating template...');
            
            try {
                const templateData = {
                    business_id: businessId,
                    template_name: templateName,
                    template_type: templateType,
                    content: templateContent,
                    system_prompt: systemPrompt || ""  // Ensure empty string instead of null/undefined
                };
                
                // Add agent_id if provided
                if (agentId) {
                    templateData.agent_id = agentId;
                }
                
                console.log("Update Template - Request Payload:", JSON.stringify(templateData));
                console.log("Update Template - Request URL:", `${API_BASE_URL}/templates/${templateId}`);
                
                // Force a direct update without any caching
                const response = await fetch(`${API_BASE_URL}/templates/${templateId}?_nocache=${Date.now()}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    },
                    credentials: 'include',
                    body: JSON.stringify(templateData)
                });
                
                console.log("Update Template - Response Status:", response.status);
                console.log("Update Template - Response Headers:", Object.fromEntries([...response.headers]));
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                        console.error("Update Template - Error Data:", errorData);
                    } catch (jsonError) {
                        errorText = await response.text();
                        console.error("Update Template - Error Text:", errorText);
                    }
                    
                    throw new Error(`Failed to update template! status: ${response.status}, message: ${errorText}`);
                }
                
                const responseData = await response.json();
                console.log("Update Template - Response Data:", responseData);
                
                // Force a refresh of templates to get the latest data
                console.log("Forcing template refresh...");
                
                // Clear the templates array to force a complete refetch
                templates = [];
                
                // Forcefully fetch all templates again with cache-busting
                const refreshResponse = await fetch(`${API_BASE_URL}/templates?business_id=${businessId}&_nocache=${Date.now()}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    },
                    credentials: 'include'
                });
                
                if (refreshResponse.ok) {
                    const freshTemplates = await refreshResponse.json();
                    templates = freshTemplates;
                    filterTemplates();
                    console.log("Templates refreshed successfully:", templates.length);
                }
                
                showSuccess('Template updated successfully!');
                
                // Switch to templates list tab
                showTab('templatesList');
            } catch (error) {
                console.error('Error updating template:', error);
                showError(`Failed to update template: ${error.message}`);
            }
        }
        
        // Duplicate a template
        async function duplicateTemplate() {
            if (!isLoggedIn || !selectedTemplateId) {
                showError('You must login and select a template before duplicating');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const agentId = document.getElementById('agentId').value.trim();
            
            const templateName = document.getElementById('editTemplateName').value.trim();
            const templateType = document.getElementById('editTemplateType').value;
            const templateContent = document.getElementById('editTemplateContent').value.trim();
            const systemPrompt = document.getElementById('editSystemPrompt').value.trim();
            
            if (!businessId || !apiKey || !templateName || !templateContent || !templateType) {
                showError('Business ID, API Key, template name, content, and type are required');
                return;
            }
            
            updateStatus('Duplicating template...');
            
            try {
                const templateData = {
                    business_id: businessId,
                    template_name: `${templateName} (Copy)`,
                    template_type: templateType,
                    content: templateContent,
                    system_prompt: systemPrompt
                };
                
                // Add agent_id if provided
                if (agentId) {
                    templateData.agent_id = agentId;
                }
                
                const response = await fetch(`${API_BASE_URL}/templates`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include',
                    body: JSON.stringify(templateData)
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to duplicate template! status: ${response.status}, message: ${errorText}`);
                }
                
                // Refresh templates
                fetchTemplates();
                
                showSuccess('Template duplicated successfully!');
                
                // Switch to templates list tab
                showTab('templatesList');
            } catch (error) {
                console.error('Error duplicating template:', error);
                showError(`Failed to duplicate template: ${error.message}`);
            }
        }
        
        // Cancel editing
        function cancelEdit() {
            selectedTemplateId = null;
            
            // Clear edit form
            document.getElementById('editTemplateId').value = '';
            document.getElementById('editTemplateName').value = '';
            document.getElementById('editTemplateContent').value = '';
            document.getElementById('editSystemPrompt').value = '';
            document.getElementById('editDetectedVariables').innerHTML = '<span class="text-muted">Variables will appear here as you type</span>';
            
            // Switch to templates list tab
            showTab('templatesList');
        }
        
        // Detect variables in template content
        function detectVariables() {
            const content = document.getElementById('templateContent').value;
            const variables = extractVariables(content);
            
            const variablesContainer = document.getElementById('detectedVariables');
            
            if (variables.length === 0) {
                variablesContainer.innerHTML = '<span class="text-muted">No variables detected</span>';
                return;
            }
            
            variablesContainer.innerHTML = variables.map(variable => 
                `<span class="variable-tag">${variable}</span>`
            ).join(' ');
        }
        
        // Detect variables in edit template content
        function detectEditVariables() {
            const content = document.getElementById('editTemplateContent').value;
            const variables = extractVariables(content);
            
            const variablesContainer = document.getElementById('editDetectedVariables');
            
            if (variables.length === 0) {
                variablesContainer.innerHTML = '<span class="text-muted">No variables detected</span>';
                return;
            }
            
            variablesContainer.innerHTML = variables.map(variable => 
                `<span class="variable-tag">${variable}</span>`
            ).join(' ');
        }
        
        // Helper functions for UI updates
        function formatDateTime(dateStr) {
            if (!dateStr) return 'Unknown';
            
            try {
                const date = new Date(dateStr);
                return date.toLocaleString();
            } catch (e) {
                return dateStr;
            }
        }
        
        // Update status
        function updateStatus(message, isError = false, isInfo = false) {
            const statusElement = document.getElementById('networkStatus');
            statusElement.textContent = message;
            if (isError) {
                statusElement.className = 'error';
            } else if (isInfo) {
                statusElement.className = 'info';
            } else {
                statusElement.className = 'success';
            }
        }
        
        // Show success message
        function showSuccess(message) {
            updateStatus(message, false, false);
            console.log('Success:', message);
        }
        
        // Show error message
        function showError(message) {
            updateStatus(message, true, false);
            console.error('Error:', message);
        }
        
        // Show info message
        function showInfo(message) {
            updateStatus(message, false, true);
            console.log('Info:', message);
        }
        
        // Fetch a single template by ID
        async function fetchTemplateById(templateId) {
            if (!isLoggedIn) {
                showError('You must login first before fetching templates');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey || !templateId) {
                showError('Business ID, API Key, and Template ID are required');
                return;
            }
            
            const normalizedTemplateId = normalizeUUID(templateId);
            const normalizedBusinessId = normalizeUUID(businessId);
            
            const url = `${API_BASE_URL}/templates/${normalizedTemplateId}?business_id=${normalizedBusinessId}`;
            console.log("Fetching template from URL:", url);
            
            updateStatus(`Fetching template ${normalizedTemplateId}...`);
            
            try {
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    credentials: 'include'
                });
                
                console.log("Response status:", response.status);
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                        console.error("Error data:", errorData);
                    } catch (jsonError) {
                        errorText = await response.text();
                        console.error("Error text:", errorText);
                    }
                    
                    throw new Error(`Failed to fetch template! status: ${response.status}, message: ${errorText}`);
                }
                
                const template = await response.json();
                console.log("Fetched template:", template);
                
                // Add this template to our list
                templates = [template];
                filteredTemplates = templates;
                
                // Display it
                displayTemplates(templates);
                
                // Also select it for editing
                selectTemplate(template.template_id);
                
                showSuccess('Template fetched successfully!');
            } catch (error) {
                console.error('Error fetching template:', error);
                showError(`Failed to fetch template: ${error.message}`);
            }
        }
        
        // Debug template function
        function debugTemplate() {
            if (!selectedTemplateId) {
                showError('No template selected for debugging');
                return;
            }
            
            const template = templates.find(t => t.template_id === selectedTemplateId);
            if (!template) {
                showError(`Template not found: ${selectedTemplateId}`);
                return;
            }
            
            // Get current form values
            const formData = {
                templateId: document.getElementById('editTemplateId').value,
                templateName: document.getElementById('editTemplateName').value.trim(),
                templateType: document.getElementById('editTemplateType').value,
                templateContent: document.getElementById('editTemplateContent').value.trim(),
                systemPrompt: document.getElementById('editSystemPrompt').value.trim()
            };
            
            // Compare original and current values
            const differences = {
                name: template.template_name !== formData.templateName,
                type: template.template_type !== formData.templateType,
                content: template.content !== formData.templateContent,
                systemPrompt: template.system_prompt !== formData.systemPrompt
            };
            
            // Prepare debug info
            const debugInfo = {
                selectedTemplate: {
                    id: template.template_id,
                    name: template.template_name,
                    type: template.template_type,
                    content: template.content,
                    systemPrompt: template.system_prompt
                },
                formValues: formData,
                differences: differences,
                anyChanges: Object.values(differences).some(diff => diff === true)
            };
            
            // Display debug info
            const debugElement = document.getElementById('debugContent');
            debugElement.textContent = JSON.stringify(debugInfo, null, 2);
            document.getElementById('debugInfo').style.display = 'block';
            
            // Log to console as well for inspection
            console.log('Debug Template Information:', debugInfo);
        }
    </script>
</body>
</html> 

================================================================================
File: variables.html
Path: .\variables.html
Size: 40603
Modified: 2025-04-14T15:50:23.221073
Created: 2025-04-12T01:02:22.038015
Hash: c50ddd77d9b99e2f5c3b96dc1f7092796e35775c4fb917b4af1a17029bbc9dc3
Lines: 946
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Template Variables Tester</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            padding: 0;
            margin: 0;
            display: flex;
            background-color: var(--bg-light);
            color: var(--text-color);
        }

        .main-content {
            flex: 1;
            max-width: 1200px;
            padding: 20px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            min-height: 100vh;
        }

        h1 {
            color: var(--text-color);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        h2 {
            color: var(--text-color);
            margin-top: 30px;
            font-size: 1.5em;
        }

        .section-divider {
            margin: 30px 0;
            border: none;
            border-top: 1px solid var(--border-color);
        }

        label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 500;
        }

        input[type="text"], 
        input[type="password"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
        }

        textarea {
            height: 120px;
            font-family: monospace;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            margin-right: 10px;
        }

        button:hover {
            background-color: var(--primary-hover);
        }

        .card {
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .card-header {
            font-weight: bold;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px solid var(--border-color);
        }

        .variable-tag {
            display: inline-block;
            background-color: #e9ecef;
            padding: 2px 6px;
            margin: 2px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.85em;
        }

        .variable-list {
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }

        .success {
            color: var(--success-color);
            border-color: var(--success-color);
            background-color: #f0fff4;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
        }

        .error {
            color: var(--error-color);
            border-color: var(--error-color);
            background-color: #fff5f5;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
        }

        pre {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
            font-family: monospace;
            font-size: 0.9em;
        }
        
        .delete-btn {
            background-color: var(--error-color);
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            border: none;
            font-size: 0.8em;
            margin-left: 8px;
            cursor: pointer;
        }
        
        .delete-btn:hover {
            background-color: #bd2130;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>Template Variables Tester</h1>
        
        <div style="margin-bottom: 20px;">
            <p><strong>Note:</strong> This page is for testing variables only. To edit actual templates, use the Templates Manager:</p>
            <a href="templates.html" style="display: inline-block; background-color: var(--primary-color); color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; margin-top: 5px;">Go to Template Manager</a>
        </div>
        
        <div class="card" style="margin-bottom: 20px;">
            <div class="card-header">Important Information</div>
            <div style="padding: 10px;">
                <p><strong>There are two different template editors available:</strong></p>
                <ol>
                    <li><strong>React Editor</strong> (at localhost:3000) - This is the recommended editor for template management</li>
                    <li><strong>HTML Editor</strong> (templates.html) - This is a simple alternative editor</li>
                </ol>
                <p>Both editors connect to the same database, but the React editor provides a better experience. For best results, use the React editor at <a href="http://localhost:3000" target="_blank">localhost:3000</a>.</p>
                <p><strong>Template Variables:</strong> The system supports both single <code>{variable}</code> and double <code>{{variable}}</code> curly brace formats, but the React editor uses double braces by default.</p>
            </div>
        </div>
        
        <!-- Configuration -->
        <div class="card">
            <div class="card-header">API Configuration</div>
            <div class="form-group">
                <label for="baseUrl">API Base URL</label>
                <input id="baseUrl" type="text" value="http://localhost:5000">
            </div>
            
            <div class="form-group">
                <label for="businessId">Business ID (required for authentication)</label>
                <input id="businessId" type="text" value="46cd481d-44ba-485f-868e-3292885c9976">
            </div>
            
            <div class="form-group">
                <label for="apiKey">API Key (required for authentication)</label>
                <input id="apiKey" type="text" value="da828cae6a3e46228aa09d65ba9066e3">
            </div>
            
            <button id="saveConfig" onclick="saveConfig()">Save Configuration</button>
        </div>
        
        <hr class="section-divider">
        
        <!-- Available Variables -->
        <h2>Available Variables</h2>
        <button onclick="fetchAvailableVariables()">List All Available Variables</button>
        <div id="availableVariables" class="variable-list">
            <p>Variables will be shown here...</p>
        </div>
        
        <hr class="section-divider">
        
        <!-- Template Tester -->
        <h2>Template Content Tester</h2>
        <div class="form-group">
            <label for="templateContent">Template Content (Use {variable_name} or {{variable_name}} for variables)</label>
            <textarea id="templateContent" placeholder="Enter template content with variables in curly braces, e.g. {variable_name} or {{variable_name}}">Based on the last {N} conversations and {stage_list}, what most represents the current stage? Reply with the current stage with confidence level.</textarea>
        </div>
        
        <div class="form-group">
            <label for="systemPrompt">System Prompt (Optional)</label>
            <textarea id="systemPrompt" placeholder="Enter system prompt (optional)">You are a conversation stage detector. Analyze the conversation history and determine the current stage from the available stages in {stage_list}.</textarea>
        </div>
        
        <button onclick="validateTemplate()">Validate Template</button>
        
        <div id="validationResults" style="margin-top: 15px;"></div>
        
        <hr class="section-divider">
        
        <!-- Variable Substitution Tester -->
        <h2>Test Variable Substitution</h2>
        <div class="form-group">
            <label for="substitutionTemplate">Template with Variables (supports both {variable} and {{variable}} formats)</label>
            <textarea id="substitutionTemplate" placeholder="Enter template content with variables in single {variable} or double {{variable}} curly braces">Based on the last {{N}} conversations and {{stage_list}}, what stage is this conversation in?</textarea>
        </div>
        
        <div id="variableInputsContainer">
            <p>Set variable values:</p>
            <!-- Dynamic inputs will be added here based on detected variables -->
        </div>
        
        <div class="button-group">
            <button onclick="detectSubstitutionVariables()">Detect Variables</button>
            <button onclick="testSubstitution()">Test Substitution</button>
        </div>
        
        <div id="substitutionResults" class="card" style="margin-top: 15px; display: none;">
            <div class="card-header">Substitution Result</div>
            <pre id="substitutionResultContent"></pre>
        </div>
        
        <hr class="section-divider">
        
        <!-- Database Variable Substitution Tester -->
        <h2>Test Substitution with Database Values</h2>
        <div class="form-group">
            <label for="dbSubstitutionTemplate">Template with Variables</label>
            <textarea id="dbSubstitutionTemplate" placeholder="Enter template content with variables in single {variable} or double {{variable}} curly braces">Based on the last {{N}} conversations and {{stage_list}}, what stage is this conversation in?</textarea>
        </div>
        
        <div class="form-group">
            <label>Available Variables from Database</label>
            <div id="dbVariablesContainer" class="variable-list">
                <p>Loading variables from database...</p>
            </div>
        </div>
        
        <div class="button-group">
            <button onclick="loadDatabaseVariables()">Refresh DB Variables</button>
            <button onclick="testDatabaseSubstitution()">Test with DB Values</button>
        </div>
        
        <div id="dbSubstitutionResults" class="card" style="margin-top: 15px; display: none;">
            <div class="card-header">Database Substitution Result</div>
            <div class="card" style="margin: 10px 0;">
                <div class="card-header">Variables Used</div>
                <pre id="dbVariablesUsed"></pre>
            </div>
            <div class="card">
                <div class="card-header">Result</div>
                <pre id="dbSubstitutionResultContent"></pre>
            </div>
        </div>
        
        <hr class="section-divider">
        
        <!-- Template Variables in DB -->
        <h2>Registered Template Variables</h2>
        <button onclick="fetchDatabaseVariables()">List Variables from Database</button>
        <div id="databaseVariables" class="variable-list">
            <p>Variables from database will be shown here...</p>
        </div>
        
        <hr class="section-divider">
        
        <!-- Add New Variable Section -->
        <h2>Add New Template Variable</h2>
        <div class="card">
            <div class="card-header">New Variable Details</div>
            
            <div class="form-group">
                <label for="variableName">Variable Name</label>
                <input id="variableName" type="text" placeholder="Enter variable name (e.g. stage_list)">
            </div>
            
            <div class="form-group">
                <label for="variableDescription">Description</label>
                <input id="variableDescription" type="text" placeholder="Describe what this variable represents">
            </div>
            
            <div class="form-group">
                <label for="variableCategory">Category</label>
                <select id="variableCategory">
                    <option value="Conversation">Conversation</option>
                    <option value="Business">Business</option>
                    <option value="User">User</option>
                    <option value="System">System</option>
                    <option value="Custom">Custom</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="variableExample">Example Value (Optional)</label>
                <input id="variableExample" type="text" placeholder="Example of what this variable might contain">
            </div>
            
            <div class="form-group">
                <label for="variableResolver">Resolver Function (Optional)</label>
                <textarea id="variableResolver" placeholder="Python function that resolves this variable (leave blank for manually defined variables)">{}</textarea>
            </div>
            
            <button onclick="addVariable()">Add Variable</button>
        </div>
        
        <!-- Status Section -->
        <hr class="section-divider">
        <div id="statusArea"></div>
    </div>
    
    <script>
        // Configuration
        let config = {
            baseUrl: 'http://localhost:5000',
            businessId: '7ae167a0-d864-43b9-bdaf-fcba35b33f27',
            apiKey: 'da828cae6a3e46228aa09d65ba9066e3'
        };
        
        // Initialize from localStorage
        function initConfig() {
            const savedConfig = localStorage.getItem('variablesTesterConfig');
            if (savedConfig) {
                try {
                    config = JSON.parse(savedConfig);
                    document.getElementById('baseUrl').value = config.baseUrl || 'http://localhost:5000';
                    document.getElementById('businessId').value = config.businessId || '7ae167a0-d864-43b9-bdaf-fcba35b33f27';
                    document.getElementById('apiKey').value = config.apiKey || 'da828cae6a3e46228aa09d65ba9066e3';
                } catch (e) {
                    console.error('Error loading saved config:', e);
                }
            }
        }
        
        // Save configuration
        function saveConfig() {
            config.baseUrl = document.getElementById('baseUrl').value.trim() || 'http://localhost:5000';
            config.businessId = document.getElementById('businessId').value.trim();
            config.apiKey = document.getElementById('apiKey').value.trim();
            
            localStorage.setItem('variablesTesterConfig', JSON.stringify(config));
            showStatus('Configuration saved!', 'success');
            
            // Fetch variables with the new configuration
            fetchAvailableVariables();
            fetchDatabaseVariables();
        }
        
        // Fetch available variables
        async function fetchAvailableVariables() {
            try {
                showStatus('Fetching available variables...', 'info');
                
                const response = await fetch(`${config.baseUrl}/api/variables/available/?business_id=${config.businessId}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    mode: 'cors',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`API returned ${response.status}: ${await response.text()}`);
                }
                
                const data = await response.json();
                
                // Display variables
                const variablesElement = document.getElementById('availableVariables');
                if (data.length === 0) {
                    variablesElement.innerHTML = '<p>No variables registered</p>';
                    return;
                }
                
                let html = '<div>';
                data.forEach(variable => {
                    html += `<span class="variable-tag">${variable.name}</span> `;
                });
                html += '</div>';
                
                variablesElement.innerHTML = html;
                showStatus('Variables fetched successfully', 'success');
                
            } catch (error) {
                console.error('Error fetching variables:', error);
                showStatus(`Error: ${error.message}`, 'error');
            }
        }
        
        // Fetch database variables
        async function fetchDatabaseVariables() {
            try {
                showStatus('Fetching database variables...', 'info');
                
                const response = await fetch(`${config.baseUrl}/api/variables/?business_id=${config.businessId}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    mode: 'cors',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`API returned ${response.status}: ${await response.text()}`);
                }
                
                const data = await response.json();
                
                // Display variables
                const variablesElement = document.getElementById('databaseVariables');
                if (data.length === 0) {
                    variablesElement.innerHTML = '<p>No variables in database</p>';
                    return;
                }
                
                // Group by category
                const categories = {};
                data.forEach(variable => {
                    if (!categories[variable.category]) {
                        categories[variable.category] = [];
                    }
                    categories[variable.category].push(variable);
                });
                
                let html = '';
                for (const [category, variables] of Object.entries(categories)) {
                    html += `<div class="card">`;
                    html += `<div class="card-header">${category}</div>`;
                    
                    variables.forEach(variable => {
                        html += `<div style="margin-bottom: 10px;">`;
                        html += `<span class="variable-tag">${variable.name}</span>`;
                        html += `<span>${variable.description}</span>`;
                        if (variable.example_value) {
                            html += `<div><small>Example: ${variable.example_value}</small></div>`;
                        }
                        html += `<button class="delete-btn" onclick="deleteVariable('${variable.id}', '${variable.name}')">Delete</button>`;
                        html += `</div>`;
                    });
                    
                    html += `</div>`;
                }
                
                variablesElement.innerHTML = html;
                showStatus('Database variables fetched successfully', 'success');
                
            } catch (error) {
                console.error('Error fetching database variables:', error);
                showStatus(`Error: ${error.message}`, 'error');
            }
        }
        
        // Validate template
        async function validateTemplate() {
            const content = document.getElementById('templateContent').value.trim();
            const systemPrompt = document.getElementById('systemPrompt').value.trim();
            
            if (!content) {
                showStatus('Template content is required', 'error');
                return;
            }
            
            try {
                showStatus('Validating template...', 'info');
                
                const response = await fetch(`${config.baseUrl}/api/variables/validate-template/?business_id=${config.businessId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    mode: 'cors',
                    credentials: 'include',
                    body: JSON.stringify({
                        content,
                        system_prompt: systemPrompt
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`API returned ${response.status}: ${await response.text()}`);
                }
                
                const data = await response.json();
                
                // Display validation results
                const resultsElement = document.getElementById('validationResults');
                
                let html = '<div class="card">';
                html += `<div class="card-header">Validation Results</div>`;
                
                if (data.all_valid) {
                    html += '<div class="success">All variables are registered and available</div>';
                } else {
                    html += '<div class="error">Some variables are not registered</div>';
                }
                
                html += '<h3>Content Variables</h3>';
                html += '<div class="variable-list">';
                for (const [variable, isValid] of Object.entries(data.content_variables)) {
                    const statusClass = isValid ? 'success' : 'error';
                    html += `<span class="variable-tag ${statusClass}">${variable}</span> `;
                }
                html += '</div>';
                
                if (Object.keys(data.system_variables).length > 0) {
                    html += '<h3>System Prompt Variables</h3>';
                    html += '<div class="variable-list">';
                    for (const [variable, isValid] of Object.entries(data.system_variables)) {
                        const statusClass = isValid ? 'success' : 'error';
                        html += `<span class="variable-tag ${statusClass}">${variable}</span> `;
                    }
                    html += '</div>';
                }
                
                html += '</div>';
                
                resultsElement.innerHTML = html;
                showStatus('Template validated', 'success');
                
            } catch (error) {
                console.error('Error validating template:', error);
                showStatus(`Error: ${error.message}`, 'error');
            }
        }
        
        // Add new variable
        async function addVariable() {
            const variableName = document.getElementById('variableName').value.trim();
            const description = document.getElementById('variableDescription').value.trim();
            const category = document.getElementById('variableCategory').value;
            const exampleValue = document.getElementById('variableExample').value.trim();
            const resolverFunc = document.getElementById('variableResolver').value.trim();
            
            if (!variableName || !description || !category) {
                showStatus('Variable name, description, and category are required', 'error');
                return;
            }
            
            try {
                showStatus('Adding new variable...', 'info');
                
                const variableData = {
                    name: variableName,
                    description: description,
                    category: category
                };
                
                if (exampleValue) {
                    variableData.example_value = exampleValue;
                }
                
                if (resolverFunc && resolverFunc !== '{}') {
                    variableData.resolver_function = resolverFunc;
                }
                
                const response = await fetch(`${config.baseUrl}/api/variables/?business_id=${config.businessId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    mode: 'cors',
                    credentials: 'include',
                    body: JSON.stringify(variableData)
                });
                
                if (!response.ok) {
                    throw new Error(`API returned ${response.status}: ${await response.text()}`);
                }
                
                const data = await response.json();
                
                // Clear form
                document.getElementById('variableName').value = '';
                document.getElementById('variableDescription').value = '';
                document.getElementById('variableExample').value = '';
                document.getElementById('variableResolver').value = '{}';
                
                // Refresh variables list
                fetchDatabaseVariables();
                
                showStatus('Variable added successfully!', 'success');
                
            } catch (error) {
                console.error('Error adding variable:', error);
                showStatus(`Error: ${error.message}`, 'error');
            }
        }
        
        // Delete variable
        async function deleteVariable(variableId, variableName) {
            // Confirm deletion
            if (!confirm(`Are you sure you want to delete the variable "${variableName}"?`)) {
                return;
            }
            
            try {
                showStatus(`Deleting variable "${variableName}"...`, 'info');
                
                const response = await fetch(`${config.baseUrl}/api/variables/${variableId}/?business_id=${config.businessId}`, {
                    method: 'DELETE',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    mode: 'cors',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`API returned ${response.status}: ${await response.text()}`);
                }
                
                // Refresh variables list
                fetchDatabaseVariables();
                
                showStatus(`Variable "${variableName}" deleted successfully!`, 'success');
                
            } catch (error) {
                console.error('Error deleting variable:', error);
                showStatus(`Error: ${error.message}`, 'error');
            }
        }
        
        // Test variable substitution
        function testSubstitution() {
            const templateContent = document.getElementById('substitutionTemplate').value;
            const variables = extractVariables(templateContent);
            
            if (variables.length === 0) {
                showStatus('No variables detected in the template', 'error');
                return;
            }
            
            // Collect variable values
            const variableValues = {};
            variables.forEach(variable => {
                const inputElement = document.getElementById(`var_${variable}`);
                if (inputElement) {
                    variableValues[variable] = inputElement.value || `{${variable}}`;
                }
            });
            
            // Perform substitution - handling both single and double curly braces
            let result = templateContent;
            
            // Process each variable
            for (const [variable, value] of Object.entries(variableValues)) {
                // Replace double curly braces first (to avoid conflicts)
                const doublePlaceholder = `{{${variable}}}`;
                if (result.includes(doublePlaceholder)) {
                    result = result.replace(new RegExp(doublePlaceholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), value);
                }
                
                // Then replace single curly braces
                const singlePlaceholder = `{${variable}}`;
                if (result.includes(singlePlaceholder)) {
                    result = result.replace(new RegExp(singlePlaceholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), value);
                }
            }
            
            // Display result
            document.getElementById('substitutionResultContent').textContent = result;
            document.getElementById('substitutionResults').style.display = 'block';
            
            showStatus('Substitution completed', 'success');
        }
        
        // Detect variables for substitution testing
        function detectSubstitutionVariables() {
            const templateContent = document.getElementById('substitutionTemplate').value;
            const variables = extractVariables(templateContent);
            
            const inputsContainer = document.getElementById('variableInputsContainer');
            
            if (variables.length === 0) {
                inputsContainer.innerHTML = '<p>No variables detected in the template</p>';
                return;
            }
            
            let html = '<p>Set variable values:</p>';
            
            variables.forEach(variable => {
                // Check if variable uses double curly braces
                const hasDoubleFormat = templateContent.includes(`{{${variable}}}`);
                const bracketFormat = hasDoubleFormat ? `{{${variable}}}` : `{${variable}}`;
                
                html += `
                    <div class="form-group">
                        <label for="var_${variable}">${bracketFormat}</label>
                        <input id="var_${variable}" type="text" placeholder="Value for ${variable}">
                    </div>
                `;
            });
            
            inputsContainer.innerHTML = html;
        }
        
        // Helper function to show status
        function showStatus(message, type = 'info') {
            const statusElement = document.getElementById('statusArea');
            statusElement.innerHTML = `<div class="${type}">${message}</div>`;
            
            // Clear status after 5 seconds
            setTimeout(() => {
                statusElement.innerHTML = '';
            }, 5000);
        }
        
        // Initialize the page
        window.addEventListener('DOMContentLoaded', () => {
            initConfig();
            
            // Auto-save the config if values are provided by default
            if (document.getElementById('baseUrl').value && 
                document.getElementById('businessId').value && 
                document.getElementById('apiKey').value) {
                saveConfig();
            } else {
                // Even if not saving, load variables using default URL
                // Only if business ID is available
                if (config.businessId && config.apiKey) {
                    fetchAvailableVariables();
                    fetchDatabaseVariables();
                } else {
                    showStatus('Business ID and API Key are required for API authentication', 'error');
                }
            }
            
            // Detect variables in the template substitution tester on page load
            detectSubstitutionVariables();
            
            // Add listener for template substitution text changes
            document.getElementById('substitutionTemplate').addEventListener('input', function() {
                // Auto-detect variables on content change with a slight delay
                clearTimeout(this.timeout);
                this.timeout = setTimeout(() => {
                    detectSubstitutionVariables();
                }, 500);
            });
        });
        
        // Extract variables from content
        function extractVariables(content) {
            if (!content) return [];
            
            // Support both single and double curly braces
            const singleCurlyRegex = /{([^{}]+)}/g;
            const doubleCurlyRegex = /{{([^{}]+)}}/g;
            
            const singleMatches = content.match(singleCurlyRegex) || [];
            const doubleMatches = content.match(doubleCurlyRegex) || [];
            
            // Process single curly brace matches (excluding those that are part of double braces)
            const singleVars = [];
            for (const match of singleMatches) {
                const varName = match.slice(1, -1);
                // Check if this variable is not part of a double brace pattern
                if (!content.includes(`{{${varName}}}`)) {
                    singleVars.push(varName);
                }
            }
            
            // Process double curly brace matches
            const doubleVars = doubleMatches.map(match => match.slice(2, -2));
            
            // Combine and filter out duplicates
            const allVars = [...singleVars, ...doubleVars];
            const uniqueVars = [...new Set(allVars)];
            
            console.log("Extracted variables:", {
                single: singleVars,
                double: doubleVars,
                all: uniqueVars
            });
            
            return uniqueVars;
        }

        // Global store for database variables
        let databaseVariables = {};

        // Load variables from database
        async function loadDatabaseVariables() {
            try {
                showStatus('Loading variables from database...', false, true);
                
                const response = await fetch(`${config.baseUrl}/api/variables/?business_id=${config.businessId}`, {
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    mode: 'cors',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`API returned ${response.status}: ${await response.text()}`);
                }
                
                const data = await response.json();
                databaseVariables = {};
                
                // Create HTML for variables display
                let html = '<div class="variable-list">';
                data.forEach(variable => {
                    databaseVariables[variable.variable_name] = variable;
                    html += `
                        <div class="variable-tag" title="${variable.description || 'No description'}">
                            ${variable.variable_name}
                            <span style="color: #666; font-size: 0.8em;"> (${variable.category})</span>
                            <span style="color: #666; font-size: 0.8em;"> = ${variable.default_value || '""'}</span>
                        </div>
                    `;
                });
                html += '</div>';
                
                document.getElementById('dbVariablesContainer').innerHTML = html;
                showStatus('Variables loaded successfully!', false, false);
                
            } catch (error) {
                console.error('Error loading variables:', error);
                document.getElementById('dbVariablesContainer').innerHTML = 
                    `<div class="error">Error loading variables: ${error.message}</div>`;
                showStatus(`Error: ${error.message}`, true, false);
            }
        }

        // Test substitution with database values
        async function testDatabaseSubstitution() {
            try {
                const templateContent = document.getElementById('dbSubstitutionTemplate').value;
                const variables = extractVariables(templateContent);
                
                if (variables.length === 0) {
                    showStatus('No variables detected in the template', true, false);
                    return;
                }
                
                // Collect variable values from database
                const variableValues = {};
                const variablesUsed = [];
                
                variables.forEach(variable => {
                    if (databaseVariables[variable]) {
                        variableValues[variable] = databaseVariables[variable].default_value;
                        variablesUsed.push({
                            name: variable,
                            value: databaseVariables[variable].default_value,
                            category: databaseVariables[variable].category,
                            description: databaseVariables[variable].description
                        });
                    } else {
                        variableValues[variable] = `[Missing: ${variable}]`;
                        variablesUsed.push({
                            name: variable,
                            value: '[Missing]',
                            category: 'unknown',
                            description: 'Variable not found in database'
                        });
                    }
                });
                
                // Perform substitution
                let result = templateContent;
                for (const [variable, value] of Object.entries(variableValues)) {
                    // Replace double curly braces first
                    result = result.replace(new RegExp(`{{${variable}}}`, 'g'), value);
                    // Then replace single curly braces
                    result = result.replace(new RegExp(`{${variable}}`, 'g'), value);
                }
                
                // Display results
                document.getElementById('dbVariablesUsed').textContent = 
                    JSON.stringify(variablesUsed, null, 2);
                document.getElementById('dbSubstitutionResultContent').textContent = result;
                document.getElementById('dbSubstitutionResults').style.display = 'block';
                
                showStatus('Database substitution completed', false, false);
                
            } catch (error) {
                console.error('Error testing substitution:', error);
                showStatus(`Error: ${error.message}`, true, false);
            }
        }

        // Load database variables on page load
        window.addEventListener('DOMContentLoaded', () => {
            // ... existing DOMContentLoaded code ...
            
            // Load database variables
            if (config.businessId && config.apiKey) {
                loadDatabaseVariables();
            }
        });
    </script>
</body>
</html> 

================================================================================
File: variable_test.html
Path: .\variable_test.html
Size: 18680
Modified: 2025-04-14T16:47:50.774981
Created: 2025-04-14T16:17:12.912515
Hash: 2ec0221fe932bd6aa918cf5fbfb36a7a0994466077e0acd0a82c3354ab3fe2c3
Lines: 486
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Variable Testing Tool</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #ddd;
            --bg-light: #f5f5f5;
            --text-color: #333;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: var(--bg-light);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        h1, h2 {
            color: var(--text-color);
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .card {
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        input[type="text"],
        input[type="password"],
        textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 14px;
        }

        textarea {
            height: 120px;
            font-family: monospace;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        button:hover {
            background-color: var(--primary-hover);
        }

        .error {
            color: var(--error-color);
            background-color: #fff5f5;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .success {
            color: var(--success-color);
            background-color: #f0fff4;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .variable-tag {
            display: inline-block;
            background-color: #e9ecef;
            padding: 4px 8px;
            margin: 2px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9em;
        }

        .variable-list {
            margin: 10px 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }

        #statusArea {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Variable Testing Tool</h1>
        <div id="statusArea"></div>

        <!-- Authentication Section -->
        <div id="authSection" class="card">
            <h2>Authentication</h2>
            <div class="form-group">
                <label for="businessId">Business ID</label>
                <input type="text" id="businessId" placeholder="Enter Business ID">
            </div>
            <div class="form-group">
                <label for="apiKey">API Key</label>
                <input type="password" id="apiKey" placeholder="Enter API Key">
            </div>
            <div class="form-group">
                <label for="ownerId">Owner ID</label>
                <input type="text" id="ownerId" placeholder="Enter Owner ID">
            </div>
            <div class="form-group">
                <label for="userId">User ID</label>
                <input type="text" id="userId" placeholder="Enter User ID">
            </div>
            <button onclick="authenticate()">Authenticate</button>
            <button onclick="clearAuth()" style="background-color: var(--error-color);">Clear Auth</button>
        </div>

        <!-- Variables Section (initially hidden) -->
        <div id="variablesSection" class="hidden">
            <div class="card">
                <h2>Available Variables</h2>
                <div id="variablesList" class="variable-list">
                    Loading variables...
                </div>
            </div>

            <!-- Add New Variable Section -->
            <div class="card">
                <h2>Add New Variable</h2>
                <div class="form-group">
                    <label for="variableName">Variable Name</label>
                    <input type="text" id="variableName" placeholder="Enter variable name (e.g., last_10_messages)">
                </div>
                <div class="form-group">
                    <label for="variableDescription">Description</label>
                    <textarea id="variableDescription" placeholder="Enter variable description"></textarea>
                </div>
                <div class="form-group">
                    <label for="variableCategory">Category</label>
                    <input type="text" id="variableCategory" placeholder="Enter category (e.g., conversation)">
                </div>
                <div class="form-group">
                    <label for="defaultValue">Default Value</label>
                    <input type="text" id="defaultValue" placeholder="Enter default value">
                </div>
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="isDynamic">
                        Is Dynamic Variable
                    </label>
                </div>
                <button onclick="addVariable()">Add Variable</button>
            </div>

            <div class="card">
                <h2>Test Variable Substitution</h2>
                <div class="form-group">
                    <label for="testTemplate">Template Content</label>
                    <textarea id="testTemplate" placeholder="Enter template with variables (e.g., Hello {{user_name}})"></textarea>
                </div>
                <button onclick="testSubstitution()">Test Substitution</button>
                <div id="substitutionResult" class="hidden">
                    <h3>Result:</h3>
                    <pre id="resultContent"></pre>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration object
        const config = {
            baseUrl: 'http://localhost:5000',
            businessId: '',
            apiKey: '',
            ownerId: '',
            userId: ''
        };

        // Show status message
        function showStatus(message, type = 'info') {
            const statusArea = document.getElementById('statusArea');
            statusArea.innerHTML = `<div class="${type}">${message}</div>`;
            setTimeout(() => statusArea.innerHTML = '', 5000);
        }

        // Clear authentication
        function clearAuth() {
            localStorage.removeItem('businessId');
            localStorage.removeItem('apiKey');
            localStorage.removeItem('ownerId');
            localStorage.removeItem('userId');
            
            document.getElementById('businessId').value = '';
            document.getElementById('apiKey').value = '';
            document.getElementById('ownerId').value = '';
            document.getElementById('userId').value = '';
            
            config.businessId = '';
            config.apiKey = '';
            config.ownerId = '';
            config.userId = '';
            
            document.getElementById('variablesSection').classList.add('hidden');
            showStatus('Authentication cleared', 'success');
        }

        // Authenticate user
        async function authenticate() {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const ownerId = document.getElementById('ownerId').value.trim();
            const userId = document.getElementById('userId').value.trim();

            if (!businessId || !apiKey || !ownerId || !userId) {
                showStatus('Please fill in all authentication fields', 'error');
                return;
            }

            try {
                // Test authentication with both business and owner verification
                const response = await fetch(`${config.baseUrl}/api/verify-owner`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'Accept': 'application/json',
                        'businessapikey': apiKey
                    },
                    body: JSON.stringify({
                        userId: ownerId,
                        businessId: businessId,
                        businessApiKey: apiKey
                    }),
                    credentials: 'include',
                    mode: 'cors'
                });

                if (!response.ok) {
                    throw new Error('Authentication failed');
                }

                const authResult = await response.json();
                if (!authResult.success) {
                    throw new Error(authResult.message || 'Authentication failed');
                }

                // Store credentials in config and localStorage
                config.businessId = businessId;
                config.apiKey = apiKey;
                config.ownerId = ownerId;
                config.userId = userId;

                localStorage.setItem('businessId', businessId);
                localStorage.setItem('apiKey', apiKey);
                localStorage.setItem('ownerId', ownerId);
                localStorage.setItem('userId', userId);

                // Show variables section
                document.getElementById('variablesSection').classList.remove('hidden');
                showStatus('Authentication successful', 'success');

                // Load variables
                loadVariables();

            } catch (error) {
                showStatus(`Authentication failed: ${error.message}`, 'error');
            }
        }

        // Load variables from database
        async function loadVariables() {
            try {
                const response = await fetch(`${config.baseUrl}/api/variables/?business_id=${config.businessId}&owner_id=${config.ownerId}`, {
                    headers: {
                        'Authorization': `Bearer ${config.apiKey}`,
                        'Accept': 'application/json',
                        'businessapikey': config.apiKey
                    },
                    credentials: 'include',
                    mode: 'cors'
                });

                if (!response.ok) {
                    throw new Error('Failed to load variables');
                }

                const data = await response.json();
                const variables = data.variables || data; // Handle both array and object with variables property
                const variablesList = document.getElementById('variablesList');
                
                if (!Array.isArray(variables) || variables.length === 0) {
                    variablesList.innerHTML = '<p>No variables found</p>';
                    return;
                }

                let html = '';
                variables.forEach(variable => {
                    const name = variable.variable_name || variable.name || 'Unnamed';
                    const category = variable.category || 'No category';
                    const defaultValue = variable.default_value !== undefined ? variable.default_value : '""';
                    const description = variable.description || 'No description';
                    
                    html += `
                        <div class="variable-tag" title="${description}">
                            {{${name}}}
                            <span style="color: #666; font-size: 0.8em;"> (${category})</span>
                            <span style="color: #666; font-size: 0.8em;"> = ${defaultValue}</span>
                        </div>
                    `;
                });

                variablesList.innerHTML = html;

            } catch (error) {
                showStatus(`Error loading variables: ${error.message}`, 'error');
            }
        }

        // Test variable substitution
        async function testSubstitution() {
            const template = document.getElementById('testTemplate').value.trim();
            if (!template) {
                showStatus('Please enter a template to test', 'error');
                return;
            }

            try {
                const response = await fetch(`${config.baseUrl}/api/variables/test-substitution/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`,
                        'Accept': 'application/json',
                        'businessapikey': config.apiKey
                    },
                    body: JSON.stringify({
                        business_id: config.businessId,
                        owner_id: config.ownerId,
                        user_id: config.userId,
                        template: template
                    }),
                    credentials: 'include',
                    mode: 'cors'
                });

                if (!response.ok) {
                    throw new Error('Substitution test failed');
                }

                const result = await response.json();
                
                const resultDiv = document.getElementById('substitutionResult');
                const resultContent = document.getElementById('resultContent');
                
                resultDiv.classList.remove('hidden');
                resultContent.textContent = JSON.stringify(result, null, 2);
                
                showStatus('Substitution test completed', 'success');

            } catch (error) {
                showStatus(`Error testing substitution: ${error.message}`, 'error');
            }
        }

        // Add new variable
        async function addVariable() {
            const variableName = document.getElementById('variableName').value.trim();
            const description = document.getElementById('variableDescription').value.trim();
            const category = document.getElementById('variableCategory').value.trim();
            const defaultValue = document.getElementById('defaultValue').value.trim();
            const isDynamic = document.getElementById('isDynamic').checked;

            if (!variableName || !description || !category) {
                showStatus('Please fill in all required fields', 'error');
                return;
            }

            try {
                const response = await fetch(`${config.baseUrl}/api/variables/?business_id=${config.businessId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`,
                        'Accept': 'application/json',
                        'businessapikey': config.apiKey
                    },
                    body: JSON.stringify({
                        business_id: config.businessId,
                        name: variableName,
                        description: description,
                        category: category,
                        default_value: defaultValue,
                        is_dynamic: isDynamic
                    }),
                    credentials: 'include',
                    mode: 'cors'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to add variable');
                }

                const result = await response.json();
                showStatus('Variable added successfully', 'success');

                // Clear form
                document.getElementById('variableName').value = '';
                document.getElementById('variableDescription').value = '';
                document.getElementById('variableCategory').value = '';
                document.getElementById('defaultValue').value = '';
                document.getElementById('isDynamic').checked = false;

                // Reload variables list
                loadVariables();

            } catch (error) {
                showStatus(`Error adding variable: ${error.message}`, 'error');
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            // Check for stored credentials
            const storedBusinessId = localStorage.getItem('businessId');
            const storedApiKey = localStorage.getItem('apiKey');
            const storedOwnerId = localStorage.getItem('ownerId');
            const storedUserId = localStorage.getItem('userId');

            if (storedBusinessId && storedApiKey && storedOwnerId && storedUserId) {
                document.getElementById('businessId').value = storedBusinessId;
                document.getElementById('apiKey').value = storedApiKey;
                document.getElementById('ownerId').value = storedOwnerId;
                document.getElementById('userId').value = storedUserId;
                
                // Auto authenticate if we have stored credentials
                authenticate();
            }
        });
    </script>
</body>
</html> 

================================================================================
File: test_create_stage.html
Path: .\backend\test_create_stage.html
Size: 9069
Modified: 2025-04-03T20:14:07.285566
Created: 2025-04-03T20:13:43.233273
Hash: 7963abecae1199de4b87908d09a5fd9c8df2047b866634ed8dc26be65c0d2e28
Lines: 217
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Stage Creation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            color: #333;
            border-bottom: 1px solid #ccc;
            padding-bottom: 10px;
        }
        label {
            display: block;
            margin-top: 15px;
            font-weight: bold;
        }
        input, textarea, select {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        textarea {
            min-height: 100px;
            font-family: monospace;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 20px;
        }
        button:hover {
            background-color: #45a049;
        }
        pre {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 4px;
            overflow-x: auto;
            margin-top: 20px;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-left: 4px solid #4CAF50;
        }
        .error {
            border-left: 4px solid #f44336;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Test Stage Creation</h1>
        
        <form id="stageForm">
            <label for="apiKey">API Key:</label>
            <input type="text" id="apiKey" placeholder="Enter your API key">
            
            <label for="businessId">Business ID:</label>
            <input type="text" id="businessId" value="7ae167a0-d864-43b9-bdaf-fcba35b33f27">
            
            <label for="agentId">Agent ID (optional):</label>
            <input type="text" id="agentId" value="f731ec2a-a68d-4e56-8a27-d77a9ad4978a">
            
            <label for="stageName">Stage Name:</label>
            <input type="text" id="stageName" value="Customer Service Stage">
            
            <label for="stageDescription">Stage Description:</label>
            <input type="text" id="stageDescription" value="Handles customer service requests">
            
            <label for="stageType">Stage Type:</label>
            <select id="stageType">
                <option value="information">Information</option>
                <option value="transaction">Transaction</option>
                <option value="support">Support</option>
            </select>
            
            <label for="stageSelectionTemplate">Stage Selection Template:</label>
            <textarea id="stageSelectionTemplate">Determine if this message is about customer service by analyzing the following:

1. Is the user asking for help with a product or service?
2. Is the user reporting an issue?
3. Is the user asking about support options?

Return YES if this is a customer service query, NO otherwise.</textarea>
            
            <label for="dataExtractionTemplate">Data Extraction Template:</label>
            <textarea id="dataExtractionTemplate">Extract the following information from the message:
- Product name (if mentioned)
- Issue type (if mentioned)
- Customer urgency level (low, medium, high)
- Customer emotion (neutral, frustrated, angry, happy)</textarea>
            
            <label for="responseGenerationTemplate">Response Generation Template:</label>
            <textarea id="responseGenerationTemplate">Create a helpful response for the customer service query based on the extracted data.
Be empathetic, offer specific solutions if possible, and provide next steps.
If an issue was mentioned, acknowledge it and offer troubleshooting steps.
If the customer seems urgent or upset, express understanding and promise quick assistance.</textarea>
            
            <button type="button" id="submitButton">Create Stage</button>
        </form>
        
        <h2>Request Data:</h2>
        <pre id="requestData"></pre>
        
        <h2>Response:</h2>
        <div id="responseContainer" class="result"></div>
    </div>
    
    <script>
        document.getElementById('submitButton').addEventListener('click', function() {
            const apiKey = document.getElementById('apiKey').value;
            const businessId = document.getElementById('businessId').value;
            const agentId = document.getElementById('agentId').value;
            const stageName = document.getElementById('stageName').value;
            const stageDescription = document.getElementById('stageDescription').value;
            const stageType = document.getElementById('stageType').value;
            const stageSelectionTemplate = document.getElementById('stageSelectionTemplate').value;
            const dataExtractionTemplate = document.getElementById('dataExtractionTemplate').value;
            const responseGenerationTemplate = document.getElementById('responseGenerationTemplate').value;
            
            // Validate required fields
            if (!businessId || !stageName || !stageDescription || !stageType || 
                !stageSelectionTemplate || !dataExtractionTemplate || !responseGenerationTemplate) {
                alert('Please fill out all required fields');
                return;
            }
            
            // Create the payload with the REQUIRED config objects
            const data = {
                business_id: businessId,
                agent_id: agentId || null,  // Make it null if empty
                stage_name: stageName,
                stage_description: stageDescription,
                stage_type: stageType,
                stage_selection_config: {
                    template_text: stageSelectionTemplate
                },
                data_extraction_config: {
                    template_text: dataExtractionTemplate
                },
                response_generation_config: {
                    template_text: responseGenerationTemplate
                }
            };
            
            // Display the request data
            document.getElementById('requestData').textContent = JSON.stringify(data, null, 2);
            
            // Make the API request
            fetch('/stages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-API-KEY': apiKey
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                const responseContainer = document.getElementById('responseContainer');
                
                // Format based on status
                if (response.ok) {
                    responseContainer.classList.remove('error');
                    return response.json().then(data => {
                        responseContainer.innerHTML = `
                            <p><strong>Status:</strong> ${response.status} - Success</p>
                            <p><strong>Stage ID:</strong> ${data.stage_id}</p>
                        `;
                    });
                } else {
                    responseContainer.classList.add('error');
                    return response.json().then(data => {
                        responseContainer.innerHTML = `
                            <p><strong>Status:</strong> ${response.status} - Error</p>
                            <p><strong>Message:</strong> ${data.error || 'Unknown error'}</p>
                            <p><strong>Details:</strong> ${data.details || 'No details provided'}</p>
                        `;
                    }).catch(() => {
                        responseContainer.innerHTML = `
                            <p><strong>Status:</strong> ${response.status} - Error</p>
                            <p><strong>Message:</strong> Failed to parse response</p>
                        `;
                    });
                }
            })
            .catch(error => {
                const responseContainer = document.getElementById('responseContainer');
                responseContainer.classList.add('error');
                responseContainer.innerHTML = `
                    <p><strong>Error:</strong> ${error.message}</p>
                    <p>Network or server error occurred.</p>
                `;
            });
        });
    </script>
</body>
</html> 

================================================================================
File: index.html
Path: .\front-end\public\index.html
Size: 1732
Modified: 2025-03-28T20:53:49.300789
Created: 2025-03-28T18:53:29.978142
Hash: 307f07b92069c7c77fa7c51a0a2d5103619a48f010cfb4bb678ac94cbbf22c3f
Lines: 44
================================================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start`.
      To create a production bundle, use `npm run build`.
    -->
  </body>
</html>


================================================================================
File: llm_calls.html
Path: .\front-end\public\llm_calls.html
Size: 49622
Modified: 2025-04-12T20:05:10.204258
Created: 2025-04-12T17:42:55.728971
Hash: 759827deca2b9392fef5969bd448331c12765f296cf07d4465ce08f1371af230
Lines: 1231
================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Calls Monitor</title>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2ecc71;
            --error-color: #e74c3c;
            --warning-color: #f39c12;
            --text-color: #333;
            --light-bg: #f5f5f5;
            --border-color: #ddd;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 20px 0;
            margin-bottom: 30px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        h1, h2, h3 {
            margin-top: 0;
        }
        
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            overflow: hidden;
        }
        
        .card-header {
            background-color: var(--light-bg);
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-body {
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 16px;
        }
        
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .alert {
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        .process-step {
            margin-bottom: 30px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
        }
        
        .step-header {
            background-color: var(--light-bg);
            padding: 10px 15px;
            font-weight: bold;
            border-bottom: 1px solid var(--border-color);
        }
        
        .step-content {
            padding: 15px;
        }
        
        .prompt-box, .response-box {
            background-color: #f8f9fa;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
            white-space: pre-wrap;
            font-family: monospace;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .system-prompt {
            background-color: #e6f7ff;
            border: 1px solid #b3e0ff;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
            white-space: pre-wrap;
            font-family: monospace;
        }
        
        .template-info {
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #666;
        }
        
        .log-list {
            list-style-type: none;
            padding: 0;
        }
        
        .log-item {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .log-item:hover {
            background-color: #f0f8ff;
        }
        
        .text-muted {
            color: #6c757d;
            font-size: 0.9em;
        }
        
        .no-logs {
            color: #6c757d;
            font-style: italic;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        
        .flow-diagram {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin: 30px 0;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            overflow-x: auto;
        }
        
        .stage-node {
            padding: 15px;
            background-color: white;
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            text-align: center;
            min-width: 150px;
            position: relative;
        }
        
        .stage-node.active {
            background-color: #e6f7ff;
            border-color: #0056b3;
            box-shadow: 0 0 10px rgba(0,123,255,0.3);
        }
        
        .stage-node.completed {
            background-color: #d4edda;
            border-color: #28a745;
        }
        
        .arrow {
            font-size: 24px;
            color: #6c757d;
            margin: 0 10px;
        }
        
        .hidden {
            display: none;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            border-radius: 4px 4px 0 0;
            margin-right: 5px;
        }
        
        .tab.active {
            background-color: white;
            border-color: var(--border-color);
            border-bottom: 1px solid white;
            margin-bottom: -1px;
            font-weight: bold;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .json-viewer {
            background-color: #f8f9fa;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
            white-space: pre-wrap;
            font-family: monospace;
            max-height: 500px;
            overflow-y: auto;
        }
        
        .api-inspector {
            margin-top: 30px;
        }
        
        .request-details, .response-details {
            margin-bottom: 20px;
        }
        
        pre {
            background-color: #f8f9fa;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
            white-space: pre-wrap;
            font-family: monospace;
            max-height: 300px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>LLM Calls Monitor</h1>
            <p>View and analyze LLM calls and responses in real-time</p>
        </div>
    </header>
    
    <div class="container">
        <!-- Configuration Section -->
        <div class="card">
            <div class="card-header">
                <h2>Configuration</h2>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="businessId">Business ID</label>
                    <input id="businessId" type="text" placeholder="Enter your Business ID">
                </div>
                
                <div class="form-group">
                    <label for="apiBaseUrl">API Base URL</label>
                    <input id="apiBaseUrl" type="text" placeholder="Enter API Base URL (e.g., /api or http://localhost:5000/api)" value="">
                    <small class="text-muted">Leave empty to use relative paths</small>
                    <div id="fileProtocolWarning" class="alert alert-warning" style="display: none;">
                        <strong>Note:</strong> You're opening this page directly from your file system. 
                        For proper functionality, please either:
                        <ol>
                            <li>Serve this page from a web server (recommended)</li>
                            <li>Or ensure your API server is running at the URL specified above</li>
                        </ol>
                        <div class="button-group">
                            <button onclick="startLocalServer()">Start Local Server</button>
                            <button onclick="window.open('http://localhost:8000/llm_calls.html', '_blank')">Open in Browser</button>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="apiKey">Business API Key</label>
                    <input id="apiKey" type="password" placeholder="Enter your Business API Key">
                </div>

                <div class="form-group">
                    <label for="ownerId">Owner ID</label>
                    <input id="ownerId" type="text" placeholder="Enter your Owner ID">
                    <small class="text-muted">This is your owner ID for authentication</small>
                </div>
                
                <div class="button-group">
                    <button id="loginButton" onclick="login()">Login</button>
                    <button id="logoutButton" onclick="logout()" class="hidden">Logout</button>
                </div>
                
                <div id="loginStatus" class="alert alert-info hidden">
                    Not logged in
                </div>
            </div>
        </div>
        
        <!-- Message Section -->
        <div class="card">
            <div class="card-header">
                <h2>Send Message</h2>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="userId">Message Sender ID</label>
                    <input id="userId" type="text" placeholder="Enter User ID or generate new">
                    <button onclick="document.getElementById('userId').value = generateUUID()">Generate New</button>
                </div>
                
                <div class="form-group">
                    <label for="messageContent">Message Content</label>
                    <textarea id="messageContent" placeholder="Enter your message" rows="4"></textarea>
                </div>
                
                <div class="button-group">
                    <button id="sendButton" onclick="sendMessageAndDebug()">Send & Debug</button>
                </div>
                
                <div id="responseArea">
                    <div class="text-muted">Send a message to see the response</div>
                </div>
            </div>
        </div>
        
        <!-- Flow Diagram Section -->
        <div class="card">
            <div class="card-header">
                <h2>Message Processing Flow</h2>
            </div>
            <div class="card-body">
                <div class="flow-diagram">
                    <div class="stage-node" id="stage-selection-node">Stage Selection</div>
                    <div class="arrow">→</div>
                    <div class="stage-node" id="data-extraction-node">Data Extraction</div>
                    <div class="arrow">→</div>
                    <div class="stage-node" id="response-generation-node">Response Generation</div>
                </div>
            </div>
        </div>
        
        <!-- Processing Details Section -->
        <div class="card">
            <div class="card-header">
                <h2>Processing Details</h2>
            </div>
            <div class="card-body">
                <div class="tabs">
                    <div class="tab active" onclick="switchTab('processLogTab')">Process Log</div>
                    <div class="tab" onclick="switchTab('rawJsonTab')">Raw JSON</div>
                </div>
                
                <div id="processLogTab" class="tab-content active">
                    <div id="processLogArea" class="process-log">
                        <div class="no-logs">No processing data available yet</div>
                    </div>
                </div>
                
                <div id="rawJsonTab" class="tab-content">
                    <div id="rawJsonArea" class="json-viewer">
                        No JSON data available
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Recent Logs Section -->
        <div class="card">
            <div class="card-header">
                <h2>Recent Process Logs</h2>
            </div>
            <div class="card-body">
                <div class="button-group">
                    <button onclick="fetchRecentLogs()">Refresh Logs</button>
                </div>
                <div id="recentLogsArea">
                    <div class="no-logs">No recent logs available</div>
                </div>
            </div>
        </div>
        
        <!-- Status Section -->
        <div class="card">
            <div class="card-header">
                <h2>Status</h2>
            </div>
            <div class="card-body">
                <div id="statusArea">
                    <div id="networkStatus" class="text-muted">No network activity yet</div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        let isLoggedIn = false;
        let currentLogId = null;
        let API_BASE_URL = window.location.origin + '/api';
        
        // Helper functions
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Check if API server is running
        async function checkApiServer(url) {
            try {
                // Try the root endpoint first
                console.log('Checking API server at:', url);
                let response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    },
                    mode: 'cors'
                });
                
                // If that fails, try with no-cors mode as a last resort
                if (!response.ok) {
                    console.log('Standard endpoint failed, trying with no-cors mode...');
                    response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        },
                        mode: 'no-cors'
                    });
                    
                    // With no-cors, we can't check response.ok, so we assume it worked
                    // if we didn't get an error
                    return true;
                }
                
                return response.ok;
            } catch (error) {
                console.error('API server check failed:', error);
                return false;
            }
        }
        
        function formatDateTime(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleString();
        }
        
        function formatStepName(step) {
            const stepNames = {
                'stage_selection': 'Stage Selection',
                'data_extraction': 'Data Extraction',
                'response_generation': 'Response Generation'
            };
            return stepNames[step] || step;
        }
        
        function truncateText(text, maxLength) {
            if (!text) return 'N/A';
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }
        
        function showSuccess(message) {
            const statusArea = document.getElementById('statusArea');
            statusArea.innerHTML = `<div class="alert alert-success">${message}</div>`;
        }
        
        function showError(message) {
            const statusArea = document.getElementById('statusArea');
            statusArea.innerHTML = `<div class="alert alert-error">${message}</div>`;
        }
        
        function updateStatus(message) {
            const statusArea = document.getElementById('statusArea');
            statusArea.innerHTML = `<div class="alert alert-info">${message}</div>`;
        }
        
        function switchTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Deactivate all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Activate the selected tab and content
            document.getElementById(tabId).classList.add('active');
            document.querySelector(`.tab[onclick="switchTab('${tabId}')"]`).classList.add('active');
        }
        
        // Login/Logout functions
        async function login() {
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const apiBaseUrl = document.getElementById('apiBaseUrl').value.trim();
            const ownerId = document.getElementById('ownerId').value.trim();
            
            if (!businessId || !apiKey || !ownerId) {
                showError('Business ID, API Key, and Owner ID are required');
                return;
            }
            
            // Update API_BASE_URL if provided
            if (apiBaseUrl) {
                API_BASE_URL = apiBaseUrl;
            }
            
            updateStatus('Checking API server...');
            
            // Check if API server is running
            const isServerRunning = await checkApiServer(API_BASE_URL);
            if (!isServerRunning) {
                showError(`
                    <strong>API server is not running or not accessible!</strong><br><br>
                    Please ensure your API server is running at: ${API_BASE_URL}<br><br>
                    <strong>Troubleshooting tips:</strong>
                    <ul>
                        <li>Start your API server if it's not running</li>
                        <li>Check if the API URL is correct</li>
                        <li>If using localhost, make sure the server is running on the specified port</li>
                        <li>Check for any firewall or network issues</li>
                        <li><strong>CORS Issue:</strong> If you're opening this file directly from your file system, 
                            you may need to serve it from a web server or configure your API server to allow CORS</li>
                    </ul>
                    <br>
                    <strong>To serve this file from a web server:</strong>
                    <ol>
                        <li>Open a terminal/command prompt</li>
                        <li>Navigate to the directory containing this file</li>
                        <li>Run: <code>npx http-server -p 8000</code></li>
                        <li>Access the page at: <a href="http://localhost:8000/llm_calls.html" target="_blank">http://localhost:8000/llm_calls.html</a></li>
                    </ol>
                `);
                return;
            }
            
            updateStatus('Logging in...');
            
            try {
                // Make a request to the save-config endpoint to validate credentials
                const loginUrl = `${API_BASE_URL}/save-config`;
                console.log('Login URL:', loginUrl);
                
                const response = await fetch(loginUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        ownerId: ownerId,
                        businessId: businessId,
                        businessApiKey: apiKey
                    })
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Login failed: ${errorText}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    // Update login state
                    isLoggedIn = true;
                    
                    // Update UI
                    document.getElementById('loginButton').classList.add('hidden');
                    document.getElementById('logoutButton').classList.remove('hidden');
                    document.getElementById('loginStatus').classList.remove('hidden');
                    document.getElementById('loginStatus').innerHTML = `Logged in as Business ID: ${businessId}`;
                    document.getElementById('loginStatus').className = 'alert alert-success';
                    
                    // Enable message sending
                    document.getElementById('sendButton').disabled = false;
                    
                    // Fetch recent logs
                    fetchRecentLogs();
                    
                    showSuccess('Login successful!');
                } else {
                    throw new Error(data.error || 'Unknown error during login');
                }
            } catch (error) {
                console.error('Login error:', error);
                
                // Enhanced error reporting
                let errorMessage = `Login failed: ${error.message}`;
                
                if (error.message.includes('Failed to fetch')) {
                    errorMessage += `
                        <br><br>
                        <strong>Troubleshooting tips:</strong>
                        <ul>
                            <li>Check if the API server is running</li>
                            <li>Verify the API endpoint URL is correct</li>
                            <li>Check for CORS issues (if accessing from a different domain)</li>
                            <li>Ensure your network connection is stable</li>
                        </ul>
                        <br>
                        <strong>Technical details:</strong>
                        <ul>
                            <li>API URL: ${API_BASE_URL}/save-config</li>
                            <li>Business ID: ${businessId}</li>
                            <li>Owner ID: ${ownerId}</li>
                        </ul>
                    `;
                }
                
                showError(errorMessage);
                isLoggedIn = false;
            }
        }
        
        function logout() {
            isLoggedIn = false;
            
            // Update UI
            document.getElementById('loginButton').classList.remove('hidden');
            document.getElementById('logoutButton').classList.add('hidden');
            document.getElementById('loginStatus').innerHTML = 'Not logged in';
            document.getElementById('loginStatus').className = 'alert alert-info';
            
            // Disable message sending
            document.getElementById('sendButton').disabled = true;
            
            // Clear logs
            document.getElementById('recentLogsArea').innerHTML = '<div class="no-logs">No recent logs available</div>';
            document.getElementById('processLogArea').innerHTML = '<div class="no-logs">No processing data available</div>';
        }
        
        // Message sending function
        async function sendMessageAndDebug() {
            if (!isLoggedIn) {
                showError('You must login first before sending messages');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            const userId = document.getElementById('userId').value.trim();
            const content = document.getElementById('messageContent').value.trim();
            
            if (!businessId || !apiKey || !userId || !content) {
                showError('Business ID, API Key, User ID, and Message Content are required');
                return;
            }
            
            updateStatus('Sending message...');
            
            try {
                const messageUrl = `${API_BASE_URL}/message`;
                console.log('Sending message to:', messageUrl);
                console.log('Request payload:', {
                    business_id: businessId,
                    user_id: userId,
                    message: content
                });
                
                const response = await fetch(messageUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'businessapikey': apiKey
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        business_id: businessId,
                        user_id: userId,
                        message: content
                    })
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to send message! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('Message sent successfully!');
                    
                    // Display the response
                    const responseArea = document.getElementById('responseArea');
                    if (data.chat_window) {
                        const { user_message, ai_response } = data.chat_window;
                        responseArea.innerHTML = `
                            <div class="process-step">
                                <div class="step-header">User Message:</div>
                                <div class="prompt-box">${user_message.content}</div>
                            </div>
                            <div class="process-step">
                                <div class="step-header">AI Response:</div>
                                <div class="response-box">${ai_response.content}</div>
                            </div>
                        `;
                    } else {
                        responseArea.innerHTML = `
                            <div class="response-box">${data.response}</div>
                        `;
                    }
                    
                    // If there's a process log ID, fetch and display the details
                    if (data.process_log_id) {
                        currentLogId = data.process_log_id;
                        setTimeout(() => fetchProcessLog(data.process_log_id), 500);
                    } else {
                        showError('No process log ID returned. Detailed debugging not available.');
                    }
                    
                    // Refresh the recent logs
                    setTimeout(fetchRecentLogs, 1000);
                } else {
                    showError(data.error || 'Unknown error sending message');
                }
                
            } catch (error) {
                console.error('Message error:', error);
                
                // Enhanced error reporting
                let errorMessage = `Failed to send message: ${error.message}`;
                
                if (error.message.includes('Failed to fetch')) {
                    errorMessage += `
                        <br><br>
                        <strong>Troubleshooting tips:</strong>
                        <ul>
                            <li>Check if the API server is running</li>
                            <li>Verify the API endpoint URL is correct</li>
                            <li>Check for CORS issues (if accessing from a different domain)</li>
                            <li>Ensure your network connection is stable</li>
                        </ul>
                        <br>
                        <strong>Technical details:</strong>
                        <ul>
                            <li>API URL: ${API_BASE_URL}/message</li>
                            <li>Business ID: ${businessId}</li>
                            <li>User ID: ${userId}</li>
                        </ul>
                    `;
                }
                
                showError(errorMessage);
            }
        }
        
        // Fetch process log details
        async function fetchProcessLog(logId) {
            if (!isLoggedIn) {
                showError('You must login first before fetching logs');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey || !logId) {
                showError('Business ID, API Key, and Log ID are required to fetch processing details');
                return;
            }
            
            updateStatus('Fetching process log...');
            
            try {
                const url = `${API_BASE_URL}/message/logs/${logId}?business_id=${encodeURIComponent(businessId)}`;
                console.log('Fetching process log from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'businessapikey': apiKey
                    },
                    credentials: 'include',
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch process log! status: ${response.status}, message: ${errorText}`);
                }
                
                const logData = await response.json();
                
                // Display the process log
                displayProcessLog(logData);
                
                // Update flow diagram based on processing steps
                updateFlowDiagram(logData);
                
                // Display raw JSON
                document.getElementById('rawJsonArea').textContent = JSON.stringify(logData, null, 2);
                
                showSuccess('Process log fetched successfully!');
                
            } catch (error) {
                console.error('Error fetching process log:', error);
                
                // Enhanced error reporting
                let errorMessage = `Failed to fetch process log: ${error.message}`;
                
                if (error.message.includes('Failed to fetch')) {
                    errorMessage += `
                        <br><br>
                        <strong>Troubleshooting tips:</strong>
                        <ul>
                            <li>Check if the API server is running</li>
                            <li>Verify the API endpoint URL is correct</li>
                            <li>Check for CORS issues (if accessing from a different domain)</li>
                            <li>Ensure your network connection is stable</li>
                        </ul>
                        <br>
                        <strong>Technical details:</strong>
                        <ul>
                            <li>API URL: ${API_BASE_URL}/message/logs/${logId}</li>
                            <li>Business ID: ${businessId}</li>
                            <li>Log ID: ${logId}</li>
                        </ul>
                    `;
                }
                
                showError(errorMessage);
            }
        }
        
        // Fetch recent process logs
        async function fetchRecentLogs() {
            if (!isLoggedIn) {
                showError('You must login first before fetching logs');
                return;
            }
            
            const businessId = document.getElementById('businessId').value.trim();
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!businessId || !apiKey) {
                showError('Business ID and API Key are required to fetch recent logs');
                return;
            }
            
            updateStatus('Fetching recent logs...');
            
            try {
                const url = `${API_BASE_URL}/message/logs/recent?business_id=${encodeURIComponent(businessId)}&limit=10`;
                console.log('Fetching recent logs from URL:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'businessapikey': apiKey
                    },
                    credentials: 'include',
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    let errorText = '';
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || 'Unknown error';
                    } catch (jsonError) {
                        errorText = await response.text();
                    }
                    
                    throw new Error(`Failed to fetch recent logs! status: ${response.status}, message: ${errorText}`);
                }
                
                const logs = await response.json();
                
                // Display the recent logs
                displayRecentLogs(logs);
                
                showSuccess('Recent logs fetched successfully!');
                
            } catch (error) {
                console.error('Error fetching recent logs:', error);
                
                // Enhanced error reporting
                let errorMessage = `Failed to fetch recent logs: ${error.message}`;
                
                if (error.message.includes('Failed to fetch')) {
                    errorMessage += `
                        <br><br>
                        <strong>Troubleshooting tips:</strong>
                        <ul>
                            <li>Check if the API server is running</li>
                            <li>Verify the API endpoint URL is correct</li>
                            <li>Check for CORS issues (if accessing from a different domain)</li>
                            <li>Ensure your network connection is stable</li>
                        </ul>
                        <br>
                        <strong>Technical details:</strong>
                        <ul>
                            <li>API URL: ${API_BASE_URL}/message/logs/recent</li>
                            <li>Business ID: ${businessId}</li>
                        </ul>
                    `;
                }
                
                showError(errorMessage);
            }
        }
        
        // Display process log details
        function displayProcessLog(log) {
            const processLogArea = document.getElementById('processLogArea');
            
            if (!log) {
                processLogArea.innerHTML = '<div class="no-logs">No processing data available</div>';
                return;
            }
            
            let html = `
                <h3>Process Log Details</h3>
                <div class="process-step">
                    <div class="step-header">Original Message</div>
                    <div class="prompt-box">${log.original_message || 'N/A'}</div>
                    <div class="text-muted">
                        Log ID: ${log.log_id || 'N/A'}<br>
                        Conversation ID: ${log.conversation_id || 'N/A'}<br>
                        Time: ${formatDateTime(log.start_time) || 'N/A'}
                    </div>
                </div>
                
                <div class="process-step">
                    <div class="step-header">Current Stage Information</div>
                    <div class="step-content">
                        <div><strong>Stage ID:</strong> ${log.stage_id || 'No specific stage'}</div>
                        <div><strong>Stage Name:</strong> ${log.current_stage_name || 'Default'}</div>
                        ${log.agent_id ? `<div><strong>Agent ID:</strong> ${log.agent_id}</div>` : ''}
                    </div>
                </div>
            `;
            
            // Process each step
            if (log.processing_steps && log.processing_steps.length > 0) {
                html += `<h3>Processing Steps</h3>`;
                
                log.processing_steps.forEach((step, index) => {
                    html += `
                        <div class="process-step">
                            <div class="step-header">${formatStepName(step.step)} (Step ${index + 1})</div>
                            
                            <div class="step-content">
                                <div class="template-info">
                                    <strong>Template:</strong> ${step.template_name || 'Unknown Template'} (${step.template_id || 'N/A'})<br>
                                    <strong>Time:</strong> ${formatDateTime(step.timestamp) || 'N/A'}
                                </div>
                                
                                ${step.system_prompt ? `
                                <div class="system-prompt-container">
                                    <strong>System Prompt:</strong>
                                    <div class="system-prompt">${step.system_prompt}</div>
                                </div>
                                ` : ''}
                                
                                <div class="prompt-container">
                                    <strong>Prompt:</strong>
                                    <div class="prompt-box" style="white-space: pre-wrap;">${step.prompt || 'N/A'}</div>
                                </div>
                                
                                <div class="response-container">
                                    <strong>Response:</strong>
                                    <div class="response-box" style="white-space: pre-wrap;">${step.response || 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                    `;
                });
            } else {
                html += '<div class="no-logs">No processing steps recorded</div>';
            }
            
            // Final response
            html += `
                <h3>Final Result</h3>
                <div class="process-step">
                    <div class="step-header">Final Response</div>
                    <div class="response-box" style="white-space: pre-wrap;">${log.final_response || 'N/A'}</div>
                </div>
            `;
            
            processLogArea.innerHTML = html;
        }
        
        // Display recent logs list
        function displayRecentLogs(logs) {
            const recentLogsArea = document.getElementById('recentLogsArea');
            
            if (!logs || logs.length === 0) {
                recentLogsArea.innerHTML = '<div class="no-logs">No recent logs available</div>';
                return;
            }
            
            let html = '<ul class="log-list">';
            
            logs.forEach(log => {
                html += `
                    <li class="log-item" onclick="fetchProcessLog('${log.log_id}')">
                        <strong>Message:</strong> ${truncateText(log.original_message, 50)}<br>
                        <strong>Time:</strong> ${formatDateTime(log.start_time)}<br>
                        <span class="text-muted">Log ID: ${log.log_id}</span>
                    </li>
                `;
            });
            
            html += '</ul>';
            
            recentLogsArea.innerHTML = html;
        }
        
        // Reset flow diagram
        function resetFlowDiagram() {
            const nodes = document.querySelectorAll('.stage-node');
            nodes.forEach(node => {
                node.classList.remove('active', 'completed');
            });
        }
        
        // Update flow diagram based on processing steps
        function updateFlowDiagram(log) {
            if (!log || !log.processing_steps || log.processing_steps.length === 0) {
                return;
            }
            
            // Reset the diagram
            resetFlowDiagram();
            
            // Mark completed steps
            const completedSteps = new Set();
            log.processing_steps.forEach(step => {
                completedSteps.add(step.step);
            });
            
            // Update nodes based on completed steps
            if (completedSteps.has('stage_selection')) {
                document.getElementById('stage-selection-node').classList.add('completed');
            }
            
            if (completedSteps.has('data_extraction')) {
                document.getElementById('data-extraction-node').classList.add('completed');
            }
            
            if (completedSteps.has('response_generation')) {
                document.getElementById('response-generation-node').classList.add('completed');
            }
            
            // Mark the current active step (last step in the list)
            const lastStep = log.processing_steps[log.processing_steps.length - 1];
            const activeNodeId = `${lastStep.step}-node`;
            document.getElementById(activeNodeId).classList.add('active');
        }
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Disable send button until login
            document.getElementById('sendButton').disabled = true;
            
            // Set default API URL to localhost if opened from file://
            let defaultApiUrl;
            if (window.location.protocol === 'file:') {
                defaultApiUrl = 'http://localhost:5000/api';
                console.log('Detected file:// protocol, using default API URL:', defaultApiUrl);
                // Show warning about file:// protocol
                document.getElementById('fileProtocolWarning').style.display = 'block';
                
                // Add a button to open the page in a web server
                const buttonGroup = document.createElement('div');
                buttonGroup.className = 'button-group';
                buttonGroup.innerHTML = `
                    <button onclick="startLocalServer()">Start Local Server</button>
                    <button onclick="window.open('http://localhost:8000/llm_calls.html', '_blank')">Open in Browser</button>
                `;
                document.getElementById('fileProtocolWarning').appendChild(buttonGroup);
            } else {
                defaultApiUrl = window.location.origin + '/api';
                console.log('Using origin-based API URL:', defaultApiUrl);
            }
            
            document.getElementById('apiBaseUrl').value = defaultApiUrl;
            API_BASE_URL = defaultApiUrl;
            
            // Update API_BASE_URL when the input changes
            document.getElementById('apiBaseUrl').addEventListener('change', function() {
                API_BASE_URL = this.value.trim();
                console.log('API Base URL updated to:', API_BASE_URL);
            });
            
            // Add a note about the API URL
            const apiUrlNote = document.createElement('small');
            apiUrlNote.className = 'text-muted';
            apiUrlNote.innerHTML = 'Enter the full API URL (e.g., http://localhost:5000/api)';
            document.getElementById('apiBaseUrl').parentNode.appendChild(apiUrlNote);
        });
        
        // Function to start a local server
        function startLocalServer() {
            const instructions = `
                <strong>To start a local server:</strong>
                <ol>
                    <li>Open a terminal/command prompt</li>
                    <li>Navigate to the directory containing this file</li>
                    <li>Run one of these commands:</li>
                    <ul>
                        <li><code>python -m http.server 8000</code> (Python 3)</li>
                        <li><code>python -m SimpleHTTPServer 8000</code> (Python 2)</li>
                        <li><code>npx http-server -p 8000</code> (Node.js)</li>
                    </ul>
                    <li>Then open <a href="http://localhost:8000/llm_calls.html" target="_blank">http://localhost:8000/llm_calls.html</a> in your browser</li>
                </ol>
                <p><strong>Note:</strong> You need to keep the terminal window open while using the application.</p>
            `;
            
            showInfo(instructions);
        }
        
        function showInfo(message) {
            const statusArea = document.getElementById('statusArea');
            statusArea.innerHTML = `<div class="alert alert-info">${message}</div>`;
        }
    </script>
</body>
</html> 

