{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Paper, Typography, TextField, Button, Tabs, Tab, Grid, Alert, Snackbar, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, CircularProgress, Divider, Chip } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// TabPanel component for the tabs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `tabpanel-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      padding: '20px 0'\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nconst StageEditor = ({\n  stage,\n  onSave,\n  onCancel\n}) => {\n  _s();\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [tabValue, setTabValue] = useState(0);\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n\n  // Fetch all available templates on component mount\n  useEffect(() => {\n    fetchAllTemplates();\n  }, []);\n\n  // Update stage data when stage prop changes\n  useEffect(() => {\n    if (stage) {\n      setStageName(stage.stage_name || '');\n      setStageDescription(stage.stage_description || '');\n\n      // Set template IDs from stage\n      const templateIds = {\n        stage_selection: stage.stage_selection_template_id,\n        data_extraction: stage.data_extraction_template_id,\n        response_generation: stage.response_generation_template_id\n      };\n\n      // For each template ID, fetch the template content\n      Object.entries(templateIds).forEach(([type, id]) => {\n        if (id) {\n          fetchTemplate(id, type);\n        }\n      });\n    }\n  }, [stage]);\n  const fetchAllTemplates = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch all templates\n      const response = await fetch('/templates', {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch templates');\n      const data = await response.json();\n\n      // Organize templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: [],\n        default_stage_selection: [],\n        default_data_extraction: [],\n        default_response_generation: []\n      };\n      data.forEach(template => {\n        if (templatesByType[template.template_type]) {\n          templatesByType[template.template_type].push(template);\n        }\n      });\n      setAvailableTemplates(templatesByType);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch templates');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchTemplate = useCallback(async (templateId, type) => {\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\n      const data = await response.json();\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: data.template_id,\n          text: data.template_text,\n          type: data.template_type\n        }\n      }));\n\n      // Extract variables from template\n      setVariables(prev => ({\n        ...prev,\n        [type]: extractVariables(data.template_text)\n      }));\n    } catch (err) {\n      setError(err.message);\n    }\n  }, []);\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Fetch the selected template\n    await fetchTemplate(templateId, type);\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text,\n        type: type // Keep the original type, not the default type\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template for ${type}`);\n  };\n  const handlePreview = async type => {\n    try {\n      // Get the current template text for preview\n      const templateText = templates[type].text;\n      if (!templateText.trim()) {\n        setError('Template is empty. Nothing to preview.');\n        return;\n      }\n\n      // Prepare the preview request\n      const previewRequest = {\n        templates: {\n          [type]: templateText\n        },\n        context: {\n          conversation_history: [\"User: Hello, I need help.\", \"AI: How can I assist you today?\"],\n          message: \"I want to book a flight\",\n          stage_list: [\"Greeting\", \"Flight Booking\", \"Confirmation\"],\n          extracted_data: {\n            intent: \"flight_booking\"\n          }\n        }\n      };\n      const response = await fetch('/templates/preview', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(previewRequest)\n      });\n      if (!response.ok) throw new Error('Failed to generate preview');\n      const data = await response.json();\n      setPreviewData({\n        type,\n        result: data[type] || data.result || \"Preview not available\"\n      });\n\n      // Show success message with preview data\n      setSuccess(`Preview generated for ${type}`);\n      return data;\n    } catch (err) {\n      setError(err.message);\n      return null;\n    }\n  };\n  const handleSave = async () => {\n    if (!stage) return;\n    try {\n      // Validate stage name\n      if (!stageName.trim()) {\n        setError('Stage name is required');\n        return;\n      }\n\n      // Prepare updated stage data\n      const updatedStage = {\n        ...stage,\n        stage_name: stageName,\n        stage_description: stageDescription,\n        stage_selection_template_id: templates.stage_selection.id,\n        data_extraction_template_id: templates.data_extraction.id,\n        response_generation_template_id: templates.response_generation.id\n      };\n\n      // Call the save callback\n      await onSave(updatedStage);\n      setSuccess('Stage saved successfully');\n    } catch (err) {\n      setError(err.message || 'Failed to save stage');\n    }\n  };\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: onCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: stage !== null && stage !== void 0 && stage.stage_id ? 'Edit Stage' : 'Create Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setError(''),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setSuccess(''),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Stage Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Stage Name\",\n            value: stageName,\n            onChange: e => setStageName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Stage Description\",\n            value: stageDescription,\n            onChange: e => setStageDescription(e.target.value),\n            multiline: true,\n            rows: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        my: 3\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tabValue,\n        onChange: handleTabChange,\n        sx: {\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Stage Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Data Extraction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Response Generation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 0,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"stage-selection-template-label\",\n              children: \"Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"stage-selection-template-label\",\n              value: templates.stage_selection.id,\n              label: \"Template\",\n              onChange: e => handleTemplateSelect('stage_selection', e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 17\n              }, this), availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: template.template_name\n              }, template.template_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              gap: 1,\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 28\n              }, this),\n              onClick: () => handleApplyDefaultTemplate('stage_selection'),\n              disabled: availableTemplates.default_stage_selection.length === 0,\n              children: \"Apply Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 28\n              }, this),\n              onClick: () => handlePreview('stage_selection'),\n              disabled: !templates.stage_selection.text,\n              children: \"Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Variables are enclosed in curly braces like {user_name}\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), previewData && previewData.type === 'stage_selection' && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              children: \"Preview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                whiteSpace: 'pre-wrap'\n              },\n              children: previewData.result\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Template Text\",\n            value: templates.stage_selection.text,\n            onChange: e => handleTemplateChange('stage_selection', e.target.value),\n            multiline: true,\n            rows: 8,\n            placeholder: \"Enter template text with variables in {curly_braces}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), variables.stage_selection.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              children: \"Variables:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 1\n              },\n              children: variables.stage_selection.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                label: variable,\n                size: \"small\"\n              }, variable, false, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 1,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"data-extraction-template-label\",\n              children: \"Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"data-extraction-template-label\",\n              value: templates.data_extraction.id,\n              label: \"Template\",\n              onChange: e => handleTemplateSelect('data_extraction', e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 17\n              }, this), availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: template.template_name\n              }, template.template_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              gap: 1,\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 28\n              }, this),\n              onClick: () => handleApplyDefaultTemplate('data_extraction'),\n              disabled: availableTemplates.default_data_extraction.length === 0,\n              children: \"Apply Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 28\n              }, this),\n              onClick: () => handlePreview('data_extraction'),\n              disabled: !templates.data_extraction.text,\n              children: \"Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Variables are enclosed in curly braces like {user_name}\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), previewData && previewData.type === 'data_extraction' && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              children: \"Preview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                whiteSpace: 'pre-wrap'\n              },\n              children: previewData.result\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Template Text\",\n            value: templates.data_extraction.text,\n            onChange: e => handleTemplateChange('data_extraction', e.target.value),\n            multiline: true,\n            rows: 8,\n            placeholder: \"Enter template text with variables in {curly_braces}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this), variables.data_extraction.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              children: \"Variables:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 1\n              },\n              children: variables.data_extraction.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                label: variable,\n                size: \"small\"\n              }, variable, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 2,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"response-generation-template-label\",\n              children: \"Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"response-generation-template-label\",\n              value: templates.response_generation.id,\n              label: \"Template\",\n              onChange: e => handleTemplateSelect('response_generation', e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 566,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 17\n              }, this), availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: template.template_name\n              }, template.template_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              gap: 1,\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 579,\n                columnNumber: 28\n              }, this),\n              onClick: () => handleApplyDefaultTemplate('response_generation'),\n              disabled: availableTemplates.default_response_generation.length === 0,\n              children: \"Apply Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 28\n              }, this),\n              onClick: () => handlePreview('response_generation'),\n              disabled: !templates.response_generation.text,\n              children: \"Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"Variables are enclosed in curly braces like {user_name}\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this), previewData && previewData.type === 'response_generation' && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              children: \"Preview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                whiteSpace: 'pre-wrap'\n              },\n              children: previewData.result\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Template Text\",\n            value: templates.response_generation.text,\n            onChange: e => handleTemplateChange('response_generation', e.target.value),\n            multiline: true,\n            rows: 8,\n            placeholder: \"Enter template text with variables in {curly_braces}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 13\n          }, this), variables.response_generation.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              children: \"Variables:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 1\n              },\n              children: variables.response_generation.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                label: variable,\n                size: \"small\"\n              }, variable, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 22\n        }, this),\n        onClick: handleSave,\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 24\n        }, this) : 'Save Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n};\n_s(StageEditor, \"cuM+QsykIB7VYqYum3Vg3qNWCNw=\");\n_c2 = StageEditor;\nexport default StageEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"StageEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Paper","Typography","TextField","Button","Tabs","Tab","Grid","Alert","Snackbar","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","CircularProgress","Divider","Chip","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","ArrowBackIcon","jsxDEV","_jsxDEV","TabPanel","props","children","value","index","other","role","hidden","id","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","StageEditor","stage","onSave","onCancel","_s","stageName","setStageName","stageDescription","setStageDescription","tabValue","setTabValue","templates","setTemplates","stage_selection","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","isLoading","setIsLoading","previewData","setPreviewData","fetchAllTemplates","stage_name","stage_description","templateIds","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","Object","entries","forEach","fetchTemplate","response","fetch","credentials","ok","Error","data","json","templatesByType","template","template_type","push","err","message","templateId","prev","template_id","template_text","extractVariables","matches","match","map","slice","handleTemplateChange","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","handlePreview","templateText","trim","previewRequest","context","conversation_history","stage_list","extracted_data","intent","method","headers","body","JSON","stringify","result","handleSave","updatedStage","handleTabChange","event","newValue","sx","p","mb","display","alignItems","onClick","mr","variant","stage_id","severity","onClose","gutterBottom","container","spacing","item","xs","fullWidth","label","onChange","e","target","required","multiline","rows","my","labelId","template_name","gap","startIcon","disabled","title","whiteSpace","placeholder","mt","flexWrap","variable","size","justifyContent","_c2","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Divider,\r\n  Chip\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// TabPanel component for the tabs\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n      style={{ padding: '20px 0' }}\r\n    >\r\n      {value === index && (\r\n        <Box>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StageEditor = ({ stage, onSave, onCancel }) => {\r\n  const [stageName, setStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n\r\n  // Fetch all available templates on component mount\r\n  useEffect(() => {\r\n    fetchAllTemplates();\r\n  }, []);\r\n\r\n  // Update stage data when stage prop changes\r\n  useEffect(() => {\r\n    if (stage) {\r\n      setStageName(stage.stage_name || '');\r\n      setStageDescription(stage.stage_description || '');\r\n      \r\n      // Set template IDs from stage\r\n      const templateIds = {\r\n        stage_selection: stage.stage_selection_template_id,\r\n        data_extraction: stage.data_extraction_template_id,\r\n        response_generation: stage.response_generation_template_id\r\n      };\r\n\r\n      // For each template ID, fetch the template content\r\n      Object.entries(templateIds).forEach(([type, id]) => {\r\n        if (id) {\r\n          fetchTemplate(id, type);\r\n        }\r\n      });\r\n    }\r\n  }, [stage]);\r\n\r\n  const fetchAllTemplates = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch all templates\r\n      const response = await fetch('/templates', {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch templates');\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Organize templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: [],\r\n        default_stage_selection: [],\r\n        default_data_extraction: [],\r\n        default_response_generation: []\r\n      };\r\n      \r\n      data.forEach(template => {\r\n        if (templatesByType[template.template_type]) {\r\n          templatesByType[template.template_type].push(template);\r\n        }\r\n      });\r\n      \r\n      setAvailableTemplates(templatesByType);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch templates');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = useCallback(async (templateId, type) => {\r\n    try {\r\n      const response = await fetch(`/templates/${templateId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\r\n      \r\n      const data = await response.json();\r\n      \r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: {\r\n          id: data.template_id,\r\n          text: data.template_text,\r\n          type: data.template_type\r\n        }\r\n      }));\r\n      \r\n      // Extract variables from template\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: extractVariables(data.template_text)\r\n      }));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Fetch the selected template\r\n    await fetchTemplate(templateId, type);\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text,\r\n        type: type // Keep the original type, not the default type\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template for ${type}`);\r\n  };\r\n\r\n  const handlePreview = async (type) => {\r\n    try {\r\n      // Get the current template text for preview\r\n      const templateText = templates[type].text;\r\n      \r\n      if (!templateText.trim()) {\r\n        setError('Template is empty. Nothing to preview.');\r\n        return;\r\n      }\r\n      \r\n      // Prepare the preview request\r\n      const previewRequest = {\r\n        templates: {\r\n          [type]: templateText\r\n        },\r\n        context: {\r\n          conversation_history: [\"User: Hello, I need help.\", \"AI: How can I assist you today?\"],\r\n          message: \"I want to book a flight\",\r\n          stage_list: [\"Greeting\", \"Flight Booking\", \"Confirmation\"],\r\n          extracted_data: { intent: \"flight_booking\" }\r\n        }\r\n      };\r\n      \r\n      const response = await fetch('/templates/preview', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(previewRequest),\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to generate preview');\r\n      \r\n      const data = await response.json();\r\n      setPreviewData({\r\n        type,\r\n        result: data[type] || data.result || \"Preview not available\"\r\n      });\r\n      \r\n      // Show success message with preview data\r\n      setSuccess(`Preview generated for ${type}`);\r\n      \r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!stage) return;\r\n    \r\n    try {\r\n      // Validate stage name\r\n      if (!stageName.trim()) {\r\n        setError('Stage name is required');\r\n        return;\r\n      }\r\n      \r\n      // Prepare updated stage data\r\n      const updatedStage = {\r\n        ...stage,\r\n        stage_name: stageName,\r\n        stage_description: stageDescription,\r\n        stage_selection_template_id: templates.stage_selection.id,\r\n        data_extraction_template_id: templates.data_extraction.id,\r\n        response_generation_template_id: templates.response_generation.id\r\n      };\r\n      \r\n      // Call the save callback\r\n      await onSave(updatedStage);\r\n      \r\n      setSuccess('Stage saved successfully');\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to save stage');\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3 }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={onCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {stage?.stage_id ? 'Edit Stage' : 'Create Stage'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Basic stage information */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Stage Information\r\n        </Typography>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Stage Name\"\r\n              value={stageName}\r\n              onChange={(e) => setStageName(e.target.value)}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Stage Description\"\r\n              value={stageDescription}\r\n              onChange={(e) => setStageDescription(e.target.value)}\r\n              multiline\r\n              rows={2}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      \r\n      <Divider sx={{ my: 3 }} />\r\n      \r\n      {/* Template editing section */}\r\n      <Box>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Templates\r\n        </Typography>\r\n        \r\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n          <Tab label=\"Stage Selection\" />\r\n          <Tab label=\"Data Extraction\" />\r\n          <Tab label=\"Response Generation\" />\r\n        </Tabs>\r\n        \r\n        {/* Stage Selection Template */}\r\n        <TabPanel value={tabValue} index={0}>\r\n          <Box sx={{ mb: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <InputLabel id=\"stage-selection-template-label\">Template</InputLabel>\r\n              <Select\r\n                labelId=\"stage-selection-template-label\"\r\n                value={templates.stage_selection.id}\r\n                label=\"Template\"\r\n                onChange={(e) => handleTemplateSelect('stage_selection', e.target.value)}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {availableTemplates.stage_selection.map((template) => (\r\n                  <MenuItem key={template.template_id} value={template.template_id}>\r\n                    {template.template_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<RestartAltIcon />}\r\n                onClick={() => handleApplyDefaultTemplate('stage_selection')}\r\n                disabled={availableTemplates.default_stage_selection.length === 0}\r\n              >\r\n                Apply Default\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<PreviewIcon />}\r\n                onClick={() => handlePreview('stage_selection')}\r\n                disabled={!templates.stage_selection.text}\r\n              >\r\n                Preview\r\n              </Button>\r\n              <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                <IconButton>\r\n                  <HelpOutlineIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            \r\n            {previewData && previewData.type === 'stage_selection' && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                  {previewData.result}\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n            \r\n            <TextField\r\n              fullWidth\r\n              label=\"Template Text\"\r\n              value={templates.stage_selection.text}\r\n              onChange={(e) => handleTemplateChange('stage_selection', e.target.value)}\r\n              multiline\r\n              rows={8}\r\n              placeholder=\"Enter template text with variables in {curly_braces}\"\r\n            />\r\n            \r\n            {variables.stage_selection.length > 0 && (\r\n              <Box sx={{ mt: 2 }}>\r\n                <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                  {variables.stage_selection.map((variable) => (\r\n                    <Chip key={variable} label={variable} size=\"small\" />\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </TabPanel>\r\n        \r\n        {/* Data Extraction Template */}\r\n        <TabPanel value={tabValue} index={1}>\r\n          <Box sx={{ mb: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <InputLabel id=\"data-extraction-template-label\">Template</InputLabel>\r\n              <Select\r\n                labelId=\"data-extraction-template-label\"\r\n                value={templates.data_extraction.id}\r\n                label=\"Template\"\r\n                onChange={(e) => handleTemplateSelect('data_extraction', e.target.value)}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {availableTemplates.data_extraction.map((template) => (\r\n                  <MenuItem key={template.template_id} value={template.template_id}>\r\n                    {template.template_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<RestartAltIcon />}\r\n                onClick={() => handleApplyDefaultTemplate('data_extraction')}\r\n                disabled={availableTemplates.default_data_extraction.length === 0}\r\n              >\r\n                Apply Default\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<PreviewIcon />}\r\n                onClick={() => handlePreview('data_extraction')}\r\n                disabled={!templates.data_extraction.text}\r\n              >\r\n                Preview\r\n              </Button>\r\n              <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                <IconButton>\r\n                  <HelpOutlineIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            \r\n            {previewData && previewData.type === 'data_extraction' && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                  {previewData.result}\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n            \r\n            <TextField\r\n              fullWidth\r\n              label=\"Template Text\"\r\n              value={templates.data_extraction.text}\r\n              onChange={(e) => handleTemplateChange('data_extraction', e.target.value)}\r\n              multiline\r\n              rows={8}\r\n              placeholder=\"Enter template text with variables in {curly_braces}\"\r\n            />\r\n            \r\n            {variables.data_extraction.length > 0 && (\r\n              <Box sx={{ mt: 2 }}>\r\n                <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                  {variables.data_extraction.map((variable) => (\r\n                    <Chip key={variable} label={variable} size=\"small\" />\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </TabPanel>\r\n        \r\n        {/* Response Generation Template */}\r\n        <TabPanel value={tabValue} index={2}>\r\n          <Box sx={{ mb: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <InputLabel id=\"response-generation-template-label\">Template</InputLabel>\r\n              <Select\r\n                labelId=\"response-generation-template-label\"\r\n                value={templates.response_generation.id}\r\n                label=\"Template\"\r\n                onChange={(e) => handleTemplateSelect('response_generation', e.target.value)}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {availableTemplates.response_generation.map((template) => (\r\n                  <MenuItem key={template.template_id} value={template.template_id}>\r\n                    {template.template_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<RestartAltIcon />}\r\n                onClick={() => handleApplyDefaultTemplate('response_generation')}\r\n                disabled={availableTemplates.default_response_generation.length === 0}\r\n              >\r\n                Apply Default\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<PreviewIcon />}\r\n                onClick={() => handlePreview('response_generation')}\r\n                disabled={!templates.response_generation.text}\r\n              >\r\n                Preview\r\n              </Button>\r\n              <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                <IconButton>\r\n                  <HelpOutlineIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            \r\n            {previewData && previewData.type === 'response_generation' && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                  {previewData.result}\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n            \r\n            <TextField\r\n              fullWidth\r\n              label=\"Template Text\"\r\n              value={templates.response_generation.text}\r\n              onChange={(e) => handleTemplateChange('response_generation', e.target.value)}\r\n              multiline\r\n              rows={8}\r\n              placeholder=\"Enter template text with variables in {curly_braces}\"\r\n            />\r\n            \r\n            {variables.response_generation.length > 0 && (\r\n              <Box sx={{ mt: 2 }}>\r\n                <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                  {variables.response_generation.map((variable) => (\r\n                    <Chip key={variable} label={variable} size=\"small\" />\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </TabPanel>\r\n      </Box>\r\n      \r\n      {/* Save button */}\r\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={onCancel}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<SaveIcon />}\r\n          onClick={handleSave}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? <CircularProgress size={24} /> : 'Save Stage'}\r\n        </Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StageEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}