{"ast":null,"code":"// API Test Utility\n// This file contains functions to test API connectivity and authentication\n\nimport { getStoredCredentials } from './fetchUtils';\n\n/**\r\n * Test API key authentication\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\nexport const testApiKeyAuth = async (businessId, apiKey) => {\n  console.log('Testing API key authentication...');\n  try {\n    // Test with different header formats\n    const headerFormats = [{\n      'Authorization': `Bearer ${apiKey}`\n    }, {\n      'X-API-Key': apiKey\n    }, {\n      'API-Key': apiKey\n    }, {\n      'Authorization': apiKey\n    }];\n    const results = [];\n    for (const headers of headerFormats) {\n      try {\n        console.log(`Testing with headers:`, headers);\n\n        // Use GET request instead of POST for validate-credentials\n        const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            ...headers\n          },\n          credentials: 'include'\n        });\n        const status = response.status;\n        const data = await response.json().catch(() => ({}));\n        results.push({\n          headers,\n          status,\n          data,\n          success: response.ok\n        });\n        console.log(`Test result:`, {\n          headers,\n          status,\n          data\n        });\n      } catch (err) {\n        results.push({\n          headers,\n          error: err.message,\n          success: false\n        });\n        console.error(`Test error:`, err);\n      }\n    }\n    return {\n      success: results.some(r => r.success),\n      results\n    };\n  } catch (err) {\n    console.error('API key test error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Test template operations\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\nexport const testTemplateOperations = async (businessId, apiKey) => {\n  console.log('Testing template operations...');\n  try {\n    // Test fetching templates\n    const fetchResult = await testFetchTemplates(businessId, apiKey);\n\n    // Test creating a template\n    const createResult = await testCreateTemplate(businessId, apiKey);\n    return {\n      success: fetchResult.success && createResult.success,\n      fetchResult,\n      createResult\n    };\n  } catch (err) {\n    console.error('Template operations test error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Test fetching templates\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\nconst testFetchTemplates = async (businessId, apiKey) => {\n  console.log('Testing fetching templates...');\n  try {\n    // Send a POST request with JSON body instead of GET\n    const response = await fetch('/templates', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        business_id: businessId\n      }),\n      credentials: 'include'\n    });\n    const status = response.status;\n    const data = await response.json().catch(() => ({}));\n    console.log('Fetch templates result:', {\n      status,\n      data\n    });\n    return {\n      success: response.ok,\n      status,\n      data\n    };\n  } catch (err) {\n    console.error('Fetch templates error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Test creating a template\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\nconst testCreateTemplate = async (businessId, apiKey) => {\n  console.log('Testing creating a template...');\n  try {\n    const templateData = {\n      template_name: `Test Template ${Date.now()}`,\n      template_text: 'This is a test template with {variable1} and {variable2}.',\n      template_type: 'test_template',\n      business_id: businessId,\n      variables: ['variable1', 'variable2'],\n      template_description: 'A test template for API testing'\n    };\n    const response = await fetch('/templates/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      credentials: 'include',\n      body: JSON.stringify(templateData)\n    });\n    const status = response.status;\n    const data = await response.json().catch(() => ({}));\n    console.log('Create template result:', {\n      status,\n      data\n    });\n    return {\n      success: response.ok,\n      status,\n      data\n    };\n  } catch (err) {\n    console.error('Create template error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Run all API tests\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test results\r\n */\nexport const runAllApiTests = async (businessId, apiKey) => {\n  console.log('Running all API tests...');\n  try {\n    // If businessId or apiKey is not provided, try to get them from stored credentials\n    if (!businessId || !apiKey) {\n      const storedCredentials = getStoredCredentials();\n      businessId = businessId || storedCredentials.businessId;\n      apiKey = apiKey || storedCredentials.businessApiKey;\n      if (!businessId || !apiKey) {\n        return {\n          success: false,\n          error: 'Business ID and API Key are required'\n        };\n      }\n    }\n    const authResult = await testApiKeyAuth(businessId, apiKey);\n    const templateResult = await testTemplateOperations(businessId, apiKey);\n    return {\n      success: authResult.success && templateResult.success,\n      authResult,\n      templateResult\n    };\n  } catch (err) {\n    console.error('API tests error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};","map":{"version":3,"names":["getStoredCredentials","testApiKeyAuth","businessId","apiKey","console","log","headerFormats","results","headers","response","fetch","method","credentials","status","data","json","catch","push","success","ok","err","error","message","some","r","testTemplateOperations","fetchResult","testFetchTemplates","createResult","testCreateTemplate","body","JSON","stringify","business_id","templateData","template_name","Date","now","template_text","template_type","variables","template_description","runAllApiTests","storedCredentials","businessApiKey","authResult","templateResult"],"sources":["C:/icmp_events_api/front-end/src/utils/apiTest.js"],"sourcesContent":["// API Test Utility\r\n// This file contains functions to test API connectivity and authentication\r\n\r\nimport { getStoredCredentials } from './fetchUtils';\r\n\r\n/**\r\n * Test API key authentication\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nexport const testApiKeyAuth = async (businessId, apiKey) => {\r\n  console.log('Testing API key authentication...');\r\n  \r\n  try {\r\n    // Test with different header formats\r\n    const headerFormats = [\r\n      { 'Authorization': `Bearer ${apiKey}` },\r\n      { 'X-API-Key': apiKey },\r\n      { 'API-Key': apiKey },\r\n      { 'Authorization': apiKey }\r\n    ];\r\n    \r\n    const results = [];\r\n    \r\n    for (const headers of headerFormats) {\r\n      try {\r\n        console.log(`Testing with headers:`, headers);\r\n        \r\n        // Use GET request instead of POST for validate-credentials\r\n        const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            ...headers\r\n          },\r\n          credentials: 'include'\r\n        });\r\n        \r\n        const status = response.status;\r\n        const data = await response.json().catch(() => ({}));\r\n        \r\n        results.push({\r\n          headers,\r\n          status,\r\n          data,\r\n          success: response.ok\r\n        });\r\n        \r\n        console.log(`Test result:`, { headers, status, data });\r\n      } catch (err) {\r\n        results.push({\r\n          headers,\r\n          error: err.message,\r\n          success: false\r\n        });\r\n        console.error(`Test error:`, err);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      success: results.some(r => r.success),\r\n      results\r\n    };\r\n  } catch (err) {\r\n    console.error('API key test error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test template operations\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nexport const testTemplateOperations = async (businessId, apiKey) => {\r\n  console.log('Testing template operations...');\r\n  \r\n  try {\r\n    // Test fetching templates\r\n    const fetchResult = await testFetchTemplates(businessId, apiKey);\r\n    \r\n    // Test creating a template\r\n    const createResult = await testCreateTemplate(businessId, apiKey);\r\n    \r\n    return {\r\n      success: fetchResult.success && createResult.success,\r\n      fetchResult,\r\n      createResult\r\n    };\r\n  } catch (err) {\r\n    console.error('Template operations test error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test fetching templates\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nconst testFetchTemplates = async (businessId, apiKey) => {\r\n  console.log('Testing fetching templates...');\r\n  \r\n  try {\r\n    // Send a POST request with JSON body instead of GET\r\n    const response = await fetch('/templates', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': `Bearer ${apiKey}`\r\n      },\r\n      body: JSON.stringify({ business_id: businessId }),\r\n      credentials: 'include'\r\n    });\r\n    \r\n    const status = response.status;\r\n    const data = await response.json().catch(() => ({}));\r\n    \r\n    console.log('Fetch templates result:', { status, data });\r\n    \r\n    return {\r\n      success: response.ok,\r\n      status,\r\n      data\r\n    };\r\n  } catch (err) {\r\n    console.error('Fetch templates error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test creating a template\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nconst testCreateTemplate = async (businessId, apiKey) => {\r\n  console.log('Testing creating a template...');\r\n  \r\n  try {\r\n    const templateData = {\r\n      template_name: `Test Template ${Date.now()}`,\r\n      template_text: 'This is a test template with {variable1} and {variable2}.',\r\n      template_type: 'test_template',\r\n      business_id: businessId,\r\n      variables: ['variable1', 'variable2'],\r\n      template_description: 'A test template for API testing'\r\n    };\r\n    \r\n    const response = await fetch('/templates/', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': `Bearer ${apiKey}`\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify(templateData)\r\n    });\r\n    \r\n    const status = response.status;\r\n    const data = await response.json().catch(() => ({}));\r\n    \r\n    console.log('Create template result:', { status, data });\r\n    \r\n    return {\r\n      success: response.ok,\r\n      status,\r\n      data\r\n    };\r\n  } catch (err) {\r\n    console.error('Create template error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Run all API tests\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test results\r\n */\r\nexport const runAllApiTests = async (businessId, apiKey) => {\r\n  console.log('Running all API tests...');\r\n  \r\n  try {\r\n    // If businessId or apiKey is not provided, try to get them from stored credentials\r\n    if (!businessId || !apiKey) {\r\n      const storedCredentials = getStoredCredentials();\r\n      businessId = businessId || storedCredentials.businessId;\r\n      apiKey = apiKey || storedCredentials.businessApiKey;\r\n      \r\n      if (!businessId || !apiKey) {\r\n        return {\r\n          success: false,\r\n          error: 'Business ID and API Key are required'\r\n        };\r\n      }\r\n    }\r\n    \r\n    const authResult = await testApiKeyAuth(businessId, apiKey);\r\n    const templateResult = await testTemplateOperations(businessId, apiKey);\r\n    \r\n    return {\r\n      success: authResult.success && templateResult.success,\r\n      authResult,\r\n      templateResult\r\n    };\r\n  } catch (err) {\r\n    console.error('API tests error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}