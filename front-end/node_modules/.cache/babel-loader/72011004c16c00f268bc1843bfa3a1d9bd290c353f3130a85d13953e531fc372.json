{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n// Assuming a stageService.js file will export fetchStageDetails\n// We might need to create/update this service file later\nimport { fetchStageDetails as fetchStageDetailsApi } from '../services/stageService';\n\n// This hook takes the stageId to fetch details for\nconst useStageDetails = (stageId, handleSnackbarOpen) => {\n  _s();\n  const [stageDetails, setStageDetails] = useState(null); // Initialize as null\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchDetails = useCallback(async () => {\n    // Only fetch if a stage ID is provided\n    if (!stageId) {\n      setStageDetails(null); // Clear details if no stageId\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    console.log(`Fetching details for stage ID: ${stageId}`);\n    try {\n      // API key relies on httpOnly cookie\n      const data = await fetchStageDetailsApi(stageId);\n      console.log(\"Fetched stage details:\", data);\n      setStageDetails(data); // Store the fetched object\n      // Optional: Snackbar notification\n      // if (handleSnackbarOpen) {\n      //      handleSnackbarOpen(\"Stage details loaded!\", \"info\");\n      // }\n    } catch (err) {\n      console.error(\"Error fetching stage details:\", err);\n      const errorMessage = err.message || 'Failed to fetch stage details';\n      setError(errorMessage);\n      setStageDetails(null); // Clear details on error\n      if (handleSnackbarOpen) {\n        handleSnackbarOpen(`Error fetching stage details: ${errorMessage}`, \"error\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [stageId, handleSnackbarOpen]); // Depend on stageId\n\n  // useEffect to trigger fetch when stageId changes\n  useEffect(() => {\n    fetchDetails();\n  }, [fetchDetails]);\n  return {\n    stageDetails,\n    // The stage detail object (or null)\n    isLoading,\n    // Boolean indicating if fetch is in progress\n    error,\n    // Error object/message if fetch failed\n    refreshDetails: fetchDetails // Function to manually trigger a refresh\n  };\n};\n_s(useStageDetails, \"G2nTXEk79Y8J17WW3YXnD71B1A8=\");\nexport default useStageDetails;","map":{"version":3,"names":["useState","useEffect","useCallback","fetchStageDetails","fetchStageDetailsApi","useStageDetails","stageId","handleSnackbarOpen","_s","stageDetails","setStageDetails","isLoading","setIsLoading","error","setError","fetchDetails","console","log","data","err","errorMessage","message","refreshDetails"],"sources":["C:/icmp_events_api/front-end/src/hooks/useStageDetails.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n// Assuming a stageService.js file will export fetchStageDetails\r\n// We might need to create/update this service file later\r\nimport { fetchStageDetails as fetchStageDetailsApi } from '../services/stageService';\r\n\r\n// This hook takes the stageId to fetch details for\r\nconst useStageDetails = (stageId, handleSnackbarOpen) => {\r\n    const [stageDetails, setStageDetails] = useState(null); // Initialize as null\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchDetails = useCallback(async () => {\r\n        // Only fetch if a stage ID is provided\r\n        if (!stageId) {\r\n            setStageDetails(null); // Clear details if no stageId\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n        console.log(`Fetching details for stage ID: ${stageId}`);\r\n\r\n        try {\r\n            // API key relies on httpOnly cookie\r\n            const data = await fetchStageDetailsApi(stageId);\r\n            console.log(\"Fetched stage details:\", data);\r\n            setStageDetails(data); // Store the fetched object\r\n            // Optional: Snackbar notification\r\n            // if (handleSnackbarOpen) {\r\n            //      handleSnackbarOpen(\"Stage details loaded!\", \"info\");\r\n            // }\r\n        } catch (err) {\r\n            console.error(\"Error fetching stage details:\", err);\r\n            const errorMessage = err.message || 'Failed to fetch stage details';\r\n            setError(errorMessage);\r\n            setStageDetails(null); // Clear details on error\r\n             if (handleSnackbarOpen) {\r\n                handleSnackbarOpen(`Error fetching stage details: ${errorMessage}`, \"error\");\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [stageId, handleSnackbarOpen]); // Depend on stageId\r\n\r\n    // useEffect to trigger fetch when stageId changes\r\n    useEffect(() => {\r\n        fetchDetails();\r\n    }, [fetchDetails]);\r\n\r\n    return {\r\n        stageDetails,    // The stage detail object (or null)\r\n        isLoading,       // Boolean indicating if fetch is in progress\r\n        error,           // Error object/message if fetch failed\r\n        refreshDetails: fetchDetails // Function to manually trigger a refresh\r\n    };\r\n};\r\n\r\nexport default useStageDetails;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD;AACA;AACA,SAASC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;;AAEpF;AACA,MAAMC,eAAe,GAAGA,CAACC,OAAO,EAAEC,kBAAkB,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,YAAY,GAAGb,WAAW,CAAC,YAAY;IACzC;IACA,IAAI,CAACI,OAAO,EAAE;MACVI,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB;IACJ;IAEAE,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACdE,OAAO,CAACC,GAAG,CAAC,kCAAkCX,OAAO,EAAE,CAAC;IAExD,IAAI;MACA;MACA,MAAMY,IAAI,GAAG,MAAMd,oBAAoB,CAACE,OAAO,CAAC;MAChDU,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,IAAI,CAAC;MAC3CR,eAAe,CAACQ,IAAI,CAAC,CAAC,CAAC;MACvB;MACA;MACA;MACA;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVH,OAAO,CAACH,KAAK,CAAC,+BAA+B,EAAEM,GAAG,CAAC;MACnD,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,+BAA+B;MACnEP,QAAQ,CAACM,YAAY,CAAC;MACtBV,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;MACtB,IAAIH,kBAAkB,EAAE;QACrBA,kBAAkB,CAAC,iCAAiCa,YAAY,EAAE,EAAE,OAAO,CAAC;MAChF;IACJ,CAAC,SAAS;MACNR,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACN,OAAO,EAAEC,kBAAkB,CAAC,CAAC,CAAC,CAAC;;EAEnC;EACAN,SAAS,CAAC,MAAM;IACZc,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,OAAO;IACHN,YAAY;IAAK;IACjBE,SAAS;IAAQ;IACjBE,KAAK;IAAY;IACjBS,cAAc,EAAEP,YAAY,CAAC;EACjC,CAAC;AACL,CAAC;AAACP,EAAA,CAjDIH,eAAe;AAmDrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}