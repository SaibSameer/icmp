{"ast":null,"code":"import { API_CONFIG } from '../config';\nimport { getAuthHeaders } from '../services/authService';\n\n// Helper to handle API responses (can be moved to a shared api.js)\nconst handleApiResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({})); // Try to parse error, fallback\n    throw new Error(errorData.message || errorData.error || `HTTP error ${response.status}`);\n  }\n  // Handle 204 No Content\n  if (response.status === 204) {\n    return null;\n  }\n  return response.json();\n};\n\n// Fetch business details by ID\nexport const getBusiness = async businessId => {\n  console.log(`[Service] Fetching business details for ID: ${businessId}`);\n  const response = await fetch(`${API_CONFIG.BASE_URL}/businesses/${businessId}`, {\n    method: 'GET',\n    credentials: 'include',\n    // Send cookies\n    headers: getAuthHeaders()\n  });\n  return handleApiResponse(response);\n};\n\n// Update business details\nexport const updateBusiness = async (businessId, businessData) => {\n  console.log(`[Service] Updating business ${businessId} with:`, businessData);\n  const response = await fetch(`${API_CONFIG.BASE_URL}/businesses/${businessId}`, {\n    method: 'PUT',\n    credentials: 'include',\n    headers: getAuthHeaders(),\n    body: JSON.stringify(businessData)\n  });\n  return handleApiResponse(response);\n};\n\n// Set the default starting stage for a business\nexport const setDefaultStage = async (businessId, stageId) => {\n  console.log(`[Service] Setting default stage for business ${businessId} to: ${stageId}`);\n  const response = await fetch(`${API_CONFIG.BASE_URL}/businesses/${businessId}/default-stage`, {\n    method: 'PUT',\n    credentials: 'include',\n    headers: getAuthHeaders(),\n    body: JSON.stringify({\n      stage_id: stageId\n    }) // Send stage_id in the body\n  });\n  return handleApiResponse(response);\n};","map":{"version":3,"names":["API_CONFIG","getAuthHeaders","handleApiResponse","response","ok","errorData","json","catch","Error","message","error","status","getBusiness","businessId","console","log","fetch","BASE_URL","method","credentials","headers","updateBusiness","businessData","body","JSON","stringify","setDefaultStage","stageId","stage_id"],"sources":["C:/icmp_events_api/front-end/src/services/businessService.js"],"sourcesContent":["import { API_CONFIG } from '../config';\r\nimport { getAuthHeaders } from '../services/authService';\r\n\r\n// Helper to handle API responses (can be moved to a shared api.js)\r\nconst handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({})); // Try to parse error, fallback\r\n    throw new Error(errorData.message || errorData.error || `HTTP error ${response.status}`);\r\n  }\r\n  // Handle 204 No Content\r\n  if (response.status === 204) {\r\n      return null; \r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Fetch business details by ID\r\nexport const getBusiness = async (businessId) => {\r\n  console.log(`[Service] Fetching business details for ID: ${businessId}`);\r\n  const response = await fetch(`${API_CONFIG.BASE_URL}/businesses/${businessId}`, {\r\n    method: 'GET',\r\n    credentials: 'include', // Send cookies\r\n    headers: getAuthHeaders()\r\n  });\r\n  return handleApiResponse(response);\r\n};\r\n\r\n// Update business details\r\nexport const updateBusiness = async (businessId, businessData) => {\r\n  console.log(`[Service] Updating business ${businessId} with:`, businessData);\r\n  const response = await fetch(`${API_CONFIG.BASE_URL}/businesses/${businessId}`, {\r\n    method: 'PUT',\r\n    credentials: 'include',\r\n    headers: getAuthHeaders(),\r\n    body: JSON.stringify(businessData),\r\n  });\r\n  return handleApiResponse(response);\r\n};\r\n\r\n// Set the default starting stage for a business\r\nexport const setDefaultStage = async (businessId, stageId) => {\r\n  console.log(`[Service] Setting default stage for business ${businessId} to: ${stageId}`);\r\n  const response = await fetch(`${API_CONFIG.BASE_URL}/businesses/${businessId}/default-stage`, {\r\n    method: 'PUT',\r\n    credentials: 'include',\r\n    headers: getAuthHeaders(),\r\n    body: JSON.stringify({ stage_id: stageId }), // Send stage_id in the body\r\n  });\r\n  return handleApiResponse(response);\r\n};"],"mappings":"AAAA,SAASA,UAAU,QAAQ,WAAW;AACtC,SAASC,cAAc,QAAQ,yBAAyB;;AAExD;AACA,MAAMC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,OAAO,IAAIJ,SAAS,CAACK,KAAK,IAAI,cAAcP,QAAQ,CAACQ,MAAM,EAAE,CAAC;EAC1F;EACA;EACA,IAAIR,QAAQ,CAACQ,MAAM,KAAK,GAAG,EAAE;IACzB,OAAO,IAAI;EACf;EACA,OAAOR,QAAQ,CAACG,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMM,WAAW,GAAG,MAAOC,UAAU,IAAK;EAC/CC,OAAO,CAACC,GAAG,CAAC,+CAA+CF,UAAU,EAAE,CAAC;EACxE,MAAMV,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGhB,UAAU,CAACiB,QAAQ,eAAeJ,UAAU,EAAE,EAAE;IAC9EK,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,SAAS;IAAE;IACxBC,OAAO,EAAEnB,cAAc,CAAC;EAC1B,CAAC,CAAC;EACF,OAAOC,iBAAiB,CAACC,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAMkB,cAAc,GAAG,MAAAA,CAAOR,UAAU,EAAES,YAAY,KAAK;EAChER,OAAO,CAACC,GAAG,CAAC,+BAA+BF,UAAU,QAAQ,EAAES,YAAY,CAAC;EAC5E,MAAMnB,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGhB,UAAU,CAACiB,QAAQ,eAAeJ,UAAU,EAAE,EAAE;IAC9EK,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAEnB,cAAc,CAAC,CAAC;IACzBsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,YAAY;EACnC,CAAC,CAAC;EACF,OAAOpB,iBAAiB,CAACC,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAMuB,eAAe,GAAG,MAAAA,CAAOb,UAAU,EAAEc,OAAO,KAAK;EAC5Db,OAAO,CAACC,GAAG,CAAC,gDAAgDF,UAAU,QAAQc,OAAO,EAAE,CAAC;EACxF,MAAMxB,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGhB,UAAU,CAACiB,QAAQ,eAAeJ,UAAU,gBAAgB,EAAE;IAC5FK,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAEnB,cAAc,CAAC,CAAC;IACzBsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEG,QAAQ,EAAED;IAAQ,CAAC,CAAC,CAAE;EAC/C,CAAC,CAAC;EACF,OAAOzB,iBAAiB,CAACC,QAAQ,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}