{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Container, Typography, Paper, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, CircularProgress, Grid, Box, IconButton, Divider, Alert, Snackbar, List, ListItem, ListItemText, ListItemSecondaryAction, Tooltip, FormControl, InputLabel, MenuItem, Select, Card, CardContent, FormHelperText } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport SaveIcon from '@mui/icons-material/Save';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { fetchStages, createStage, updateStage, deleteStage } from '../services/stageService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StageManager = () => {\n  _s();\n  // Get parameters from URL and location\n  const {\n    businessId: paramBusinessId,\n    agentId: paramAgentId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract query parameters if not using path params\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Use params or query params, then fallback to localStorage\n  const businessId = paramBusinessId || queryBusinessId || localStorage.getItem('businessId');\n  const agentId = paramAgentId || queryAgentId || localStorage.getItem('agentId');\n\n  // States for stages and templates\n  const [stages, setStages] = useState([]);\n  const [selectedStage, setSelectedStage] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [openDialog, setOpenDialog] = useState(false);\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\n  const [stageToDelete, setStageToDelete] = useState(null);\n  const [newStageName, setNewStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [stageType, setStageType] = useState('conversation');\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [selectedTemplates, setSelectedTemplates] = useState({\n    stage_selection: '',\n    data_extraction: '',\n    response_generation: ''\n  });\n  const [defaultTemplates, setDefaultTemplates] = useState({\n    stage_selection: '',\n    data_extraction: '',\n    response_generation: ''\n  });\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  const [agentName, setAgentName] = useState('');\n\n  // Store current values in localStorage for persistence\n  useEffect(() => {\n    if (businessId) {\n      localStorage.setItem('businessId', businessId);\n    }\n    if (agentId) {\n      localStorage.setItem('agentId', agentId);\n    }\n  }, [businessId, agentId]);\n\n  // Logging for debugging\n  useEffect(() => {\n    console.log(\"StageManager - Current params:\", {\n      paramBusinessId,\n      paramAgentId,\n      queryBusinessId,\n      queryAgentId,\n      resolvedBusinessId: businessId,\n      resolvedAgentId: agentId\n    });\n  }, [paramBusinessId, paramAgentId, queryBusinessId, queryAgentId, businessId, agentId]);\n\n  // Fetch templates for dropdowns\n  const fetchTemplates = useCallback(async () => {\n    if (!businessId) {\n      console.error(\"No business ID available for fetching templates\");\n      return;\n    }\n    try {\n      console.log(\"Fetching templates for business:\", businessId);\n      const response = await fetch(`/templates?business_id=${businessId}`, {\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('businessApiKey')}`\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch templates');\n      }\n      const templates = await response.json();\n      console.log(\"Raw templates from API:\", templates);\n\n      // Group templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: []\n      };\n      const defaultTemplateIds = {\n        stage_selection: '',\n        data_extraction: '',\n        response_generation: ''\n      };\n\n      // Process all template types\n      const processedTemplates = [];\n\n      // First pass - identify all templates\n      templates.forEach(template => {\n        // Make sure template has required fields\n        if (!template.template_id || !template.template_type) {\n          console.warn(\"Template missing required fields:\", template);\n          return;\n        }\n\n        // Create a normalized version for our UI\n        const processedTemplate = {\n          ...template,\n          template_id: template.template_id,\n          template_name: template.template_name || `Template ${template.template_id.slice(0, 8)}`,\n          content: template.content || template.template_text || '',\n          system_prompt: template.system_prompt || '',\n          template_type: template.template_type || 'unknown',\n          is_default: template.template_type.startsWith('default_')\n        };\n        processedTemplates.push(processedTemplate);\n      });\n      console.log(\"Processed templates:\", processedTemplates);\n\n      // Second pass - categorize templates and identify defaults\n      processedTemplates.forEach(template => {\n        // Determine which category this template belongs to\n        let category = null;\n        if (template.template_type === 'default_stage_selection' || template.template_type === 'stage_selection') {\n          category = 'stage_selection';\n\n          // If it's a default template, store its ID\n          if (template.template_type === 'default_stage_selection' && !defaultTemplateIds.stage_selection) {\n            defaultTemplateIds.stage_selection = template.template_id;\n          }\n        } else if (template.template_type === 'default_data_extraction' || template.template_type === 'data_extraction') {\n          category = 'data_extraction';\n\n          // If it's a default template, store its ID\n          if (template.template_type === 'default_data_extraction' && !defaultTemplateIds.data_extraction) {\n            defaultTemplateIds.data_extraction = template.template_id;\n          }\n        } else if (template.template_type === 'default_response_generation' || template.template_type === 'response_generation') {\n          category = 'response_generation';\n\n          // If it's a default template, store its ID\n          if (template.template_type === 'default_response_generation' && !defaultTemplateIds.response_generation) {\n            defaultTemplateIds.response_generation = template.template_id;\n          }\n        }\n\n        // Add to appropriate category\n        if (category && templatesByType[category]) {\n          templatesByType[category].push(template);\n        }\n      });\n      console.log(\"Templates by type:\", templatesByType);\n      console.log(\"Default template IDs:\", defaultTemplateIds);\n\n      // Sort templates: defaults first, then alphabetically by name\n      for (const category in templatesByType) {\n        templatesByType[category].sort((a, b) => {\n          // Default templates come first\n          if (a.is_default && !b.is_default) return -1;\n          if (!a.is_default && b.is_default) return 1;\n\n          // Alphabetical sort by name\n          return a.template_name.localeCompare(b.template_name);\n        });\n      }\n      setAvailableTemplates(templatesByType);\n      setDefaultTemplates(defaultTemplateIds);\n\n      // Set initial selected templates to defaults\n      setSelectedTemplates({\n        stage_selection: defaultTemplateIds.stage_selection || '',\n        data_extraction: defaultTemplateIds.data_extraction || '',\n        response_generation: defaultTemplateIds.response_generation || ''\n      });\n    } catch (err) {\n      console.error(\"Error fetching templates:\", err);\n      showSnackbar(err.message, 'error');\n    }\n  }, [businessId]);\n\n  // Fetch stages based on business ID and agent ID\n  const fetchStagesData = useCallback(async () => {\n    if (!businessId) {\n      console.error(\"No business ID available for fetching stages\");\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log(\"Fetching stages for business:\", businessId);\n      const stagesData = await fetchStages(businessId);\n      console.log(\"Fetched stages:\", stagesData);\n      setStages(stagesData);\n    } catch (err) {\n      console.error(\"Error fetching stages:\", err);\n      showSnackbar(err.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [businessId]);\n\n  // Fetch agent details\n  const fetchAgentDetails = useCallback(async () => {\n    if (!businessId || !agentId) {\n      return;\n    }\n    try {\n      const response = await fetch(`/agents/${agentId}?business_id=${businessId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch agent details');\n      }\n      const agentData = await response.json();\n      setAgentName(agentData.agent_name || `Agent ${agentId}`);\n    } catch (err) {\n      console.error(\"Error fetching agent details:\", err);\n      setAgentName(`Agent ${agentId}`); // Fallback\n    }\n  }, [businessId, agentId]);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchTemplates();\n    fetchStagesData();\n  }, [fetchTemplates, fetchStagesData]);\n\n  // Update useEffect to fetch agent details\n  useEffect(() => {\n    if (agentId) {\n      fetchAgentDetails();\n    }\n  }, [agentId, fetchAgentDetails]);\n\n  // Helper function for showing snackbar messages\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar({\n      ...snackbar,\n      open: false\n    });\n  };\n  const handleNavigateToHome = () => {\n    navigate('/business');\n  };\n  const handleOpenNewStageDialog = () => {\n    console.log(\"Opening new stage dialog with default templates:\", {\n      defaultTemplates,\n      availableTemplates\n    });\n\n    // Check if default templates exist\n    if (!defaultTemplates.stage_selection || !defaultTemplates.data_extraction || !defaultTemplates.response_generation) {\n      console.warn(\"Some default templates are missing:\", defaultTemplates);\n\n      // Try to find default templates manually\n      const manualDefaultTemplates = {\n        stage_selection: '',\n        data_extraction: '',\n        response_generation: ''\n      };\n\n      // Loop through all templates and try to find ones with default_ prefix\n      for (const type in availableTemplates) {\n        const templates = availableTemplates[type];\n        for (const template of templates) {\n          // Check if this is a default template\n          if (template.template_type && template.template_type.startsWith('default_')) {\n            console.log(`Found default template for ${type}:`, template);\n            manualDefaultTemplates[type] = template.template_id;\n          }\n        }\n      }\n      console.log(\"Manually determined default templates:\", manualDefaultTemplates);\n\n      // Use the manual defaults if found\n      if (manualDefaultTemplates.stage_selection || manualDefaultTemplates.data_extraction || manualDefaultTemplates.response_generation) {\n        setSelectedTemplates({\n          stage_selection: manualDefaultTemplates.stage_selection || defaultTemplates.stage_selection,\n          data_extraction: manualDefaultTemplates.data_extraction || defaultTemplates.data_extraction,\n          response_generation: manualDefaultTemplates.response_generation || defaultTemplates.response_generation\n        });\n      } else {\n        // If still not found, just use empty values\n        setSelectedTemplates({\n          stage_selection: defaultTemplates.stage_selection || '',\n          data_extraction: defaultTemplates.data_extraction || '',\n          response_generation: defaultTemplates.response_generation || ''\n        });\n      }\n    } else {\n      // Normal flow if default templates exist\n      setSelectedTemplates({\n        stage_selection: defaultTemplates.stage_selection,\n        data_extraction: defaultTemplates.data_extraction,\n        response_generation: defaultTemplates.response_generation\n      });\n    }\n    setNewStageName('');\n    setStageDescription('');\n    setStageType('conversation');\n    setOpenDialog(true);\n  };\n  const handleCreateStage = async () => {\n    try {\n      if (!newStageName.trim()) {\n        showSnackbar('Stage name is required', 'error');\n        return;\n      }\n\n      // First, create copies of the selected templates\n      const newTemplateIds = {};\n      for (const templateType of ['stage_selection', 'data_extraction', 'response_generation']) {\n        const originalTemplateId = selectedTemplates[templateType];\n        if (!originalTemplateId) {\n          console.log(`No template selected for ${templateType}, skipping`);\n          continue;\n        }\n\n        // Try to find the template in all categories\n        let originalTemplate = null;\n        const templatesInCategory = availableTemplates[templateType];\n        console.log(`Looking for template ID ${originalTemplateId} in ${templateType} category with ${templatesInCategory.length} templates`);\n\n        // Log all templates in this category for debugging\n        templatesInCategory.forEach(t => {\n          console.log(`-- Template option: ${t.template_id} - ${t.template_name} - Type: ${t.template_type}`);\n        });\n        originalTemplate = templatesInCategory.find(t => t.template_id === originalTemplateId);\n        if (!originalTemplate) {\n          console.warn(`Template not found: ${originalTemplateId} in ${templateType} category`);\n          continue;\n        }\n        console.log(`Found template for ${templateType}: ${originalTemplate.template_id} - ${originalTemplate.template_name}`);\n        try {\n          // Create a copy of the template\n          const response = await fetch('/templates', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify({\n              template_name: `${newStageName} - ${templateType.replace('_', ' ')}`,\n              content: originalTemplate.content || originalTemplate.template_text,\n              system_prompt: originalTemplate.system_prompt || '',\n              template_type: templateType,\n              business_id: businessId,\n              template_description: originalTemplate.template_description || ''\n            })\n          });\n          if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'Failed to create template copy');\n          }\n          const newTemplate = await response.json();\n          newTemplateIds[templateType] = newTemplate.template_id;\n        } catch (err) {\n          console.error(`Error copying template for ${templateType}:`, err);\n          showSnackbar(`Failed to copy ${templateType} template: ${err.message}`, 'error');\n          return;\n        }\n      }\n      const stageData = {\n        stage_name: newStageName,\n        stage_description: stageDescription,\n        stage_type: stageType,\n        business_id: businessId,\n        stage_selection_template_id: newTemplateIds.stage_selection || selectedTemplates.stage_selection,\n        data_extraction_template_id: newTemplateIds.data_extraction || selectedTemplates.data_extraction,\n        response_generation_template_id: newTemplateIds.response_generation || selectedTemplates.response_generation,\n        stage_config: {\n          order: stages.length + 1\n        }\n      };\n\n      // Add agent_id only if it exists\n      if (agentId) {\n        stageData.agent_id = agentId;\n      }\n      console.log(\"Creating stage with data:\", stageData);\n      const newStage = await createStage(stageData);\n      await fetchStagesData();\n      setOpenDialog(false);\n      showSnackbar('Stage created successfully', 'success');\n\n      // Navigate to the stage view instead of editor\n      if (newStage && newStage.stage_id) {\n        navigateToStageView(newStage.stage_id);\n      }\n    } catch (err) {\n      console.error(\"Error creating stage:\", err);\n      showSnackbar(err.message, 'error');\n    }\n  };\n  const navigateToStageView = stageId => {\n    // Construct the URL with query parameters\n    let url = `/stages/${stageId}?business_id=${businessId}`;\n    if (agentId) {\n      url += `&agent_id=${agentId}`;\n    }\n    navigate(url);\n  };\n  const handleDeleteStage = async () => {\n    if (!stageToDelete || !businessId) return;\n    try {\n      await deleteStage(stageToDelete, businessId);\n      await fetchStagesData();\n      setOpenDeleteDialog(false);\n      showSnackbar('Stage deleted successfully', 'success');\n    } catch (err) {\n      console.error(\"Error deleting stage:\", err);\n      showSnackbar(err.message, 'error');\n    }\n  };\n  const handleMoveStage = async (stageId, direction) => {\n    try {\n      const currentIndex = stages.findIndex(s => s.stage_id === stageId);\n      if (currentIndex === -1) return;\n\n      // If trying to move first item up or last item down, do nothing\n      if (currentIndex === 0 && direction === 'up' || currentIndex === stages.length - 1 && direction === 'down') {\n        return;\n      }\n      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\n\n      // Swap the order values in the stage_config\n      const updatedStages = [...stages];\n      const currentStage = {\n        ...updatedStages[currentIndex]\n      };\n      const targetStage = {\n        ...updatedStages[targetIndex]\n      };\n\n      // Update stage_config.order values\n      currentStage.stage_config = {\n        ...currentStage.stage_config,\n        order: targetIndex + 1\n      };\n      targetStage.stage_config = {\n        ...targetStage.stage_config,\n        order: currentIndex + 1\n      };\n\n      // Update both stages in the database\n      const currentUpdate = fetch(`/stages/${currentStage.stage_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(currentStage)\n      });\n      const targetUpdate = fetch(`/stages/${targetStage.stage_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(targetStage)\n      });\n      await Promise.all([currentUpdate, targetUpdate]);\n\n      // Refresh stages\n      await fetchStagesData();\n      showSnackbar('Stage order updated', 'success');\n    } catch (err) {\n      showSnackbar(err.message, 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleNavigateToHome,\n          sx: {\n            mr: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h1\",\n          gutterBottom: true,\n          sx: {\n            flexGrow: 1\n          },\n          children: [\"Stage Manager\", businessId && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            component: \"span\",\n            color: \"text.secondary\",\n            children: [` - Business ID: ${businessId}`, agentId && ` - Agent: ${agentName || agentId}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 24\n          }, this),\n          onClick: handleOpenNewStageDialog,\n          sx: {\n            mr: 1\n          },\n          children: \"Create Stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 24\n          }, this),\n          onClick: () => navigate('/templates'),\n          children: \"Manage Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        onClose: () => setError(''),\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mb: 2\n        },\n        onClose: () => setSuccess(''),\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 11\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          p: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: stages.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"No stages found. Create your first stage to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(List, {\n          sx: {\n            bgcolor: 'background.paper'\n          },\n          children: [...stages].sort((a, b) => {\n            var _a$stage_config, _b$stage_config;\n            return (((_a$stage_config = a.stage_config) === null || _a$stage_config === void 0 ? void 0 : _a$stage_config.order) || Infinity) - (((_b$stage_config = b.stage_config) === null || _b$stage_config === void 0 ? void 0 : _b$stage_config.order) || Infinity);\n          }).map(stage => /*#__PURE__*/_jsxDEV(ListItem, {\n            sx: {\n              mb: 1,\n              bgcolor: 'background.paper'\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: stage.stage_name,\n              secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"span\",\n                  variant: \"body2\",\n                  color: \"text.primary\",\n                  children: stage.stage_description || 'No description'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 645,\n                  columnNumber: 27\n                }, this), stage.stage_config && stage.stage_config.order && ` • Order: ${stage.stage_config.order}`]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Move Up\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"move-up\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleMoveStage(stage.stage_id, 'up');\n                  },\n                  disabled: stages.indexOf(stage) === 0,\n                  children: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 664,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 655,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Move Down\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"move-down\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleMoveStage(stage.stage_id, 'down');\n                  },\n                  disabled: stages.indexOf(stage) === stages.length - 1,\n                  children: /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 677,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 668,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"View Stage\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"view\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    navigateToStageView(stage.stage_id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 689,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 681,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 680,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Delete Stage\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"delete\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    setStageToDelete(stage);\n                    setOpenDeleteDialog(true);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 702,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 693,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 21\n            }, this)]\n          }, stage.stage_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: () => setOpenDialog(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Create New Stage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [console.log(\"Dialog rendering with state:\", {\n            selectedTemplates,\n            availableTemplates,\n            defaultTemplates,\n            templatesInfo: {\n              stageSelectionCount: availableTemplates.stage_selection.length,\n              dataExtractionCount: availableTemplates.data_extraction.length,\n              responseGenerationCount: availableTemplates.response_generation.length\n            }\n          }), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: newStageName,\n              onChange: e => setNewStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              multiline: true,\n              rows: 2,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Stage Selection Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              value: selectedTemplates.stage_selection,\n              onChange: e => setSelectedTemplates({\n                ...selectedTemplates,\n                stage_selection: e.target.value\n              }),\n              children: availableTemplates.stage_selection.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"No templates available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 772,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 19\n              }, this) : availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name, \" (\", template.template_type, \")\"]\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Template for determining if this stage should handle the message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 782,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Data Extraction Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              value: selectedTemplates.data_extraction,\n              onChange: e => setSelectedTemplates({\n                ...selectedTemplates,\n                data_extraction: e.target.value\n              }),\n              children: availableTemplates.data_extraction.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"No templates available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 798,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 797,\n                columnNumber: 19\n              }, this) : availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name, \" (\", template.template_type, \")\"]\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Template for extracting data from the message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Response Generation Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              value: selectedTemplates.response_generation,\n              onChange: e => setSelectedTemplates({\n                ...selectedTemplates,\n                response_generation: e.target.value\n              }),\n              children: availableTemplates.response_generation.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"No templates available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 824,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 19\n              }, this) : availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name, \" (\", template.template_type, \")\"]\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 828,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 814,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Template for generating responses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCreateStage,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !newStageName.trim(),\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 24\n          }, this),\n          children: \"Create & Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDeleteDialog,\n      onClose: () => setOpenDeleteDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Confirm Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Are you sure you want to delete the stage \\\"\", stageToDelete === null || stageToDelete === void 0 ? void 0 : stageToDelete.stage_name, \"\\\"? This action cannot be undone.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDeleteDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDeleteStage,\n          variant: \"contained\",\n          color: \"error\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: snackbar.severity,\n        onClose: handleCloseSnackbar,\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 877,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 573,\n    columnNumber: 5\n  }, this);\n};\n_s(StageManager, \"HvlZ11oNlnOr9STiE0NtPsxvPkQ=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = StageManager;\nexport default StageManager;\nvar _c;\n$RefreshReg$(_c, \"StageManager\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Container","Typography","Paper","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","CircularProgress","Grid","Box","IconButton","Divider","Alert","Snackbar","List","ListItem","ListItemText","ListItemSecondaryAction","Tooltip","FormControl","InputLabel","MenuItem","Select","Card","CardContent","FormHelperText","AddIcon","DeleteIcon","ArrowUpwardIcon","ArrowDownwardIcon","ArrowBackIcon","SaveIcon","DescriptionIcon","VisibilityIcon","fetchStages","createStage","updateStage","deleteStage","jsxDEV","_jsxDEV","Fragment","_Fragment","StageManager","_s","businessId","paramBusinessId","agentId","paramAgentId","location","navigate","queryParams","URLSearchParams","search","queryBusinessId","get","queryAgentId","localStorage","getItem","stages","setStages","selectedStage","setSelectedStage","isLoading","setIsLoading","error","setError","success","setSuccess","openDialog","setOpenDialog","openDeleteDialog","setOpenDeleteDialog","stageToDelete","setStageToDelete","newStageName","setNewStageName","stageDescription","setStageDescription","stageType","setStageType","availableTemplates","setAvailableTemplates","stage_selection","data_extraction","response_generation","selectedTemplates","setSelectedTemplates","defaultTemplates","setDefaultTemplates","snackbar","setSnackbar","open","message","severity","agentName","setAgentName","setItem","console","log","resolvedBusinessId","resolvedAgentId","fetchTemplates","response","fetch","credentials","headers","ok","errorData","json","Error","templates","templatesByType","defaultTemplateIds","processedTemplates","forEach","template","template_id","template_type","warn","processedTemplate","template_name","slice","content","template_text","system_prompt","is_default","startsWith","push","category","sort","a","b","localeCompare","err","showSnackbar","fetchStagesData","stagesData","fetchAgentDetails","agentData","agent_name","handleCloseSnackbar","handleNavigateToHome","handleOpenNewStageDialog","manualDefaultTemplates","type","handleCreateStage","trim","newTemplateIds","templateType","originalTemplateId","originalTemplate","templatesInCategory","length","t","find","method","body","JSON","stringify","replace","business_id","template_description","newTemplate","stageData","stage_name","stage_description","stage_type","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","stage_config","order","agent_id","newStage","stage_id","navigateToStageView","stageId","url","handleDeleteStage","handleMoveStage","direction","currentIndex","findIndex","s","targetIndex","updatedStages","currentStage","targetStage","currentUpdate","targetUpdate","Promise","all","maxWidth","sx","mt","mb","children","p","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","gutterBottom","flexGrow","color","startIcon","onClose","justifyContent","bgcolor","_a$stage_config","_b$stage_config","Infinity","map","stage","primary","secondary","title","edge","e","stopPropagation","disabled","indexOf","fullWidth","container","spacing","templatesInfo","stageSelectionCount","dataExtractionCount","responseGenerationCount","item","xs","label","value","onChange","target","required","multiline","rows","autoHideDuration","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageManager.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  CircularProgress,\r\n  Grid,\r\n  Box,\r\n  IconButton,\r\n  Divider,\r\n  Alert,\r\n  Snackbar,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport { fetchStages, createStage, updateStage, deleteStage } from '../services/stageService';\r\n\r\nconst StageManager = () => {\r\n  // Get parameters from URL and location\r\n  const { businessId: paramBusinessId, agentId: paramAgentId } = useParams();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  \r\n  // Extract query parameters if not using path params\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  const queryAgentId = queryParams.get('agent_id');\r\n  \r\n  // Use params or query params, then fallback to localStorage\r\n  const businessId = paramBusinessId || queryBusinessId || localStorage.getItem('businessId');\r\n  const agentId = paramAgentId || queryAgentId || localStorage.getItem('agentId');\r\n  \r\n  // States for stages and templates\r\n  const [stages, setStages] = useState([]);\r\n  const [selectedStage, setSelectedStage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n  const [stageToDelete, setStageToDelete] = useState(null);\r\n  const [newStageName, setNewStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [stageType, setStageType] = useState('conversation');\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [selectedTemplates, setSelectedTemplates] = useState({\r\n    stage_selection: '',\r\n    data_extraction: '',\r\n    response_generation: ''\r\n  });\r\n  const [defaultTemplates, setDefaultTemplates] = useState({\r\n    stage_selection: '',\r\n    data_extraction: '',\r\n    response_generation: ''\r\n  });\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  const [agentName, setAgentName] = useState('');\r\n\r\n  // Store current values in localStorage for persistence\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      localStorage.setItem('businessId', businessId);\r\n    }\r\n    if (agentId) {\r\n      localStorage.setItem('agentId', agentId);\r\n    }\r\n  }, [businessId, agentId]);\r\n\r\n  // Logging for debugging\r\n  useEffect(() => {\r\n    console.log(\"StageManager - Current params:\", { \r\n      paramBusinessId, \r\n      paramAgentId,\r\n      queryBusinessId,\r\n      queryAgentId,\r\n      resolvedBusinessId: businessId,\r\n      resolvedAgentId: agentId\r\n    });\r\n  }, [\r\n    paramBusinessId, \r\n    paramAgentId, \r\n    queryBusinessId, \r\n    queryAgentId, \r\n    businessId, \r\n    agentId\r\n  ]);\r\n\r\n  // Fetch templates for dropdowns\r\n  const fetchTemplates = useCallback(async () => {\r\n    if (!businessId) {\r\n      console.error(\"No business ID available for fetching templates\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log(\"Fetching templates for business:\", businessId);\r\n      \r\n      const response = await fetch(`/templates?business_id=${businessId}`, {\r\n        credentials: 'include',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('businessApiKey')}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch templates');\r\n      }\r\n      \r\n      const templates = await response.json();\r\n      console.log(\"Raw templates from API:\", templates);\r\n      \r\n      // Group templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: []\r\n      };\r\n      \r\n      const defaultTemplateIds = {\r\n        stage_selection: '',\r\n        data_extraction: '',\r\n        response_generation: ''\r\n      };\r\n      \r\n      // Process all template types\r\n      const processedTemplates = [];\r\n      \r\n      // First pass - identify all templates\r\n      templates.forEach(template => {\r\n        // Make sure template has required fields\r\n        if (!template.template_id || !template.template_type) {\r\n          console.warn(\"Template missing required fields:\", template);\r\n          return;\r\n        }\r\n        \r\n        // Create a normalized version for our UI\r\n        const processedTemplate = {\r\n          ...template,\r\n          template_id: template.template_id,\r\n          template_name: template.template_name || `Template ${template.template_id.slice(0, 8)}`,\r\n          content: template.content || template.template_text || '',\r\n          system_prompt: template.system_prompt || '',\r\n          template_type: template.template_type || 'unknown',\r\n          is_default: template.template_type.startsWith('default_')\r\n        };\r\n        \r\n        processedTemplates.push(processedTemplate);\r\n      });\r\n      \r\n      console.log(\"Processed templates:\", processedTemplates);\r\n      \r\n      // Second pass - categorize templates and identify defaults\r\n      processedTemplates.forEach(template => {\r\n        // Determine which category this template belongs to\r\n        let category = null;\r\n        \r\n        if (template.template_type === 'default_stage_selection' || \r\n            template.template_type === 'stage_selection') {\r\n          category = 'stage_selection';\r\n          \r\n          // If it's a default template, store its ID\r\n          if (template.template_type === 'default_stage_selection' && !defaultTemplateIds.stage_selection) {\r\n            defaultTemplateIds.stage_selection = template.template_id;\r\n          }\r\n        }\r\n        else if (template.template_type === 'default_data_extraction' || \r\n                 template.template_type === 'data_extraction') {\r\n          category = 'data_extraction';\r\n          \r\n          // If it's a default template, store its ID\r\n          if (template.template_type === 'default_data_extraction' && !defaultTemplateIds.data_extraction) {\r\n            defaultTemplateIds.data_extraction = template.template_id;\r\n          }\r\n        }\r\n        else if (template.template_type === 'default_response_generation' || \r\n                 template.template_type === 'response_generation') {\r\n          category = 'response_generation';\r\n          \r\n          // If it's a default template, store its ID\r\n          if (template.template_type === 'default_response_generation' && !defaultTemplateIds.response_generation) {\r\n            defaultTemplateIds.response_generation = template.template_id;\r\n          }\r\n        }\r\n        \r\n        // Add to appropriate category\r\n        if (category && templatesByType[category]) {\r\n          templatesByType[category].push(template);\r\n        }\r\n      });\r\n      \r\n      console.log(\"Templates by type:\", templatesByType);\r\n      console.log(\"Default template IDs:\", defaultTemplateIds);\r\n      \r\n      // Sort templates: defaults first, then alphabetically by name\r\n      for (const category in templatesByType) {\r\n        templatesByType[category].sort((a, b) => {\r\n          // Default templates come first\r\n          if (a.is_default && !b.is_default) return -1;\r\n          if (!a.is_default && b.is_default) return 1;\r\n          \r\n          // Alphabetical sort by name\r\n          return a.template_name.localeCompare(b.template_name);\r\n        });\r\n      }\r\n      \r\n      setAvailableTemplates(templatesByType);\r\n      setDefaultTemplates(defaultTemplateIds);\r\n      \r\n      // Set initial selected templates to defaults\r\n      setSelectedTemplates({\r\n        stage_selection: defaultTemplateIds.stage_selection || '',\r\n        data_extraction: defaultTemplateIds.data_extraction || '',\r\n        response_generation: defaultTemplateIds.response_generation || ''\r\n      });\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error fetching templates:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  }, [businessId]);\r\n\r\n  // Fetch stages based on business ID and agent ID\r\n  const fetchStagesData = useCallback(async () => {\r\n    if (!businessId) {\r\n      console.error(\"No business ID available for fetching stages\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      console.log(\"Fetching stages for business:\", businessId);\r\n      const stagesData = await fetchStages(businessId);\r\n      console.log(\"Fetched stages:\", stagesData);\r\n      setStages(stagesData);\r\n    } catch (err) {\r\n      console.error(\"Error fetching stages:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [businessId]);\r\n\r\n  // Fetch agent details\r\n  const fetchAgentDetails = useCallback(async () => {\r\n    if (!businessId || !agentId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/agents/${agentId}?business_id=${businessId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch agent details');\r\n      }\r\n      \r\n      const agentData = await response.json();\r\n      setAgentName(agentData.agent_name || `Agent ${agentId}`);\r\n    } catch (err) {\r\n      console.error(\"Error fetching agent details:\", err);\r\n      setAgentName(`Agent ${agentId}`); // Fallback\r\n    }\r\n  }, [businessId, agentId]);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchTemplates();\r\n    fetchStagesData();\r\n  }, [fetchTemplates, fetchStagesData]);\r\n\r\n  // Update useEffect to fetch agent details\r\n  useEffect(() => {\r\n    if (agentId) {\r\n      fetchAgentDetails();\r\n    }\r\n  }, [agentId, fetchAgentDetails]);\r\n\r\n  // Helper function for showing snackbar messages\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({\r\n      ...snackbar,\r\n      open: false\r\n    });\r\n  };\r\n\r\n  const handleNavigateToHome = () => {\r\n    navigate('/business');\r\n  };\r\n\r\n  const handleOpenNewStageDialog = () => {\r\n    console.log(\"Opening new stage dialog with default templates:\", {\r\n      defaultTemplates,\r\n      availableTemplates\r\n    });\r\n    \r\n    // Check if default templates exist\r\n    if (!defaultTemplates.stage_selection || !defaultTemplates.data_extraction || !defaultTemplates.response_generation) {\r\n      console.warn(\"Some default templates are missing:\", defaultTemplates);\r\n      \r\n      // Try to find default templates manually\r\n      const manualDefaultTemplates = {\r\n        stage_selection: '',\r\n        data_extraction: '',\r\n        response_generation: ''\r\n      };\r\n      \r\n      // Loop through all templates and try to find ones with default_ prefix\r\n      for (const type in availableTemplates) {\r\n        const templates = availableTemplates[type];\r\n        for (const template of templates) {\r\n          // Check if this is a default template\r\n          if (template.template_type && template.template_type.startsWith('default_')) {\r\n            console.log(`Found default template for ${type}:`, template);\r\n            manualDefaultTemplates[type] = template.template_id;\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log(\"Manually determined default templates:\", manualDefaultTemplates);\r\n      \r\n      // Use the manual defaults if found\r\n      if (manualDefaultTemplates.stage_selection || manualDefaultTemplates.data_extraction || manualDefaultTemplates.response_generation) {\r\n        setSelectedTemplates({\r\n          stage_selection: manualDefaultTemplates.stage_selection || defaultTemplates.stage_selection,\r\n          data_extraction: manualDefaultTemplates.data_extraction || defaultTemplates.data_extraction,\r\n          response_generation: manualDefaultTemplates.response_generation || defaultTemplates.response_generation\r\n        });\r\n      } else {\r\n        // If still not found, just use empty values\r\n        setSelectedTemplates({\r\n          stage_selection: defaultTemplates.stage_selection || '',\r\n          data_extraction: defaultTemplates.data_extraction || '',\r\n          response_generation: defaultTemplates.response_generation || ''\r\n        });\r\n      }\r\n    } else {\r\n      // Normal flow if default templates exist\r\n      setSelectedTemplates({\r\n        stage_selection: defaultTemplates.stage_selection,\r\n        data_extraction: defaultTemplates.data_extraction,\r\n        response_generation: defaultTemplates.response_generation\r\n      });\r\n    }\r\n    \r\n    setNewStageName('');\r\n    setStageDescription('');\r\n    setStageType('conversation');\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCreateStage = async () => {\r\n    try {\r\n      if (!newStageName.trim()) {\r\n        showSnackbar('Stage name is required', 'error');\r\n        return;\r\n      }\r\n\r\n      // First, create copies of the selected templates\r\n      const newTemplateIds = {};\r\n      \r\n      for (const templateType of ['stage_selection', 'data_extraction', 'response_generation']) {\r\n        const originalTemplateId = selectedTemplates[templateType];\r\n        if (!originalTemplateId) {\r\n          console.log(`No template selected for ${templateType}, skipping`);\r\n          continue;\r\n        }\r\n\r\n        // Try to find the template in all categories\r\n        let originalTemplate = null;\r\n        const templatesInCategory = availableTemplates[templateType];\r\n        \r\n        console.log(`Looking for template ID ${originalTemplateId} in ${templateType} category with ${templatesInCategory.length} templates`);\r\n        \r\n        // Log all templates in this category for debugging\r\n        templatesInCategory.forEach(t => {\r\n          console.log(`-- Template option: ${t.template_id} - ${t.template_name} - Type: ${t.template_type}`);\r\n        });\r\n        \r\n        originalTemplate = templatesInCategory.find(t => t.template_id === originalTemplateId);\r\n        \r\n        if (!originalTemplate) {\r\n          console.warn(`Template not found: ${originalTemplateId} in ${templateType} category`);\r\n          continue;\r\n        }\r\n        \r\n        console.log(`Found template for ${templateType}: ${originalTemplate.template_id} - ${originalTemplate.template_name}`);\r\n\r\n        try {\r\n          // Create a copy of the template\r\n          const response = await fetch('/templates', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n              template_name: `${newStageName} - ${templateType.replace('_', ' ')}`,\r\n              content: originalTemplate.content || originalTemplate.template_text,\r\n              system_prompt: originalTemplate.system_prompt || '',\r\n              template_type: templateType,\r\n              business_id: businessId,\r\n              template_description: originalTemplate.template_description || ''\r\n            }),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.error || 'Failed to create template copy');\r\n          }\r\n\r\n          const newTemplate = await response.json();\r\n          newTemplateIds[templateType] = newTemplate.template_id;\r\n        } catch (err) {\r\n          console.error(`Error copying template for ${templateType}:`, err);\r\n          showSnackbar(`Failed to copy ${templateType} template: ${err.message}`, 'error');\r\n          return;\r\n        }\r\n      }\r\n\r\n      const stageData = {\r\n        stage_name: newStageName,\r\n        stage_description: stageDescription,\r\n        stage_type: stageType,\r\n        business_id: businessId,\r\n        stage_selection_template_id: newTemplateIds.stage_selection || selectedTemplates.stage_selection,\r\n        data_extraction_template_id: newTemplateIds.data_extraction || selectedTemplates.data_extraction,\r\n        response_generation_template_id: newTemplateIds.response_generation || selectedTemplates.response_generation,\r\n        stage_config: { order: stages.length + 1 }\r\n      };\r\n      \r\n      // Add agent_id only if it exists\r\n      if (agentId) {\r\n        stageData.agent_id = agentId;\r\n      }\r\n      \r\n      console.log(\"Creating stage with data:\", stageData);\r\n      \r\n      const newStage = await createStage(stageData);\r\n      await fetchStagesData();\r\n      setOpenDialog(false);\r\n      showSnackbar('Stage created successfully', 'success');\r\n\r\n      // Navigate to the stage view instead of editor\r\n      if (newStage && newStage.stage_id) {\r\n        navigateToStageView(newStage.stage_id);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error creating stage:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  const navigateToStageView = (stageId) => {\r\n    // Construct the URL with query parameters\r\n    let url = `/stages/${stageId}?business_id=${businessId}`;\r\n    if (agentId) {\r\n      url += `&agent_id=${agentId}`;\r\n    }\r\n    navigate(url);\r\n  };\r\n\r\n  const handleDeleteStage = async () => {\r\n    if (!stageToDelete || !businessId) return;\r\n\r\n    try {\r\n      await deleteStage(stageToDelete, businessId);\r\n      await fetchStagesData();\r\n      setOpenDeleteDialog(false);\r\n      showSnackbar('Stage deleted successfully', 'success');\r\n    } catch (err) {\r\n      console.error(\"Error deleting stage:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  const handleMoveStage = async (stageId, direction) => {\r\n    try {\r\n      const currentIndex = stages.findIndex(s => s.stage_id === stageId);\r\n      if (currentIndex === -1) return;\r\n      \r\n      // If trying to move first item up or last item down, do nothing\r\n      if ((currentIndex === 0 && direction === 'up') || \r\n          (currentIndex === stages.length - 1 && direction === 'down')) {\r\n        return;\r\n      }\r\n      \r\n      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\r\n      \r\n      // Swap the order values in the stage_config\r\n      const updatedStages = [...stages];\r\n      const currentStage = { ...updatedStages[currentIndex] };\r\n      const targetStage = { ...updatedStages[targetIndex] };\r\n      \r\n      // Update stage_config.order values\r\n      currentStage.stage_config = { ...currentStage.stage_config, order: targetIndex + 1 };\r\n      targetStage.stage_config = { ...targetStage.stage_config, order: currentIndex + 1 };\r\n      \r\n      // Update both stages in the database\r\n      const currentUpdate = fetch(`/stages/${currentStage.stage_id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(currentStage),\r\n      });\r\n      \r\n      const targetUpdate = fetch(`/stages/${targetStage.stage_id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(targetStage),\r\n      });\r\n      \r\n      await Promise.all([currentUpdate, targetUpdate]);\r\n      \r\n      // Refresh stages\r\n      await fetchStagesData();\r\n      showSnackbar('Stage order updated', 'success');\r\n    } catch (err) {\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n          <IconButton onClick={handleNavigateToHome} sx={{ mr: 1 }}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" component=\"h1\" gutterBottom sx={{ flexGrow: 1 }}>\r\n            Stage Manager\r\n            {businessId && <Typography variant=\"subtitle1\" component=\"span\" color=\"text.secondary\">\r\n              {` - Business ID: ${businessId}`}\r\n              {agentId && ` - Agent: ${agentName || agentId}`}\r\n            </Typography>}\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleOpenNewStageDialog}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            Create Stage\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            startIcon={<DescriptionIcon />}\r\n            onClick={() => navigate('/templates')}\r\n          >\r\n            Manage Templates\r\n          </Button>\r\n        </Box>\r\n        \r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n        \r\n        {isLoading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            {stages.length === 0 ? (\r\n              <Alert severity=\"info\">\r\n                No stages found. Create your first stage to get started.\r\n              </Alert>\r\n            ) : (\r\n              <List sx={{ bgcolor: 'background.paper' }}>\r\n                {[...stages].sort((a, b) => \r\n                  (a.stage_config?.order || Infinity) - (b.stage_config?.order || Infinity)\r\n                ).map((stage) => (\r\n                  <ListItem \r\n                    key={stage.stage_id}\r\n                    sx={{ \r\n                      mb: 1,\r\n                      bgcolor: 'background.paper'\r\n                    }}\r\n                  >\r\n                    <ListItemText\r\n                      primary={stage.stage_name}\r\n                      secondary={\r\n                        <>\r\n                          <Typography component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                            {stage.stage_description || 'No description'}\r\n                          </Typography>\r\n                          {stage.stage_config && stage.stage_config.order && \r\n                            ` • Order: ${stage.stage_config.order}`}\r\n                        </>\r\n                      }\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Tooltip title=\"Move Up\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"move-up\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleMoveStage(stage.stage_id, 'up');\r\n                          }}\r\n                          disabled={stages.indexOf(stage) === 0}\r\n                        >\r\n                          <ArrowUpwardIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Move Down\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"move-down\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleMoveStage(stage.stage_id, 'down');\r\n                          }}\r\n                          disabled={stages.indexOf(stage) === stages.length - 1}\r\n                        >\r\n                          <ArrowDownwardIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"View Stage\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"view\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            navigateToStageView(stage.stage_id);\r\n                          }}\r\n                        >\r\n                          <VisibilityIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Delete Stage\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"delete\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            setStageToDelete(stage);\r\n                            setOpenDeleteDialog(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            )}\r\n          </>\r\n        )}\r\n      </Paper>\r\n      \r\n      {/* Create Stage Dialog */}\r\n      <Dialog \r\n        open={openDialog} \r\n        onClose={() => setOpenDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Create New Stage</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            {/* Add console logs to help debug */}\r\n            {console.log(\"Dialog rendering with state:\", {\r\n              selectedTemplates,\r\n              availableTemplates,\r\n              defaultTemplates,\r\n              templatesInfo: {\r\n                stageSelectionCount: availableTemplates.stage_selection.length,\r\n                dataExtractionCount: availableTemplates.data_extraction.length,\r\n                responseGenerationCount: availableTemplates.response_generation.length,\r\n              }\r\n            })}\r\n            \r\n            {/* Stage Name */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Stage Name\"\r\n                value={newStageName}\r\n                onChange={(e) => setNewStageName(e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Stage Description */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={2}\r\n                label=\"Stage Description\"\r\n                value={stageDescription}\r\n                onChange={(e) => setStageDescription(e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Stage Selection */}\r\n            <Grid item xs={12}>\r\n              <InputLabel>Stage Selection Template</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                value={selectedTemplates.stage_selection}\r\n                onChange={(e) => setSelectedTemplates({\r\n                  ...selectedTemplates,\r\n                  stage_selection: e.target.value\r\n                })}\r\n              >\r\n                {availableTemplates.stage_selection.length === 0 ? (\r\n                  <MenuItem value=\"\">\r\n                    <em>No templates available</em>\r\n                  </MenuItem>\r\n                ) : (\r\n                  availableTemplates.stage_selection.map((template) => (\r\n                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                      {template.template_name} ({template.template_type})\r\n                    </MenuItem>\r\n                  ))\r\n                )}\r\n              </Select>\r\n              <FormHelperText>Template for determining if this stage should handle the message</FormHelperText>\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Data Extraction */}\r\n            <Grid item xs={12}>\r\n              <InputLabel>Data Extraction Template</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                value={selectedTemplates.data_extraction}\r\n                onChange={(e) => setSelectedTemplates({\r\n                  ...selectedTemplates,\r\n                  data_extraction: e.target.value\r\n                })}\r\n              >\r\n                {availableTemplates.data_extraction.length === 0 ? (\r\n                  <MenuItem value=\"\">\r\n                    <em>No templates available</em>\r\n                  </MenuItem>\r\n                ) : (\r\n                  availableTemplates.data_extraction.map((template) => (\r\n                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                      {template.template_name} ({template.template_type})\r\n                    </MenuItem>\r\n                  ))\r\n                )}\r\n              </Select>\r\n              <FormHelperText>Template for extracting data from the message</FormHelperText>\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Response Generation */}\r\n            <Grid item xs={12}>\r\n              <InputLabel>Response Generation Template</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                value={selectedTemplates.response_generation}\r\n                onChange={(e) => setSelectedTemplates({\r\n                  ...selectedTemplates,\r\n                  response_generation: e.target.value\r\n                })}\r\n              >\r\n                {availableTemplates.response_generation.length === 0 ? (\r\n                  <MenuItem value=\"\">\r\n                    <em>No templates available</em>\r\n                  </MenuItem>\r\n                ) : (\r\n                  availableTemplates.response_generation.map((template) => (\r\n                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                      {template.template_name} ({template.template_type})\r\n                    </MenuItem>\r\n                  ))\r\n                )}\r\n              </Select>\r\n              <FormHelperText>Template for generating responses</FormHelperText>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleCreateStage} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!newStageName.trim()}\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Create & Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={openDeleteDialog}\r\n        onClose={() => setOpenDeleteDialog(false)}\r\n      >\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete the stage \"{stageToDelete?.stage_name}\"?\r\n            This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteDialog(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleDeleteStage} \r\n            variant=\"contained\" \r\n            color=\"error\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert severity={snackbar.severity} onClose={handleCloseSnackbar}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StageManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}