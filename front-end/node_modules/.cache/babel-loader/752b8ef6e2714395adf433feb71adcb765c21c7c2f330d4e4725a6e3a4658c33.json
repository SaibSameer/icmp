{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useConfig.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { API_CONFIG, AUTH_CONFIG } from '../config';\n\n// Normalize UUID to ensure it passes backend validation\nexport const normalizeUUID = uuid => {\n  if (!uuid) return null;\n  try {\n    // Convert to lowercase and trim whitespace\n    const normalizedUUID = uuid.toLowerCase().trim();\n    // Check if it's a valid UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\n    if (uuidRegex.test(normalizedUUID)) {\n      return normalizedUUID;\n    }\n\n    // Try to add dashes if missing but the uuid has the right length\n    if (normalizedUUID.length === 32 && /^[0-9a-f]{32}$/.test(normalizedUUID)) {\n      const formatted = `${normalizedUUID.slice(0, 8)}-${normalizedUUID.slice(8, 12)}-${normalizedUUID.slice(12, 16)}-${normalizedUUID.slice(16, 20)}-${normalizedUUID.slice(20)}`;\n      if (uuidRegex.test(formatted)) {\n        console.log(`Reformatted UUID from ${normalizedUUID} to ${formatted}`);\n        return formatted;\n      }\n    }\n    console.warn('Invalid UUID format:', uuid);\n    return uuid; // Return original if not matching pattern\n  } catch (error) {\n    console.error('Error normalizing UUID:', error);\n    return uuid; // Return original on error\n  }\n};\nconst useConfig = () => {\n  _s();\n  // API keys should not be stored in localStorage. Initialize as empty.\n  // They will be handled via httpOnly cookies set by the backend.\n  const [apiKey, setApiKey] = useState('');\n  const [userId, setUserId] = useState(localStorage.getItem('userId') || '');\n  const [businessId, setBusinessId] = useState(localStorage.getItem('businessId') || '');\n  // Business API key should also not be stored in localStorage.\n  const [businessApiKey, setBusinessApiKey] = useState('');\n\n  // No need to memoize simple setters like this unless performance profiling proves it necessary.\n  // const memoizedSetApiKey = useCallback((newApiKey) => {\n  //     setApiKey(newApiKey);\n  // }, []);\n\n  // Persist userId and businessId to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('userId', userId);\n  }, [userId]);\n  useEffect(() => {\n    localStorage.setItem('businessId', businessId);\n  }, [businessId]);\n  return {\n    apiKey,\n    setApiKey,\n    // Return the direct setter\n    userId,\n    setUserId,\n    businessId,\n    setBusinessId,\n    businessApiKey,\n    setBusinessApiKey // Return the direct setter\n  };\n};\n_s(useConfig, \"1Hnvh+Ir06tyfLvfJAMlAd/edXs=\");\nexport default useConfig;","map":{"version":3,"names":["useState","useEffect","useCallback","API_CONFIG","AUTH_CONFIG","normalizeUUID","uuid","normalizedUUID","toLowerCase","trim","uuidRegex","test","length","formatted","slice","console","log","warn","error","useConfig","_s","apiKey","setApiKey","userId","setUserId","localStorage","getItem","businessId","setBusinessId","businessApiKey","setBusinessApiKey","setItem"],"sources":["C:/icmp_events_api/front-end/src/hooks/useConfig.js"],"sourcesContent":["// src/hooks/useConfig.js\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { API_CONFIG, AUTH_CONFIG } from '../config';\r\n\r\n// Normalize UUID to ensure it passes backend validation\r\nexport const normalizeUUID = (uuid) => {\r\n  if (!uuid) return null;\r\n  \r\n  try {\r\n    // Convert to lowercase and trim whitespace\r\n    const normalizedUUID = uuid.toLowerCase().trim();\r\n    // Check if it's a valid UUID format\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\r\n    \r\n    if (uuidRegex.test(normalizedUUID)) {\r\n      return normalizedUUID;\r\n    }\r\n    \r\n    // Try to add dashes if missing but the uuid has the right length\r\n    if (normalizedUUID.length === 32 && /^[0-9a-f]{32}$/.test(normalizedUUID)) {\r\n      const formatted = `${normalizedUUID.slice(0, 8)}-${normalizedUUID.slice(8, 12)}-${normalizedUUID.slice(12, 16)}-${normalizedUUID.slice(16, 20)}-${normalizedUUID.slice(20)}`;\r\n      if (uuidRegex.test(formatted)) {\r\n        console.log(`Reformatted UUID from ${normalizedUUID} to ${formatted}`);\r\n        return formatted;\r\n      }\r\n    }\r\n    \r\n    console.warn('Invalid UUID format:', uuid);\r\n    return uuid; // Return original if not matching pattern\r\n  } catch (error) {\r\n    console.error('Error normalizing UUID:', error);\r\n    return uuid; // Return original on error\r\n  }\r\n};\r\n\r\nconst useConfig = () => {\r\n    // API keys should not be stored in localStorage. Initialize as empty.\r\n    // They will be handled via httpOnly cookies set by the backend.\r\n    const [apiKey, setApiKey] = useState(''); \r\n    const [userId, setUserId] = useState(localStorage.getItem('userId') || '');\r\n    const [businessId, setBusinessId] = useState(localStorage.getItem('businessId') || '');\r\n    // Business API key should also not be stored in localStorage.\r\n    const [businessApiKey, setBusinessApiKey] = useState(''); \r\n\r\n    // No need to memoize simple setters like this unless performance profiling proves it necessary.\r\n    // const memoizedSetApiKey = useCallback((newApiKey) => {\r\n    //     setApiKey(newApiKey);\r\n    // }, []);\r\n\r\n    // Persist userId and businessId to localStorage when they change\r\n    useEffect(() => {\r\n        localStorage.setItem('userId', userId);\r\n    }, [userId]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('businessId', businessId);\r\n    }, [businessId]);\r\n\r\n    return {\r\n        apiKey,\r\n        setApiKey, // Return the direct setter\r\n        userId,\r\n        setUserId,\r\n        businessId,\r\n        setBusinessId,\r\n        businessApiKey,\r\n        setBusinessApiKey, // Return the direct setter\r\n    };\r\n};\r\n\r\nexport default useConfig;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,UAAU,EAAEC,WAAW,QAAQ,WAAW;;AAEnD;AACA,OAAO,MAAMC,aAAa,GAAIC,IAAI,IAAK;EACrC,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EAEtB,IAAI;IACF;IACA,MAAMC,cAAc,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAChD;IACA,MAAMC,SAAS,GAAG,gEAAgE;IAElF,IAAIA,SAAS,CAACC,IAAI,CAACJ,cAAc,CAAC,EAAE;MAClC,OAAOA,cAAc;IACvB;;IAEA;IACA,IAAIA,cAAc,CAACK,MAAM,KAAK,EAAE,IAAI,gBAAgB,CAACD,IAAI,CAACJ,cAAc,CAAC,EAAE;MACzE,MAAMM,SAAS,GAAG,GAAGN,cAAc,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIP,cAAc,CAACO,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,IAAIP,cAAc,CAACO,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,IAAIP,cAAc,CAACO,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,IAAIP,cAAc,CAACO,KAAK,CAAC,EAAE,CAAC,EAAE;MAC5K,IAAIJ,SAAS,CAACC,IAAI,CAACE,SAAS,CAAC,EAAE;QAC7BE,OAAO,CAACC,GAAG,CAAC,yBAAyBT,cAAc,OAAOM,SAAS,EAAE,CAAC;QACtE,OAAOA,SAAS;MAClB;IACF;IAEAE,OAAO,CAACE,IAAI,CAAC,sBAAsB,EAAEX,IAAI,CAAC;IAC1C,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAOZ,IAAI,CAAC,CAAC;EACf;AACF,CAAC;AAED,MAAMa,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAACyB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;EAC1E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAACyB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;EACtF;EACA,MAAM,CAACG,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA;EACA;EACA;;EAEA;EACAC,SAAS,CAAC,MAAM;IACZwB,YAAY,CAACM,OAAO,CAAC,QAAQ,EAAER,MAAM,CAAC;EAC1C,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZtB,SAAS,CAAC,MAAM;IACZwB,YAAY,CAACM,OAAO,CAAC,YAAY,EAAEJ,UAAU,CAAC;EAClD,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,OAAO;IACHN,MAAM;IACNC,SAAS;IAAE;IACXC,MAAM;IACNC,SAAS;IACTG,UAAU;IACVC,aAAa;IACbC,cAAc;IACdC,iBAAiB,CAAE;EACvB,CAAC;AACL,CAAC;AAACV,EAAA,CAjCID,SAAS;AAmCf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}