{"ast":null,"code":"// File: src/services/testService.js\n// Last Modified: 2026-03-29\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Helper function to handle API calls and error responses\nconst handleApiCall = async (url, method, apiKey, data = null) => {\n  const headers = {\n    'Authorization': `Bearer ${apiKey}`,\n    'Content-Type': 'application/json'\n  };\n  try {\n    const response = await axios({\n      method: method,\n      url: url,\n      headers: headers,\n      data: data ? JSON.stringify(data) : null // Serialize data to JSON\n    });\n    if (response.status >= 200 && response.status < 300) {\n      return response.data;\n    } else {\n      console.error(\"API call failed:\", response);\n      throw new Error(`API call failed with status ${response.status}`);\n    }\n  } catch (error) {\n    console.error(\"API call failed:\", error);\n    throw error; // Re-throw the error for the component to handle\n  }\n};\n\n// --------------------------------------------------------\n// Configuration Service (Saving to localStorage - Insecure)\n// --------------------------------------------------------\nexport const saveConfig = async (apiKey, userId, businessId) => {\n  // This function doesn't actually call an API. It only saves to localStorage.\n  return new Promise(resolve => {\n    localStorage.setItem('icmpApiKey', apiKey);\n    resolve({\n      success: true,\n      message: 'Configuration saved to localStorage'\n    });\n  });\n};\n\n// --------------------------------------------------------\n// User Management Service (Simulated)\n// --------------------------------------------------------\nexport const createUser = async (firstName, lastName, email) => {\n  // Placeholder. Implement when the API endpoint is ready.\n  return new Promise(resolve => {\n    // Simulate API call delay\n    setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'User created successfully (simulated)'\n      });\n    }, 500);\n  });\n};\n\n// --------------------------------------------------------\n// Business Management Service\n// --------------------------------------------------------\nexport const fetchBusinessDetails = async (businessId, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/businesses/${businessId}`, 'GET', apiKey);\n  } catch (error) {\n    console.error(\"fetchBusinessDetails API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Template Management Service\n// --------------------------------------------------------\nexport const createTemplate = async (templateData, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/templates`, 'POST', apiKey, templateData);\n  } catch (error) {\n    console.error(\"createTemplate API call failed:\", error);\n    throw error;\n  }\n};\nexport const fetchTemplates = async apiKey => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/templates`, 'GET', apiKey);\n  } catch (error) {\n    console.error(\"fetchTemplates API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Stage Management Service\n// --------------------------------------------------------\nexport const createStage = async (stageData, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/stages`, 'POST', apiKey, stageData);\n  } catch (error) {\n    console.error(\"createStage API call failed:\", error);\n    throw error;\n  }\n};\nexport const fetchStages = async (businessId, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/stages/${businessId}`, 'GET', apiKey);\n  } catch (error) {\n    console.error(\"fetchStages API call failed:\", error);\n    throw error;\n  }\n};\nexport const getStage = async (stageId, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/stages/${stageId}`, 'GET', apiKey);\n  } catch (error) {\n    console.error(\"getStage API call failed:\", error);\n    throw error;\n  }\n};\nexport const updateStage = async (stageId, stageData, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/stages/${stageId}`, 'PUT', apiKey, stageData);\n  } catch (error) {\n    console.error(\"updateStage API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Conversation Management Service\n// --------------------------------------------------------\nexport const processMessage = async (messageData, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/message`, 'POST', apiKey, messageData);\n  } catch (error) {\n    console.error(\"processMessage API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Default Templates Management Service\n// --------------------------------------------------------\nexport const getDefaultTemplates = async apiKey => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/defaultTemplates`, 'GET', apiKey);\n  } catch (error) {\n    console.error(\"getDefaultTemplates API call failed:\", error);\n    throw error;\n  }\n};\nexport const saveDefaultTemplate = async (templateData, apiKey) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/defaultTemplates`, 'POST', apiKey, templateData);\n  } catch (error) {\n    console.error(\"saveDefaultTemplate API call failed:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","handleApiCall","url","method","apiKey","data","headers","response","JSON","stringify","status","console","error","Error","saveConfig","userId","businessId","Promise","resolve","localStorage","setItem","success","message","createUser","firstName","lastName","email","setTimeout","fetchBusinessDetails","createTemplate","templateData","fetchTemplates","createStage","stageData","fetchStages","getStage","stageId","updateStage","processMessage","messageData","getDefaultTemplates","saveDefaultTemplate"],"sources":["C:/icmp_events_api/front-end/src/services/testService.js"],"sourcesContent":["// File: src/services/testService.js\r\n// Last Modified: 2026-03-29\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\n// Helper function to handle API calls and error responses\r\nconst handleApiCall = async (url, method, apiKey, data = null) => {\r\n    const headers = {\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'Content-Type': 'application/json',\r\n    };\r\n\r\n    try {\r\n        const response = await axios({\r\n            method: method,\r\n            url: url,\r\n            headers: headers,\r\n            data: data ? JSON.stringify(data) : null, // Serialize data to JSON\r\n        });\r\n\r\n        if (response.status >= 200 && response.status < 300) {\r\n            return response.data;\r\n        } else {\r\n            console.error(\"API call failed:\", response);\r\n            throw new Error(`API call failed with status ${response.status}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"API call failed:\", error);\r\n        throw error; // Re-throw the error for the component to handle\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Configuration Service (Saving to localStorage - Insecure)\r\n// --------------------------------------------------------\r\nexport const saveConfig = async (apiKey, userId, businessId) => {\r\n    // This function doesn't actually call an API. It only saves to localStorage.\r\n    return new Promise((resolve) => {\r\n        localStorage.setItem('icmpApiKey', apiKey);\r\n        resolve({ success: true, message: 'Configuration saved to localStorage' });\r\n    });\r\n};\r\n\r\n// --------------------------------------------------------\r\n// User Management Service (Simulated)\r\n// --------------------------------------------------------\r\nexport const createUser = async (firstName, lastName, email) => {\r\n    // Placeholder. Implement when the API endpoint is ready.\r\n    return new Promise((resolve) => {\r\n        // Simulate API call delay\r\n        setTimeout(() => {\r\n            resolve({ success: true, message: 'User created successfully (simulated)' });\r\n        }, 500);\r\n    });\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Business Management Service\r\n// --------------------------------------------------------\r\nexport const fetchBusinessDetails = async (businessId, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/businesses/${businessId}`, 'GET', apiKey);\r\n    } catch (error) {\r\n        console.error(\"fetchBusinessDetails API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Template Management Service\r\n// --------------------------------------------------------\r\nexport const createTemplate = async (templateData, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/templates`, 'POST', apiKey, templateData);\r\n    } catch (error) {\r\n        console.error(\"createTemplate API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchTemplates = async (apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/templates`, 'GET', apiKey);\r\n    } catch (error) {\r\n        console.error(\"fetchTemplates API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Stage Management Service\r\n// --------------------------------------------------------\r\nexport const createStage = async (stageData, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/stages`, 'POST', apiKey, stageData);\r\n    } catch (error) {\r\n        console.error(\"createStage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchStages = async (businessId, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/stages/${businessId}`, 'GET', apiKey);\r\n    } catch (error) {\r\n        console.error(\"fetchStages API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getStage = async (stageId, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/stages/${stageId}`, 'GET', apiKey);\r\n    } catch (error) {\r\n        console.error(\"getStage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateStage = async (stageId, stageData, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/stages/${stageId}`, 'PUT', apiKey, stageData);\r\n    } catch (error) {\r\n        console.error(\"updateStage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Conversation Management Service\r\n// --------------------------------------------------------\r\nexport const processMessage = async (messageData, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/message`, 'POST', apiKey, messageData);\r\n    } catch (error) {\r\n        console.error(\"processMessage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Default Templates Management Service\r\n// --------------------------------------------------------\r\nexport const getDefaultTemplates = async (apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/defaultTemplates`, 'GET', apiKey);\r\n    } catch (error) {\r\n        console.error(\"getDefaultTemplates API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const saveDefaultTemplate = async (templateData, apiKey) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/defaultTemplates`, 'POST', apiKey, templateData);\r\n    } catch (error) {\r\n        console.error(\"saveDefaultTemplate API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}