{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Typography, Card, CardContent, List, ListItem, ListItemText, CircularProgress, Alert, Button, Box, Divider, IconButton // For potential Edit button\n} from '@mui/material';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport EditIcon from '@mui/icons-material/Edit'; // Example icon for Edit\nimport useStages from '../hooks/useStages'; // Import the hook we just created\n\n// Define the StageSection component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StageSection({\n  selectedAgentId,\n  handleSnackbarOpen,\n  onStageSelect\n}) {\n  _s();\n  // Use the hook to get stages for the selected agent\n  const {\n    stages,\n    isLoading,\n    error,\n    refreshStages\n  } = useStages(selectedAgentId, handleSnackbarOpen);\n  const [selectedStageId, setSelectedStageId] = useState(null);\n\n  // Handler for selecting a stage\n  const handleStageClick = stageId => {\n    console.log(\"Selected Stage ID:\", stageId);\n    setSelectedStageId(stageId);\n    if (onStageSelect) {\n      onStageSelect(stageId); // Notify parent component\n    }\n  };\n\n  // Handler for the Create New Stage button click\n  const handleCreateStage = () => {\n    // TODO: Implement logic to open a modal or form for creating a new stage\n    console.log(\"Create New Stage clicked\");\n    handleSnackbarOpen(\"Create stage functionality not yet implemented.\", \"info\");\n  };\n\n  // Handler for the Edit Stage button click\n  const handleEditStage = (stageId, event) => {\n    event.stopPropagation(); // Prevent triggering handleStageClick\n    // TODO: Implement logic to open a modal or form for editing the stage\n    console.log(\"Edit Stage clicked:\", stageId);\n    handleSnackbarOpen(`Edit stage (${stageId}) functionality not yet implemented.`, \"info\");\n  };\n\n  // Determine the content based on whether an agent is selected and loading/error states\n  let content;\n  if (!selectedAgentId) {\n    content = /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      sx: {\n        p: 2,\n        textAlign: 'center',\n        color: 'text.secondary'\n      },\n      children: \"Please select an agent to view stages.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this);\n  } else if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          ml: 1\n        },\n        variant: \"body2\",\n        children: \"Loading Stages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  } else if (error) {\n    content = /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: [\"Error loading stages: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this);\n  } else if (stages.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(ListItem, {\n        // Assuming stage object has stage_id\n        button: true,\n        selected: selectedStageId === stage.stage_id,\n        onClick: () => handleStageClick(stage.stage_id),\n        secondaryAction: /*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"end\",\n          \"aria-label\": \"edit\",\n          onClick: e => handleEditStage(stage.stage_id, e),\n          children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: stage.stage_name || 'Unnamed Stage',\n          secondary: stage.description || 'No description'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)\n      }, stage.stage_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  } else {\n    content = /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      sx: {\n        p: 2,\n        textAlign: 'center'\n      },\n      children: \"No stages found for this agent.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          component: \"div\",\n          children: \"Stages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), selectedAgentId && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 40\n          }, this),\n          onClick: handleCreateStage,\n          disabled: !selectedAgentId // Disable if no agent selected (redundant due to outer check, but safe)\n          ,\n          children: \"Create Stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(StageSection, \"veTEY+vpV/q3gH+tzzaNLqk1l8I=\", false, function () {\n  return [useStages];\n});\n_c = StageSection;\nexport default StageSection;\nvar _c;\n$RefreshReg$(_c, \"StageSection\");","map":{"version":3,"names":["React","useState","Typography","Card","CardContent","List","ListItem","ListItemText","CircularProgress","Alert","Button","Box","Divider","IconButton","AddCircleOutlineIcon","EditIcon","useStages","jsxDEV","_jsxDEV","StageSection","selectedAgentId","handleSnackbarOpen","onStageSelect","_s","stages","isLoading","error","refreshStages","selectedStageId","setSelectedStageId","handleStageClick","stageId","console","log","handleCreateStage","handleEditStage","event","stopPropagation","content","variant","sx","p","textAlign","color","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","size","ml","severity","length","dense","map","stage","button","selected","stage_id","onClick","secondaryAction","edge","e","primary","stage_name","secondary","description","mt","mb","gutterBottom","component","startIcon","disabled","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageSection.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    Typography,\r\n    Card,\r\n    CardContent,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    CircularProgress,\r\n    Alert,\r\n    Button,\r\n    Box,\r\n    Divider,\r\n    IconButton // For potential Edit button\r\n} from '@mui/material';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport EditIcon from '@mui/icons-material/Edit'; // Example icon for Edit\r\nimport useStages from '../hooks/useStages'; // Import the hook we just created\r\n\r\n// Define the StageSection component\r\nfunction StageSection({ selectedAgentId, handleSnackbarOpen, onStageSelect }) {\r\n    // Use the hook to get stages for the selected agent\r\n    const { stages, isLoading, error, refreshStages } = useStages(selectedAgentId, handleSnackbarOpen);\r\n    const [selectedStageId, setSelectedStageId] = useState(null);\r\n\r\n    // Handler for selecting a stage\r\n    const handleStageClick = (stageId) => {\r\n        console.log(\"Selected Stage ID:\", stageId);\r\n        setSelectedStageId(stageId);\r\n        if (onStageSelect) {\r\n            onStageSelect(stageId); // Notify parent component\r\n        }\r\n    };\r\n\r\n     // Handler for the Create New Stage button click\r\n     const handleCreateStage = () => {\r\n        // TODO: Implement logic to open a modal or form for creating a new stage\r\n        console.log(\"Create New Stage clicked\");\r\n        handleSnackbarOpen(\"Create stage functionality not yet implemented.\", \"info\");\r\n    };\r\n\r\n    // Handler for the Edit Stage button click\r\n    const handleEditStage = (stageId, event) => {\r\n        event.stopPropagation(); // Prevent triggering handleStageClick\r\n        // TODO: Implement logic to open a modal or form for editing the stage\r\n        console.log(\"Edit Stage clicked:\", stageId);\r\n        handleSnackbarOpen(`Edit stage (${stageId}) functionality not yet implemented.`, \"info\");\r\n    };\r\n\r\n\r\n    // Determine the content based on whether an agent is selected and loading/error states\r\n    let content;\r\n    if (!selectedAgentId) {\r\n        content = <Typography variant=\"body2\" sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>Please select an agent to view stages.</Typography>;\r\n    } else if (isLoading) {\r\n        content = (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', p: 2 }}>\r\n                <CircularProgress size={24} />\r\n                <Typography sx={{ ml: 1 }} variant=\"body2\">Loading Stages...</Typography>\r\n            </Box>\r\n        );\r\n    } else if (error) {\r\n        content = <Alert severity=\"error\">Error loading stages: {error}</Alert>;\r\n    } else if (stages.length > 0) {\r\n        content = (\r\n            <List dense>\r\n                {stages.map((stage) => (\r\n                    <ListItem\r\n                        key={stage.stage_id} // Assuming stage object has stage_id\r\n                        button\r\n                        selected={selectedStageId === stage.stage_id}\r\n                        onClick={() => handleStageClick(stage.stage_id)}\r\n                        secondaryAction={\r\n                            <IconButton\r\n                                edge=\"end\"\r\n                                aria-label=\"edit\"\r\n                                onClick={(e) => handleEditStage(stage.stage_id, e)}\r\n                            >\r\n                                <EditIcon />\r\n                            </IconButton>\r\n                        }\r\n                    >\r\n                        {/* Assuming stage object has stage_name and description */}\r\n                        <ListItemText\r\n                            primary={stage.stage_name || 'Unnamed Stage'}\r\n                            secondary={stage.description || 'No description'}\r\n                        />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        );\r\n    } else {\r\n        content = <Typography variant=\"body2\" sx={{ p: 2, textAlign: 'center' }}>No stages found for this agent.</Typography>;\r\n    }\r\n\r\n    return (\r\n        <Card sx={{ mt: 2 }}>\r\n             <CardContent>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                        Stages\r\n                    </Typography>\r\n                     {/* Conditionally render Create button only if an agent is selected */}\r\n                     {selectedAgentId && (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            startIcon={<AddCircleOutlineIcon />}\r\n                            onClick={handleCreateStage}\r\n                            disabled={!selectedAgentId} // Disable if no agent selected (redundant due to outer check, but safe)\r\n                        >\r\n                            Create Stage\r\n                        </Button>\r\n                     )}\r\n                </Box>\r\n                <Divider sx={{ mb: 1 }}/>\r\n                {content}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default StageSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}