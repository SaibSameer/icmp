{"ast":null,"code":"// Debug service for message handling diagnostics\nimport { API_CONFIG } from '../config';\nimport { getAuthHeaders } from './authService';\n\n/**\r\n * Handles API responses and throws errors for non-OK responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\nconst handleApiResponse = async response => {\n  // Handle non-OK responses\n  if (!response.ok) {\n    // Try to get detailed error from response\n    try {\n      const errorData = await response.json();\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\n    } catch (jsonError) {\n      // If response isn't valid JSON, use status text\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  // For successful responses, parse JSON or return empty object\n  try {\n    return await response.json();\n  } catch (error) {\n    // Some successful responses may not have a body (e.g., 204 No Content)\n    return {};\n  }\n};\n\n/**\r\n * Make an API request with authentication\r\n * @param {string} endpoint - API endpoint\r\n * @param {Object} options - Request options\r\n * @returns {Promise<any>} - Response data\r\n */\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_CONFIG.BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: getAuthHeaders(),\n    credentials: 'include'\n  };\n  const response = await fetch(url, {\n    ...defaultOptions,\n    ...options\n  });\n  return handleApiResponse(response);\n};\nexport const debugService = {\n  // Get debug information for a specific conversation\n  getConversationDebug: conversationId => {\n    return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/conversation/${conversationId}`);\n  },\n  // Get real-time message processing debug info\n  getMessageProcessingDebug: messageId => {\n    return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/message/${messageId}`);\n  },\n  // Get stage navigation history\n  getStageNavigationDebug: conversationId => {\n    return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/stages/${conversationId}`);\n  },\n  // Get prompt generation details\n  getPromptGenerationDebug: messageId => {\n    return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/prompts/${messageId}`);\n  },\n  // Get data extraction results\n  getDataExtractionDebug: messageId => {\n    return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/extraction/${messageId}`);\n  },\n  // Subscribe to real-time debug events for a conversation\n  subscribeToDebugEvents: (conversationId, callback) => {\n    const eventSource = new EventSource(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.DEBUG}/events/${conversationId}`);\n    eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        callback(data);\n      } catch (error) {\n        console.error('Error parsing event data:', error);\n      }\n    };\n    eventSource.onerror = error => {\n      console.error('EventSource error:', error);\n      eventSource.close();\n    };\n\n    // Return cleanup function\n    return () => {\n      if (eventSource.readyState !== EventSource.CLOSED) {\n        eventSource.close();\n      }\n    };\n  }\n};\nexport default debugService;","map":{"version":3,"names":["API_CONFIG","getAuthHeaders","handleApiResponse","response","ok","errorData","json","Error","message","error","status","jsonError","statusText","apiRequest","endpoint","options","url","BASE_URL","defaultOptions","headers","credentials","fetch","debugService","getConversationDebug","conversationId","ENDPOINTS","DEBUG","getMessageProcessingDebug","messageId","getStageNavigationDebug","getPromptGenerationDebug","getDataExtractionDebug","subscribeToDebugEvents","callback","eventSource","EventSource","onmessage","event","data","JSON","parse","console","onerror","close","readyState","CLOSED"],"sources":["C:/icmp_events_api/front-end/src/services/debugService.js"],"sourcesContent":["// Debug service for message handling diagnostics\r\nimport { API_CONFIG } from '../config';\r\nimport { getAuthHeaders } from './authService';\r\n\r\n/**\r\n * Handles API responses and throws errors for non-OK responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\r\nconst handleApiResponse = async (response) => {\r\n    // Handle non-OK responses\r\n    if (!response.ok) {\r\n        // Try to get detailed error from response\r\n        try {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\r\n        } catch (jsonError) {\r\n            // If response isn't valid JSON, use status text\r\n            throw new Error(`API error: ${response.status} ${response.statusText}`);\r\n        }\r\n    }\r\n    \r\n    // For successful responses, parse JSON or return empty object\r\n    try {\r\n        return await response.json();\r\n    } catch (error) {\r\n        // Some successful responses may not have a body (e.g., 204 No Content)\r\n        return {};\r\n    }\r\n};\r\n\r\n/**\r\n * Make an API request with authentication\r\n * @param {string} endpoint - API endpoint\r\n * @param {Object} options - Request options\r\n * @returns {Promise<any>} - Response data\r\n */\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n    const url = `${API_CONFIG.BASE_URL}${endpoint}`;\r\n    const defaultOptions = {\r\n        headers: getAuthHeaders(),\r\n        credentials: 'include',\r\n    };\r\n\r\n    const response = await fetch(url, { ...defaultOptions, ...options });\r\n    return handleApiResponse(response);\r\n};\r\n\r\nexport const debugService = {\r\n    // Get debug information for a specific conversation\r\n    getConversationDebug: (conversationId) => {\r\n        return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/conversation/${conversationId}`);\r\n    },\r\n\r\n    // Get real-time message processing debug info\r\n    getMessageProcessingDebug: (messageId) => {\r\n        return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/message/${messageId}`);\r\n    },\r\n\r\n    // Get stage navigation history\r\n    getStageNavigationDebug: (conversationId) => {\r\n        return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/stages/${conversationId}`);\r\n    },\r\n\r\n    // Get prompt generation details\r\n    getPromptGenerationDebug: (messageId) => {\r\n        return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/prompts/${messageId}`);\r\n    },\r\n\r\n    // Get data extraction results\r\n    getDataExtractionDebug: (messageId) => {\r\n        return apiRequest(`${API_CONFIG.ENDPOINTS.DEBUG}/extraction/${messageId}`);\r\n    },\r\n\r\n    // Subscribe to real-time debug events for a conversation\r\n    subscribeToDebugEvents: (conversationId, callback) => {\r\n        const eventSource = new EventSource(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.DEBUG}/events/${conversationId}`);\r\n        \r\n        eventSource.onmessage = (event) => {\r\n            try {\r\n                const data = JSON.parse(event.data);\r\n                callback(data);\r\n            } catch (error) {\r\n                console.error('Error parsing event data:', error);\r\n            }\r\n        };\r\n        \r\n        eventSource.onerror = (error) => {\r\n            console.error('EventSource error:', error);\r\n            eventSource.close();\r\n        };\r\n\r\n        // Return cleanup function\r\n        return () => {\r\n            if (eventSource.readyState !== EventSource.CLOSED) {\r\n                eventSource.close();\r\n            }\r\n        };\r\n    }\r\n};\r\n\r\nexport default debugService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}