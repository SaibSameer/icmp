{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useBusiness.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { fetchBusinessDetails as fetchBusinessDetailsApi } from '../services/testService'; // Adjust path if needed\nimport useConfig from './useConfig'; // Import useConfig to get businessId\n\nconst useBusiness = handleSnackbarOpen => {\n  _s();\n  // Rename businessOutput to businessDetails for clarity, store object not string\n  const [businessDetails, setBusinessDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    businessId\n  } = useConfig(); // Get businessId from config\n\n  const fetchBusinessDetails = useCallback(async () => {\n    if (!businessId) {\n      // Don't fetch if businessId isn't set\n      setBusinessDetails(null); // Clear details if ID is removed\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    console.log(`Fetching details for business ID: ${businessId}`); // Debug log\n\n    try {\n      // API key is no longer passed explicitly; relies on httpOnly cookie\n      const data = await fetchBusinessDetailsApi(businessId);\n      console.log(\"Fetched business details:\", data); // Debug log\n      setBusinessDetails(data); // Store the fetched object\n      if (handleSnackbarOpen) {\n        handleSnackbarOpen(\"Business details loaded!\", \"info\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching business details:\", err); // Debug log\n      setError(err.message || 'Failed to fetch business details');\n      setBusinessDetails(null); // Clear details on error\n      if (handleSnackbarOpen) {\n        handleSnackbarOpen(`Error fetching business details: ${err.message}`, \"error\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [businessId, handleSnackbarOpen]); // Depend on businessId and the snackbar handler\n\n  // useEffect to trigger fetch when businessId changes\n  useEffect(() => {\n    fetchBusinessDetails();\n  }, [fetchBusinessDetails]); // fetchBusinessDetails is memoized by useCallback\n\n  return {\n    businessDetails,\n    isLoading,\n    error\n    // Maybe expose a refresh function if needed?\n    // refresh: fetchBusinessDetails \n  };\n};\n_s(useBusiness, \"bkG8+wcfSAHM7aHegG1q2/fEin0=\", false, function () {\n  return [useConfig];\n});\nexport default useBusiness;","map":{"version":3,"names":["useState","useEffect","useCallback","fetchBusinessDetails","fetchBusinessDetailsApi","useConfig","useBusiness","handleSnackbarOpen","_s","businessDetails","setBusinessDetails","isLoading","setIsLoading","error","setError","businessId","console","log","data","err","message"],"sources":["C:/icmp_events_api/front-end/src/hooks/useBusiness.js"],"sourcesContent":["// src/hooks/useBusiness.js\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { fetchBusinessDetails as fetchBusinessDetailsApi } from '../services/testService'; // Adjust path if needed\r\nimport useConfig from './useConfig'; // Import useConfig to get businessId\r\n\r\nconst useBusiness = (handleSnackbarOpen) => {\r\n    // Rename businessOutput to businessDetails for clarity, store object not string\r\n    const [businessDetails, setBusinessDetails] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const { businessId } = useConfig(); // Get businessId from config\r\n\r\n    const fetchBusinessDetails = useCallback(async () => {\r\n        if (!businessId) {\r\n            // Don't fetch if businessId isn't set\r\n            setBusinessDetails(null); // Clear details if ID is removed\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n        console.log(`Fetching details for business ID: ${businessId}`); // Debug log\r\n\r\n        try {\r\n            // API key is no longer passed explicitly; relies on httpOnly cookie\r\n            const data = await fetchBusinessDetailsApi(businessId);\r\n            console.log(\"Fetched business details:\", data); // Debug log\r\n            setBusinessDetails(data); // Store the fetched object\r\n            if (handleSnackbarOpen) {\r\n                 handleSnackbarOpen(\"Business details loaded!\", \"info\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching business details:\", err); // Debug log\r\n            setError(err.message || 'Failed to fetch business details');\r\n            setBusinessDetails(null); // Clear details on error\r\n             if (handleSnackbarOpen) {\r\n                handleSnackbarOpen(`Error fetching business details: ${err.message}`, \"error\");\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [businessId, handleSnackbarOpen]); // Depend on businessId and the snackbar handler\r\n\r\n    // useEffect to trigger fetch when businessId changes\r\n    useEffect(() => {\r\n        fetchBusinessDetails();\r\n    }, [fetchBusinessDetails]); // fetchBusinessDetails is memoized by useCallback\r\n\r\n    return {\r\n        businessDetails,\r\n        isLoading,\r\n        error,\r\n        // Maybe expose a refresh function if needed?\r\n        // refresh: fetchBusinessDetails \r\n    };\r\n};\r\n\r\nexport default useBusiness;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,oBAAoB,IAAIC,uBAAuB,QAAQ,yBAAyB,CAAC,CAAC;AAC3F,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;;AAErC,MAAMC,WAAW,GAAIC,kBAAkB,IAAK;EAAAC,EAAA;EACxC;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEe;EAAW,CAAC,GAAGV,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEpC,MAAMF,oBAAoB,GAAGD,WAAW,CAAC,YAAY;IACjD,IAAI,CAACa,UAAU,EAAE;MACb;MACAL,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC1B;IACJ;IAEAE,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACdE,OAAO,CAACC,GAAG,CAAC,qCAAqCF,UAAU,EAAE,CAAC,CAAC,CAAC;;IAEhE,IAAI;MACA;MACA,MAAMG,IAAI,GAAG,MAAMd,uBAAuB,CAACW,UAAU,CAAC;MACtDC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEC,IAAI,CAAC,CAAC,CAAC;MAChDR,kBAAkB,CAACQ,IAAI,CAAC,CAAC,CAAC;MAC1B,IAAIX,kBAAkB,EAAE;QACnBA,kBAAkB,CAAC,0BAA0B,EAAE,MAAM,CAAC;MAC3D;IACJ,CAAC,CAAC,OAAOY,GAAG,EAAE;MACVH,OAAO,CAACH,KAAK,CAAC,kCAAkC,EAAEM,GAAG,CAAC,CAAC,CAAC;MACxDL,QAAQ,CAACK,GAAG,CAACC,OAAO,IAAI,kCAAkC,CAAC;MAC3DV,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;MACzB,IAAIH,kBAAkB,EAAE;QACrBA,kBAAkB,CAAC,oCAAoCY,GAAG,CAACC,OAAO,EAAE,EAAE,OAAO,CAAC;MAClF;IACJ,CAAC,SAAS;MACNR,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACG,UAAU,EAAER,kBAAkB,CAAC,CAAC,CAAC,CAAC;;EAEtC;EACAN,SAAS,CAAC,MAAM;IACZE,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC,CAAC,CAAC;;EAE5B,OAAO;IACHM,eAAe;IACfE,SAAS;IACTE;IACA;IACA;EACJ,CAAC;AACL,CAAC;AAACL,EAAA,CAlDIF,WAAW;EAAA,QAKUD,SAAS;AAAA;AA+CpC,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}