{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { cachedFetch } from '../utils/fetchUtils';\nimport { Box, Paper, Typography, TextField, Button, Tabs, Tab, Grid, Alert, Snackbar, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, CircularProgress, Divider, Chip, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Global request cache to prevent duplicate API calls\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst apiCache = {\n  cache: {},\n  get: function (url) {\n    var _this$cache$url;\n    return (_this$cache$url = this.cache[url]) === null || _this$cache$url === void 0 ? void 0 : _this$cache$url.data;\n  },\n  set: function (url, data, ttl = 60000) {\n    // Default TTL: 1 minute\n    this.cache[url] = {\n      data,\n      expiry: Date.now() + ttl\n    };\n  },\n  isValid: function (url) {\n    const item = this.cache[url];\n    return item && item.expiry > Date.now();\n  },\n  clear: function () {\n    this.cache = {};\n  }\n};\n\n// TabPanel component for the tabs\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `tabpanel-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      padding: '20px 0'\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nconst StageEditor = () => {\n  _s();\n  const {\n    stageId: urlStageId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Add stageId state\n  const [stageId, setStageId] = useState(urlStageId || 'new');\n\n  // Local implementation of getStoredCredentials\n  const getStoredCredentials = () => {\n    return {\n      businessId: localStorage.getItem('businessId') || '',\n      businessApiKey: localStorage.getItem('businessApiKey') || ''\n    };\n  };\n\n  // Check local storage and cookies for business ID and API key\n  const getStoredValue = key => {\n    var _document$cookie$spli;\n    // Try localStorage first\n    const localStorageValue = localStorage.getItem(key);\n    if (localStorageValue) return localStorageValue;\n\n    // Then try cookies\n    const cookieValue = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith(`${key}=`))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n    if (cookieValue) return cookieValue;\n\n    // Finally try getStoredCredentials\n    const storedCredentials = getStoredCredentials();\n    if (key === 'businessId') return storedCredentials.businessId;\n    if (key === 'businessApiKey') return storedCredentials.businessApiKey;\n    return null;\n  };\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n\n  // Location state values as fallback\n  const {\n    businessId: locationBusinessId,\n    agentId: locationAgentId,\n    isNewStage\n  } = location.state || {};\n\n  // Get stored values\n  const storedBusinessId = getStoredValue('businessId') || getStoredCredentials().businessId;\n  const storedApiKey = getStoredValue('businessApiKey') || getStoredCredentials().businessApiKey;\n\n  // Use query parameters first, then location state, then stored values\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || storedBusinessId || '');\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\n  const agentId = queryParams.get('agent_id') || locationAgentId;\n  const [stage, setStage] = useState(null);\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [tabValue, setTabValue] = useState(0);\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n  const [previewLoading, setPreviewLoading] = useState(false);\n  const [previewError, setPreviewError] = useState('');\n  const [showPreview, setShowPreview] = useState(false);\n\n  // Add template saving loading states\n  const [savingTemplates, setSavingTemplates] = useState({\n    stage_selection: false,\n    data_extraction: false,\n    response_generation: false\n  });\n\n  // Add template save confirmation dialog\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [templateToSave, setTemplateToSave] = useState('');\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\n\n  // Track if component is mounted\n  const isMounted = useRef(true);\n\n  // Clear any previous fetch timeouts on unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Function to open the confirmation dialog\n  const confirmSaveTemplate = (type, asDefault = false) => {\n    setTemplateToSave(type);\n    setSaveAsDefault(asDefault);\n    setShowConfirmDialog(true);\n  };\n\n  // Function to handle dialog confirm\n  const handleConfirmSave = async () => {\n    setShowConfirmDialog(false);\n    if (templateToSave) {\n      await saveTemplate(templateToSave, saveAsDefault);\n    }\n  };\n\n  // Add validation function for credentials\n  const validateCredentials = useCallback(async () => {\n    if (!businessId || !businessApiKey) {\n      setError('Business ID and API Key are required');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n    try {\n      // Test credentials with the validate-credentials endpoint\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Invalid business ID or API key');\n      }\n      return true;\n    } catch (err) {\n      console.error('Credential validation error:', err);\n      setError('Failed to validate credentials: ' + err.message);\n      setShowBusinessIdInput(true);\n      return false;\n    }\n  }, [businessId, businessApiKey]);\n\n  // Add a throttled fetch for all templates with proper dependencies\n  const fetchAllTemplates = useCallback(async () => {\n    const {\n      businessId,\n      businessApiKey\n    } = getStoredCredentials();\n    if (!businessId || !businessApiKey || !isMounted.current) {\n      return;\n    }\n    console.log('Fetching templates for business:', businessId);\n    try {\n      const response = await cachedFetch('/templates', {\n        method: 'POST',\n        body: {\n          business_id: businessId\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error fetching templates:', response.status, errorData);\n        throw new Error(`Failed to fetch templates: ${response.status} ${errorData.message || ''}`);\n      }\n      const templates = await response.json();\n      console.log('Fetched templates:', templates);\n\n      // Organize templates by type\n      const templatesByType = templates.reduce((acc, template) => {\n        const type = template.template_type || 'other';\n        if (!acc[type]) {\n          acc[type] = [];\n        }\n        acc[type].push(template);\n        return acc;\n      }, {});\n      if (isMounted.current) {\n        setAvailableTemplates(templatesByType);\n      }\n    } catch (error) {\n      console.error('Error in fetchAllTemplates:', error);\n      if (isMounted.current) {\n        setError(`Failed to fetch templates: ${error.message}`);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    let isActive = true;\n    const initializeComponent = async () => {\n      try {\n        // Start with loading state\n        setIsLoading(true);\n\n        // Check if we have the required credentials\n        if (!businessId || !businessApiKey) {\n          setShowBusinessIdInput(true);\n          setIsLoading(false);\n          return;\n        }\n\n        // Validate credentials before proceeding\n        const isValid = await validateCredentials();\n        if (!isActive) return;\n        if (!isValid) {\n          setIsLoading(false);\n          return;\n        }\n\n        // Store validated credentials\n        localStorage.setItem('businessId', businessId);\n        localStorage.setItem('businessApiKey', businessApiKey);\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n\n        // Load stage data if needed\n        if (stageId === 'new' || isNewStage) {\n          // For new stage, just set up defaults\n          if (isActive) {\n            setStage({\n              stage_name: '',\n              stage_description: '',\n              business_id: businessId,\n              agent_id: agentId,\n              stage_selection_template_id: null,\n              data_extraction_template_id: null,\n              response_generation_template_id: null,\n              stage_config: {\n                order: 0\n              }\n            });\n          }\n        } else if (stageId) {\n          // Fetch existing stage\n          await fetchStage(stageId);\n        }\n\n        // Always fetch templates with validated credentials\n        if (isActive) {\n          await fetchAllTemplates();\n        }\n      } catch (err) {\n        console.error('Error initializing component:', err);\n        if (isActive) {\n          setError('Error initializing: ' + err.message);\n        }\n      } finally {\n        if (isActive) {\n          setIsLoading(false);\n        }\n      }\n    };\n    initializeComponent();\n    return () => {\n      isActive = false;\n    };\n  }, [stageId, businessId, businessApiKey, agentId, isNewStage, fetchAllTemplates, validateCredentials]);\n\n  // Fetch specific stage data\n  const fetchStage = async id => {\n    if (!isMounted.current || !businessId || !businessApiKey) return;\n    setIsLoading(true);\n    try {\n      const response = await cachedFetch(`/stages/${id}`);\n      if (!response.ok) throw new Error('Failed to fetch stage');\n      const data = await response.json();\n      if (isMounted.current) {\n        setStage(data);\n        setStageName(data.stage_name || '');\n        setStageDescription(data.stage_description || '');\n\n        // For each template ID in the stage, fetch the template content\n        if (data.stage_selection_template_id) {\n          fetchTemplate(data.stage_selection_template_id, 'stage_selection');\n        }\n        if (data.data_extraction_template_id) {\n          fetchTemplate(data.data_extraction_template_id, 'data_extraction');\n        }\n        if (data.response_generation_template_id) {\n          fetchTemplate(data.response_generation_template_id, 'response_generation');\n        }\n      }\n    } catch (err) {\n      if (isMounted.current) {\n        setError(err.message);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n      }\n    }\n  };\n  const fetchTemplate = async templateId => {\n    const {\n      businessId,\n      businessApiKey\n    } = getStoredCredentials();\n    if (!businessId || !businessApiKey || !templateId) {\n      console.error('Missing required parameters for fetchTemplate:', {\n        businessId,\n        businessApiKey,\n        templateId\n      });\n      return null;\n    }\n    try {\n      console.log(`Fetching template with ID: ${templateId}`);\n      const response = await cachedFetch(`/templates/${templateId}/`, {\n        method: 'POST',\n        body: {\n          business_id: businessId\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error fetching template:', response.status, errorData);\n        throw new Error(`Failed to fetch template: ${response.status} ${errorData.message || ''}`);\n      }\n      const template = await response.json();\n      console.log('Fetched template:', template);\n      return template;\n    } catch (error) {\n      console.error('Error in fetchTemplate:', error);\n      if (isMounted.current) {\n        setError(`Failed to fetch template: ${error.message}`);\n      }\n      return null;\n    }\n  };\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Fetch the selected template\n    await fetchTemplate(templateId);\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text,\n        type: type // Keep the original type, not the default type\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template for ${type}`);\n  };\n  const handlePreview = async templateType => {\n    try {\n      setPreviewLoading(true);\n      setPreviewError('');\n      const templateText = templates[templateType].text;\n      if (!templateText.trim()) {\n        setPreviewError('Template text is empty');\n        return;\n      }\n      if (!businessApiKey) {\n        setPreviewError('Business API key is required but was not found');\n        setShowBusinessIdInput(true);\n        return;\n      }\n\n      // Prepare preview request\n      const previewRequest = {\n        template_type: templateType,\n        template_text: templateText,\n        context: {\n          conversation_history: [{\n            role: \"user\",\n            content: \"I'm interested in your products\"\n          }, {\n            role: \"assistant\",\n            content: \"I'd be happy to tell you about our products. What type are you interested in?\"\n          }],\n          extracted_data: {\n            customer_name: \"John Doe\",\n            product_interest: \"shoes\",\n            budget: \"$100\"\n          }\n        }\n      };\n\n      // Try multiple possible endpoints (for compatibility)\n      const endpoints = ['/templates/render', '/render_template', '/api/templates/preview'];\n      let response = null;\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\n          response = await cachedFetch(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(previewRequest)\n          });\n          if (response.ok) break;\n        } catch (endpointErr) {\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\n        }\n      }\n\n      // If we got a successful response from any endpoint\n      if (response && response.ok) {\n        const data = await response.json();\n        console.log('Preview response:', data);\n        setPreviewData(data);\n        setShowPreview(true);\n      } else {\n        // Local fallback preview if no endpoint worked\n        console.log('All endpoint attempts failed, using local preview');\n\n        // Simple variable replacement for demonstration\n        let previewText = templateText;\n        const variables = extractVariables(templateText);\n\n        // Replace variables with sample values\n        variables.forEach(variable => {\n          const sampleValue = `[Sample ${variable}]`;\n          previewText = previewText.replace(new RegExp(`{{\\\\s*${variable}\\\\s*}}`, 'g'), sampleValue);\n        });\n        setPreviewData({\n          rendered_text: previewText\n        });\n        setShowPreview(true);\n      }\n    } catch (err) {\n      console.error('Error generating preview:', err);\n      setPreviewError(`Failed to generate preview: ${err.message}`);\n    } finally {\n      setPreviewLoading(false);\n    }\n  };\n\n  // Update saveTemplate function to use cachedFetch\n  const saveTemplate = async (templateType, asDefault = false) => {\n    // Don't allow saving if we don't have valid credentials\n    if (!businessId) {\n      setError('Business ID is required to save templates');\n      return;\n    }\n\n    // Set loading state for this specific template type\n    setSavingTemplates(prev => ({\n      ...prev,\n      [templateType]: true\n    }));\n    try {\n      const templateData = {\n        business_id: businessId,\n        template_text: templates[templateType].text,\n        template_type: asDefault ? `default_${templateType}` : templateType,\n        variables: variables[templateType]\n      };\n\n      // Add template name if available\n      if (templates[templateType].name) {\n        templateData.template_name = templates[templateType].name;\n      }\n\n      // If we have an existing template ID and we're not saving as default, update it\n      const templateId = templates[templateType].id;\n      let url, method;\n      if (templateId && !asDefault) {\n        // Update existing template\n        url = `/templates/${templateId}`;\n        method = 'PUT';\n      } else {\n        // Create new template\n        url = '/templates';\n        method = 'POST';\n      }\n      console.log(`${method} template to ${url}`, templateData);\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(templateData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to save ${templateType} template`);\n      }\n      const result = await response.json();\n      console.log('Template saved successfully:', result);\n\n      // Update local state with new template ID if it was created\n      if (method === 'POST' && result.template_id) {\n        setTemplates(prev => ({\n          ...prev,\n          [templateType]: {\n            ...prev[templateType],\n            id: result.template_id\n          }\n        }));\n\n        // Update stage with new template ID if needed\n        if (stage && !asDefault) {\n          const templateIdField = `${templateType}_template_id`;\n          setStage(prev => ({\n            ...prev,\n            [templateIdField]: result.template_id\n          }));\n        }\n      }\n\n      // Show success message\n      const successAction = method === 'POST' ? 'created' : 'updated';\n      const successType = asDefault ? 'default template' : 'template';\n      setSuccess(`${templateType} ${successType} ${successAction} successfully`);\n\n      // Refresh templates list\n      fetchAllTemplates();\n    } catch (err) {\n      console.error(`Error saving ${templateType} template:`, err);\n      setError(err.message || `Failed to save ${templateType} template`);\n    } finally {\n      // Clear loading state\n      setSavingTemplates(prev => ({\n        ...prev,\n        [templateType]: false\n      }));\n    }\n  };\n\n  // Update handleSave function\n  const handleSave = async () => {\n    if (!stageName.trim()) {\n      setError('Stage name is required');\n      return;\n    }\n    if (!businessId) {\n      setError('Business ID is required');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // First save any unsaved templates\n      const templatePromises = [];\n\n      // Create template save promises for each template type\n      const templateTypes = ['stage_selection', 'data_extraction', 'response_generation'];\n      for (const templateType of templateTypes) {\n        // Only save templates that have content but no ID\n        if (templates[templateType].text && !templates[templateType].id) {\n          // Set template name based on stage name\n          templates[templateType].name = `${stageName} - ${templateType.replace('_', ' ').toUpperCase()}`;\n          templatePromises.push(saveTemplate(templateType, false));\n        }\n      }\n\n      // Wait for all templates to be saved\n      await Promise.all(templatePromises);\n      const method = stageId === 'new' ? 'POST' : 'PUT';\n      const url = stageId === 'new' ? '/stages' : `/stages/${stageId}`;\n\n      // Get updated template IDs from the templates object\n      const selectionTemplateId = templates.stage_selection.id;\n      const extractionTemplateId = templates.data_extraction.id;\n      const responseTemplateId = templates.response_generation.id;\n      const stageData = {\n        stage_name: stageName,\n        stage_description: stageDescription,\n        business_id: businessId,\n        stage_selection_template_id: selectionTemplateId,\n        data_extraction_template_id: extractionTemplateId,\n        response_generation_template_id: responseTemplateId,\n        stage_type: (stage === null || stage === void 0 ? void 0 : stage.stage_type) || 'conversation'\n      };\n\n      // Only include agent_id if it exists\n      if (agentId) {\n        stageData.agent_id = agentId;\n      }\n      console.log(`Saving stage with ${method} to ${url}:`, stageData);\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(stageData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to save stage');\n      }\n      const result = await response.json();\n      console.log('Stage saved successfully:', result);\n      setSuccess('Stage saved successfully');\n\n      // If this was a new stage, update the stageId and URL\n      if (stageId === 'new' && result.stage_id) {\n        setStageId(result.stage_id);\n\n        // Update URL without page reload\n        const newUrl = `/stage-editor/${result.stage_id}?business_id=${businessId}${agentId ? `&agent_id=${agentId}` : ''}`;\n        window.history.pushState({}, '', newUrl);\n      }\n\n      // Fetch the updated stage data\n      if (result.stage_id) {\n        fetchStage(result.stage_id);\n      }\n    } catch (err) {\n      console.error('Error saving stage:', err);\n      setError(err.message || 'Failed to save stage');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleCancel = () => {\n    // Navigate back to stage manager\n    let backUrl;\n    if (businessId && agentId) {\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n    } else if (businessId) {\n      backUrl = `/stage-management/business_id=${businessId}`;\n    } else {\n      backUrl = '/stage-management';\n    }\n    navigate(backUrl);\n  };\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  // Update the credentials save function\n  const saveCredentials = () => {\n    if (!businessId || !businessApiKey) {\n      setError('Please enter both Business ID and API Key');\n      return;\n    }\n\n    // Validate credentials first\n    validateCredentials().then(isValid => {\n      if (isValid) {\n        // Save to both localStorage and cookies\n        localStorage.setItem('businessId', businessId);\n        localStorage.setItem('businessApiKey', businessApiKey);\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n        setShowBusinessIdInput(false);\n        setSuccess('Business credentials validated and saved');\n\n        // Reload templates\n        fetchAllTemplates();\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setError(''),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setSuccess(''),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 9\n    }, this), (showBusinessIdInput || !businessId || !businessApiKey) && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        border: '1px dashed',\n        borderColor: 'warning.main',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"warning.main\",\n        gutterBottom: true,\n        children: \"Business Credentials Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business ID\",\n            value: businessId,\n            onChange: e => setBusinessId(e.target.value),\n            placeholder: \"Enter your business ID\",\n            helperText: \"Required for saving templates and stages\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 863,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business API Key\",\n            value: businessApiKey,\n            onChange: e => setBusinessApiKey(e.target.value),\n            placeholder: \"Enter your business API key\",\n            helperText: \"Required for authentication\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: saveCredentials,\n            children: \"Validate & Save Credentials\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Stage Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: stageName,\n              onChange: e => setStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 909,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value),\n              multiline: true,\n              rows: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 919,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          my: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tabValue,\n          onChange: handleTabChange,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Stage Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Data Extraction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Response Generation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 0,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"stage-selection-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 949,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"stage-selection-template-label\",\n                value: templates.stage_selection.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('stage_selection', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 957,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 956,\n                  columnNumber: 21\n                }, this), availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 960,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 950,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 948,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.stage_selection.id ? `Template ID: ${templates.stage_selection.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 968,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Apply Default Template\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => handleApplyDefaultTemplate('stage_selection'),\n                  size: \"small\",\n                  children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 974,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 967,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 1,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"data-extraction-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 985,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"data-extraction-template-label\",\n                value: templates.data_extraction.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('data_extraction', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 993,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 992,\n                  columnNumber: 21\n                }, this), availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 996,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 986,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 984,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.data_extraction.id ? `Template ID: ${templates.data_extraction.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1004,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Apply Default Template\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => handleApplyDefaultTemplate('data_extraction'),\n                  size: \"small\",\n                  children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1010,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1009,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1008,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1003,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"response-generation-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1021,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"response-generation-template-label\",\n                value: templates.response_generation.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('response_generation', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1029,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1028,\n                  columnNumber: 21\n                }, this), availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1032,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1022,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.response_generation.id ? `Template ID: ${templates.response_generation.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1040,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Apply Default Template\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => handleApplyDefaultTemplate('response_generation'),\n                  size: \"small\",\n                  children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1046,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1045,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1044,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          my: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handlePreview('stage_selection'),\n          sx: {\n            mb: 2\n          },\n          children: \"Preview Stage Selection Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handlePreview('data_extraction'),\n          sx: {\n            mb: 2\n          },\n          children: \"Preview Data Extraction Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handlePreview('response_generation'),\n          sx: {\n            mb: 2\n          },\n          children: \"Preview Response Generation Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 13\n        }, this), previewLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 15\n        }, this) : previewError ? /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            mt: 2\n          },\n          children: previewError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1088,\n          columnNumber: 15\n        }, this) : showPreview && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Preview Result\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1094,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: (previewData === null || previewData === void 0 ? void 0 : previewData.rendered_text) || (previewData === null || previewData === void 0 ? void 0 : previewData.template_text) || 'No preview data available'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1097,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1093,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 832,\n    columnNumber: 5\n  }, this);\n};\n_s(StageEditor, \"D/e4+y+B21VLOjc3+8/WfxiyHkU=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c2 = StageEditor;\nexport default StageEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"StageEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useParams","useNavigate","useLocation","cachedFetch","Box","Paper","Typography","TextField","Button","Tabs","Tab","Grid","Alert","Snackbar","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","CircularProgress","Divider","Chip","Dialog","DialogTitle","DialogContent","DialogActions","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","ArrowBackIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","apiCache","cache","get","url","_this$cache$url","data","set","ttl","expiry","Date","now","isValid","item","clear","TabPanel","props","children","value","index","other","role","hidden","id","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","StageEditor","_s","stageId","urlStageId","navigate","location","setStageId","getStoredCredentials","businessId","localStorage","getItem","businessApiKey","getStoredValue","key","_document$cookie$spli","localStorageValue","cookieValue","document","cookie","split","find","row","startsWith","storedCredentials","queryParams","URLSearchParams","search","queryBusinessId","locationBusinessId","agentId","locationAgentId","isNewStage","state","storedBusinessId","storedApiKey","setBusinessId","setBusinessApiKey","showBusinessIdInput","setShowBusinessIdInput","stage","setStage","stageName","setStageName","stageDescription","setStageDescription","tabValue","setTabValue","templates","setTemplates","stage_selection","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","isLoading","setIsLoading","previewData","setPreviewData","previewLoading","setPreviewLoading","previewError","setPreviewError","showPreview","setShowPreview","savingTemplates","setSavingTemplates","showConfirmDialog","setShowConfirmDialog","templateToSave","setTemplateToSave","saveAsDefault","setSaveAsDefault","isMounted","current","confirmSaveTemplate","asDefault","handleConfirmSave","saveTemplate","validateCredentials","response","fetch","method","headers","credentials","ok","Error","err","console","message","fetchAllTemplates","log","body","business_id","errorData","json","catch","status","templatesByType","reduce","acc","template","template_type","push","isActive","initializeComponent","setItem","stage_name","stage_description","agent_id","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","stage_config","order","fetchStage","fetchTemplate","templateId","extractVariables","matches","match","map","slice","handleTemplateChange","prev","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","template_text","handlePreview","templateType","templateText","trim","previewRequest","context","conversation_history","content","extracted_data","customer_name","product_interest","budget","endpoints","endpoint","JSON","stringify","endpointErr","warn","previewText","forEach","variable","sampleValue","replace","RegExp","rendered_text","templateData","name","template_name","result","template_id","templateIdField","successAction","successType","handleSave","templatePromises","templateTypes","toUpperCase","Promise","all","selectionTemplateId","extractionTemplateId","responseTemplateId","stageData","stage_type","stage_id","newUrl","window","history","pushState","handleCancel","backUrl","handleTabChange","event","newValue","saveCredentials","then","sx","p","mb","display","alignItems","onClick","mr","variant","severity","onClose","border","borderColor","borderRadius","color","gutterBottom","container","spacing","xs","md","fullWidth","label","onChange","e","target","placeholder","helperText","required","justifyContent","multiline","rows","my","labelId","title","size","mt","_c2","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport { cachedFetch } from '../utils/fetchUtils';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Divider,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// Global request cache to prevent duplicate API calls\r\nconst apiCache = {\r\n  cache: {},\r\n  get: function(url) {\r\n    return this.cache[url]?.data;\r\n  },\r\n  set: function(url, data, ttl = 60000) { // Default TTL: 1 minute\r\n    this.cache[url] = {\r\n      data,\r\n      expiry: Date.now() + ttl\r\n    };\r\n  },\r\n  isValid: function(url) {\r\n    const item = this.cache[url];\r\n    return item && item.expiry > Date.now();\r\n  },\r\n  clear: function() {\r\n    this.cache = {};\r\n  }\r\n};\r\n\r\n// TabPanel component for the tabs\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n      style={{ padding: '20px 0' }}\r\n    >\r\n      {value === index && (\r\n        <Box>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StageEditor = () => {\r\n  const { stageId: urlStageId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Add stageId state\r\n  const [stageId, setStageId] = useState(urlStageId || 'new');\r\n  \r\n  // Local implementation of getStoredCredentials\r\n  const getStoredCredentials = () => {\r\n    return {\r\n      businessId: localStorage.getItem('businessId') || '',\r\n      businessApiKey: localStorage.getItem('businessApiKey') || ''\r\n    };\r\n  };\r\n  \r\n  // Check local storage and cookies for business ID and API key\r\n  const getStoredValue = (key) => {\r\n    // Try localStorage first\r\n    const localStorageValue = localStorage.getItem(key);\r\n    if (localStorageValue) return localStorageValue;\r\n    \r\n    // Then try cookies\r\n    const cookieValue = document.cookie\r\n      .split('; ')\r\n      .find(row => row.startsWith(`${key}=`))\r\n      ?.split('=')[1];\r\n    if (cookieValue) return cookieValue;\r\n    \r\n    // Finally try getStoredCredentials\r\n    const storedCredentials = getStoredCredentials();\r\n    if (key === 'businessId') return storedCredentials.businessId;\r\n    if (key === 'businessApiKey') return storedCredentials.businessApiKey;\r\n    \r\n    return null;\r\n  };\r\n  \r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  \r\n  // Location state values as fallback\r\n  const { businessId: locationBusinessId, agentId: locationAgentId, isNewStage } = location.state || {};\r\n  \r\n  // Get stored values\r\n  const storedBusinessId = getStoredValue('businessId') || getStoredCredentials().businessId;\r\n  const storedApiKey = getStoredValue('businessApiKey') || getStoredCredentials().businessApiKey;\r\n  \r\n  // Use query parameters first, then location state, then stored values\r\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || storedBusinessId || '');\r\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\r\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\r\n  \r\n  const agentId = queryParams.get('agent_id') || locationAgentId;\r\n  \r\n  const [stage, setStage] = useState(null);\r\n  const [stageName, setStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [previewLoading, setPreviewLoading] = useState(false);\r\n  const [previewError, setPreviewError] = useState('');\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  \r\n  // Add template saving loading states\r\n  const [savingTemplates, setSavingTemplates] = useState({\r\n    stage_selection: false,\r\n    data_extraction: false,\r\n    response_generation: false\r\n  });\r\n\r\n  // Add template save confirmation dialog\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [templateToSave, setTemplateToSave] = useState('');\r\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\r\n\r\n  // Track if component is mounted\r\n  const isMounted = useRef(true);\r\n  \r\n  // Clear any previous fetch timeouts on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  // Function to open the confirmation dialog\r\n  const confirmSaveTemplate = (type, asDefault = false) => {\r\n    setTemplateToSave(type);\r\n    setSaveAsDefault(asDefault);\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  // Function to handle dialog confirm\r\n  const handleConfirmSave = async () => {\r\n    setShowConfirmDialog(false);\r\n    if (templateToSave) {\r\n      await saveTemplate(templateToSave, saveAsDefault);\r\n    }\r\n  };\r\n\r\n  // Add validation function for credentials\r\n  const validateCredentials = useCallback(async () => {\r\n    if (!businessId || !businessApiKey) {\r\n      setError('Business ID and API Key are required');\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Test credentials with the validate-credentials endpoint\r\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Invalid business ID or API key');\r\n      }\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Credential validation error:', err);\r\n      setError('Failed to validate credentials: ' + err.message);\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n  }, [businessId, businessApiKey]);\r\n\r\n  // Add a throttled fetch for all templates with proper dependencies\r\n  const fetchAllTemplates = useCallback(async () => {\r\n    const { businessId, businessApiKey } = getStoredCredentials();\r\n    \r\n    if (!businessId || !businessApiKey || !isMounted.current) {\r\n      return;\r\n    }\r\n    \r\n    console.log('Fetching templates for business:', businessId);\r\n    \r\n    try {\r\n      const response = await cachedFetch('/templates', {\r\n        method: 'POST',\r\n        body: { business_id: businessId }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Error fetching templates:', response.status, errorData);\r\n        throw new Error(`Failed to fetch templates: ${response.status} ${errorData.message || ''}`);\r\n      }\r\n      \r\n      const templates = await response.json();\r\n      console.log('Fetched templates:', templates);\r\n      \r\n      // Organize templates by type\r\n      const templatesByType = templates.reduce((acc, template) => {\r\n        const type = template.template_type || 'other';\r\n        if (!acc[type]) {\r\n          acc[type] = [];\r\n        }\r\n        acc[type].push(template);\r\n        return acc;\r\n      }, {});\r\n      \r\n      if (isMounted.current) {\r\n        setAvailableTemplates(templatesByType);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in fetchAllTemplates:', error);\r\n      if (isMounted.current) {\r\n        setError(`Failed to fetch templates: ${error.message}`);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isActive = true;\r\n    \r\n    const initializeComponent = async () => {\r\n      try {\r\n        // Start with loading state\r\n        setIsLoading(true);\r\n        \r\n        // Check if we have the required credentials\r\n        if (!businessId || !businessApiKey) {\r\n          setShowBusinessIdInput(true);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // Validate credentials before proceeding\r\n        const isValid = await validateCredentials();\r\n        if (!isActive) return;\r\n        \r\n        if (!isValid) {\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // Store validated credentials\r\n        localStorage.setItem('businessId', businessId);\r\n        localStorage.setItem('businessApiKey', businessApiKey);\r\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n        \r\n        // Load stage data if needed\r\n        if (stageId === 'new' || isNewStage) {\r\n          // For new stage, just set up defaults\r\n          if (isActive) {\r\n            setStage({\r\n              stage_name: '',\r\n              stage_description: '',\r\n              business_id: businessId,\r\n              agent_id: agentId,\r\n              stage_selection_template_id: null,\r\n              data_extraction_template_id: null,\r\n              response_generation_template_id: null,\r\n              stage_config: { order: 0 }\r\n            });\r\n          }\r\n        } else if (stageId) {\r\n          // Fetch existing stage\r\n          await fetchStage(stageId);\r\n        }\r\n        \r\n        // Always fetch templates with validated credentials\r\n        if (isActive) {\r\n          await fetchAllTemplates();\r\n        }\r\n      } catch (err) {\r\n        console.error('Error initializing component:', err);\r\n        if (isActive) {\r\n          setError('Error initializing: ' + err.message);\r\n        }\r\n      } finally {\r\n        if (isActive) {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    initializeComponent();\r\n    \r\n    return () => {\r\n      isActive = false;\r\n    };\r\n  }, [stageId, businessId, businessApiKey, agentId, isNewStage, fetchAllTemplates, validateCredentials]);\r\n\r\n  // Fetch specific stage data\r\n  const fetchStage = async (id) => {\r\n    if (!isMounted.current || !businessId || !businessApiKey) return;\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      const response = await cachedFetch(`/stages/${id}`);\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch stage');\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (isMounted.current) {\r\n        setStage(data);\r\n        setStageName(data.stage_name || '');\r\n        setStageDescription(data.stage_description || '');\r\n        \r\n        // For each template ID in the stage, fetch the template content\r\n        if (data.stage_selection_template_id) {\r\n          fetchTemplate(data.stage_selection_template_id, 'stage_selection');\r\n        }\r\n        if (data.data_extraction_template_id) {\r\n          fetchTemplate(data.data_extraction_template_id, 'data_extraction');\r\n        }\r\n        if (data.response_generation_template_id) {\r\n          fetchTemplate(data.response_generation_template_id, 'response_generation');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (isMounted.current) {\r\n        setError(err.message);\r\n      }\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = async (templateId) => {\r\n    const { businessId, businessApiKey } = getStoredCredentials();\r\n    \r\n    if (!businessId || !businessApiKey || !templateId) {\r\n      console.error('Missing required parameters for fetchTemplate:', { businessId, businessApiKey, templateId });\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      console.log(`Fetching template with ID: ${templateId}`);\r\n      \r\n      const response = await cachedFetch(`/templates/${templateId}/`, {\r\n        method: 'POST',\r\n        body: { business_id: businessId }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Error fetching template:', response.status, errorData);\r\n        throw new Error(`Failed to fetch template: ${response.status} ${errorData.message || ''}`);\r\n      }\r\n      \r\n      const template = await response.json();\r\n      console.log('Fetched template:', template);\r\n      \r\n      return template;\r\n    } catch (error) {\r\n      console.error('Error in fetchTemplate:', error);\r\n      if (isMounted.current) {\r\n        setError(`Failed to fetch template: ${error.message}`);\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Fetch the selected template\r\n    await fetchTemplate(templateId);\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text,\r\n        type: type // Keep the original type, not the default type\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template for ${type}`);\r\n  };\r\n\r\n  const handlePreview = async (templateType) => {\r\n    try {\r\n      setPreviewLoading(true);\r\n      setPreviewError('');\r\n      \r\n      const templateText = templates[templateType].text;\r\n      if (!templateText.trim()) {\r\n        setPreviewError('Template text is empty');\r\n        return;\r\n      }\r\n      \r\n      if (!businessApiKey) {\r\n        setPreviewError('Business API key is required but was not found');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n      \r\n      // Prepare preview request\r\n      const previewRequest = {\r\n        template_type: templateType,\r\n        template_text: templateText,\r\n        context: {\r\n          conversation_history: [\r\n            { role: \"user\", content: \"I'm interested in your products\" },\r\n            { role: \"assistant\", content: \"I'd be happy to tell you about our products. What type are you interested in?\" }\r\n          ],\r\n          extracted_data: {\r\n            customer_name: \"John Doe\",\r\n            product_interest: \"shoes\",\r\n            budget: \"$100\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Try multiple possible endpoints (for compatibility)\r\n      const endpoints = [\r\n        '/templates/render',\r\n        '/render_template',\r\n        '/api/templates/preview'\r\n      ];\r\n      \r\n      let response = null;\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\r\n          \r\n          response = await cachedFetch(endpoint, {\r\n            method: 'POST',\r\n            body: JSON.stringify(previewRequest)\r\n          });\r\n          \r\n          if (response.ok) break;\r\n        } catch (endpointErr) {\r\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\r\n        }\r\n      }\r\n      \r\n      // If we got a successful response from any endpoint\r\n      if (response && response.ok) {\r\n        const data = await response.json();\r\n        console.log('Preview response:', data);\r\n        setPreviewData(data);\r\n        setShowPreview(true);\r\n      } else {\r\n        // Local fallback preview if no endpoint worked\r\n        console.log('All endpoint attempts failed, using local preview');\r\n        \r\n        // Simple variable replacement for demonstration\r\n        let previewText = templateText;\r\n        const variables = extractVariables(templateText);\r\n        \r\n        // Replace variables with sample values\r\n        variables.forEach(variable => {\r\n          const sampleValue = `[Sample ${variable}]`;\r\n          previewText = previewText.replace(new RegExp(`{{\\\\s*${variable}\\\\s*}}`, 'g'), sampleValue);\r\n        });\r\n        \r\n        setPreviewData({ rendered_text: previewText });\r\n        setShowPreview(true);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating preview:', err);\r\n      setPreviewError(`Failed to generate preview: ${err.message}`);\r\n    } finally {\r\n      setPreviewLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update saveTemplate function to use cachedFetch\r\n  const saveTemplate = async (templateType, asDefault = false) => {\r\n    // Don't allow saving if we don't have valid credentials\r\n    if (!businessId) {\r\n      setError('Business ID is required to save templates');\r\n      return;\r\n    }\r\n    \r\n    // Set loading state for this specific template type\r\n    setSavingTemplates(prev => ({\r\n      ...prev,\r\n      [templateType]: true\r\n    }));\r\n    \r\n    try {\r\n      const templateData = {\r\n        business_id: businessId,\r\n        template_text: templates[templateType].text,\r\n        template_type: asDefault ? `default_${templateType}` : templateType,\r\n        variables: variables[templateType]\r\n      };\r\n      \r\n      // Add template name if available\r\n      if (templates[templateType].name) {\r\n        templateData.template_name = templates[templateType].name;\r\n      }\r\n      \r\n      // If we have an existing template ID and we're not saving as default, update it\r\n      const templateId = templates[templateType].id;\r\n      let url, method;\r\n      \r\n      if (templateId && !asDefault) {\r\n        // Update existing template\r\n        url = `/templates/${templateId}`;\r\n        method = 'PUT';\r\n      } else {\r\n        // Create new template\r\n        url = '/templates';\r\n        method = 'POST';\r\n      }\r\n      \r\n      console.log(`${method} template to ${url}`, templateData);\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(templateData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || `Failed to save ${templateType} template`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Template saved successfully:', result);\r\n      \r\n      // Update local state with new template ID if it was created\r\n      if (method === 'POST' && result.template_id) {\r\n        setTemplates(prev => ({\r\n          ...prev,\r\n          [templateType]: {\r\n            ...prev[templateType],\r\n            id: result.template_id\r\n          }\r\n        }));\r\n        \r\n        // Update stage with new template ID if needed\r\n        if (stage && !asDefault) {\r\n          const templateIdField = `${templateType}_template_id`;\r\n          setStage(prev => ({\r\n            ...prev,\r\n            [templateIdField]: result.template_id\r\n          }));\r\n        }\r\n      }\r\n      \r\n      // Show success message\r\n      const successAction = method === 'POST' ? 'created' : 'updated';\r\n      const successType = asDefault ? 'default template' : 'template';\r\n      setSuccess(`${templateType} ${successType} ${successAction} successfully`);\r\n      \r\n      // Refresh templates list\r\n      fetchAllTemplates();\r\n      \r\n    } catch (err) {\r\n      console.error(`Error saving ${templateType} template:`, err);\r\n      setError(err.message || `Failed to save ${templateType} template`);\r\n    } finally {\r\n      // Clear loading state\r\n      setSavingTemplates(prev => ({\r\n        ...prev,\r\n        [templateType]: false\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Update handleSave function\r\n  const handleSave = async () => {\r\n    if (!stageName.trim()) {\r\n      setError('Stage name is required');\r\n      return;\r\n    }\r\n\r\n    if (!businessId) {\r\n      setError('Business ID is required');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // First save any unsaved templates\r\n      const templatePromises = [];\r\n      \r\n      // Create template save promises for each template type\r\n      const templateTypes = ['stage_selection', 'data_extraction', 'response_generation'];\r\n      for (const templateType of templateTypes) {\r\n        // Only save templates that have content but no ID\r\n        if (templates[templateType].text && !templates[templateType].id) {\r\n          // Set template name based on stage name\r\n          templates[templateType].name = `${stageName} - ${templateType.replace('_', ' ').toUpperCase()}`;\r\n          templatePromises.push(saveTemplate(templateType, false));\r\n        }\r\n      }\r\n      \r\n      // Wait for all templates to be saved\r\n      await Promise.all(templatePromises);\r\n      \r\n      const method = stageId === 'new' ? 'POST' : 'PUT';\r\n      const url = stageId === 'new' ? '/stages' : `/stages/${stageId}`;\r\n      \r\n      // Get updated template IDs from the templates object\r\n      const selectionTemplateId = templates.stage_selection.id;\r\n      const extractionTemplateId = templates.data_extraction.id;\r\n      const responseTemplateId = templates.response_generation.id;\r\n      \r\n      const stageData = {\r\n        stage_name: stageName,\r\n        stage_description: stageDescription,\r\n        business_id: businessId,\r\n        stage_selection_template_id: selectionTemplateId,\r\n        data_extraction_template_id: extractionTemplateId,\r\n        response_generation_template_id: responseTemplateId,\r\n        stage_type: stage?.stage_type || 'conversation'\r\n      };\r\n      \r\n      // Only include agent_id if it exists\r\n      if (agentId) {\r\n        stageData.agent_id = agentId;\r\n      }\r\n      \r\n      console.log(`Saving stage with ${method} to ${url}:`, stageData);\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(stageData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || 'Failed to save stage');\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Stage saved successfully:', result);\r\n      \r\n      setSuccess('Stage saved successfully');\r\n      \r\n      // If this was a new stage, update the stageId and URL\r\n      if (stageId === 'new' && result.stage_id) {\r\n        setStageId(result.stage_id);\r\n        \r\n        // Update URL without page reload\r\n        const newUrl = `/stage-editor/${result.stage_id}?business_id=${businessId}${agentId ? `&agent_id=${agentId}` : ''}`;\r\n        window.history.pushState({}, '', newUrl);\r\n      }\r\n      \r\n      // Fetch the updated stage data\r\n      if (result.stage_id) {\r\n        fetchStage(result.stage_id);\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('Error saving stage:', err);\r\n      setError(err.message || 'Failed to save stage');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Navigate back to stage manager\r\n    let backUrl;\r\n    if (businessId && agentId) {\r\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n    } else if (businessId) {\r\n      backUrl = `/stage-management/business_id=${businessId}`;\r\n    } else {\r\n      backUrl = '/stage-management';\r\n    }\r\n    navigate(backUrl);\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Update the credentials save function\r\n  const saveCredentials = () => {\r\n    if (!businessId || !businessApiKey) {\r\n      setError('Please enter both Business ID and API Key');\r\n      return;\r\n    }\r\n    \r\n    // Validate credentials first\r\n    validateCredentials().then(isValid => {\r\n      if (isValid) {\r\n        // Save to both localStorage and cookies\r\n        localStorage.setItem('businessId', businessId);\r\n        localStorage.setItem('businessApiKey', businessApiKey);\r\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n        \r\n        setShowBusinessIdInput(false);\r\n        setSuccess('Business credentials validated and saved');\r\n        \r\n        // Reload templates\r\n        fetchAllTemplates();\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3 }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={handleCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Business ID input section */}\r\n      {(showBusinessIdInput || !businessId || !businessApiKey) && (\r\n        <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n            Business Credentials Required\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business ID\"\r\n                value={businessId}\r\n                onChange={(e) => setBusinessId(e.target.value)}\r\n                placeholder=\"Enter your business ID\"\r\n                helperText=\"Required for saving templates and stages\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business API Key\"\r\n                value={businessApiKey}\r\n                onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                placeholder=\"Enter your business API key\"\r\n                helperText=\"Required for authentication\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"\r\n                onClick={saveCredentials}\r\n              >\r\n                Validate & Save Credentials\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n      \r\n      {isLoading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {/* Basic stage information */}\r\n          <Box sx={{ mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Stage Information\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Name\"\r\n                  value={stageName}\r\n                  onChange={(e) => setStageName(e.target.value)}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Description\"\r\n                  value={stageDescription}\r\n                  onChange={(e) => setStageDescription(e.target.value)}\r\n                  multiline\r\n                  rows={2}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          \r\n          <Divider sx={{ my: 3 }} />\r\n          \r\n          {/* Template editing section */}\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Templates\r\n            </Typography>\r\n            \r\n            <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n              <Tab label=\"Stage Selection\" />\r\n              <Tab label=\"Data Extraction\" />\r\n              <Tab label=\"Response Generation\" />\r\n            </Tabs>\r\n            \r\n            {/* Stage Selection Template */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"stage-selection-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"stage-selection-template-label\"\r\n                    value={templates.stage_selection.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('stage_selection', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.stage_selection.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.stage_selection.id ? \r\n                      `Template ID: ${templates.stage_selection.id}` : 'No template selected'}\r\n                  </Typography>\r\n                  <Tooltip title=\"Apply Default Template\">\r\n                    <IconButton onClick={() => handleApplyDefaultTemplate('stage_selection')} size=\"small\">\r\n                      <RestartAltIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Data Extraction Template */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"data-extraction-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"data-extraction-template-label\"\r\n                    value={templates.data_extraction.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('data_extraction', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.data_extraction.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.data_extraction.id ? \r\n                      `Template ID: ${templates.data_extraction.id}` : 'No template selected'}\r\n                  </Typography>\r\n                  <Tooltip title=\"Apply Default Template\">\r\n                    <IconButton onClick={() => handleApplyDefaultTemplate('data_extraction')} size=\"small\">\r\n                      <RestartAltIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Response Generation Template */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"response-generation-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"response-generation-template-label\"\r\n                    value={templates.response_generation.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('response_generation', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.response_generation.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.response_generation.id ? \r\n                      `Template ID: ${templates.response_generation.id}` : 'No template selected'}\r\n                  </Typography>\r\n                  <Tooltip title=\"Apply Default Template\">\r\n                    <IconButton onClick={() => handleApplyDefaultTemplate('response_generation')} size=\"small\">\r\n                      <RestartAltIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n            </TabPanel>\r\n          </Box>\r\n          \r\n          <Divider sx={{ my: 3 }} />\r\n          \r\n          {/* Preview section */}\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Preview\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handlePreview('stage_selection')}\r\n              sx={{ mb: 2 }}\r\n            >\r\n              Preview Stage Selection Template\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handlePreview('data_extraction')}\r\n              sx={{ mb: 2 }}\r\n            >\r\n              Preview Data Extraction Template\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handlePreview('response_generation')}\r\n              sx={{ mb: 2 }}\r\n            >\r\n              Preview Response Generation Template\r\n            </Button>\r\n            {previewLoading ? (\r\n              <CircularProgress />\r\n            ) : previewError ? (\r\n              <Alert severity=\"error\" sx={{ mt: 2 }}>\r\n                {previewError}\r\n              </Alert>\r\n            ) : (\r\n              showPreview && (\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Preview Result\r\n                  </Typography>\r\n                  <pre>{previewData?.rendered_text || previewData?.template_text || 'No preview data available'}</pre>\r\n                </Box>\r\n              )\r\n            )}\r\n          </Box>\r\n        </>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StageEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}