{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { cachedFetch } from '../utils/fetchUtils';\nimport { Box, Paper, Typography, TextField, Button, Tabs, Tab, Grid, Alert, Snackbar, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, CircularProgress, Divider, Chip, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// Global request cache to prevent duplicate API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiCache = {\n  cache: {},\n  get: function (url) {\n    var _this$cache$url;\n    return (_this$cache$url = this.cache[url]) === null || _this$cache$url === void 0 ? void 0 : _this$cache$url.data;\n  },\n  set: function (url, data, ttl = 60000) {\n    // Default TTL: 1 minute\n    this.cache[url] = {\n      data,\n      expiry: Date.now() + ttl\n    };\n  },\n  isValid: function (url) {\n    const item = this.cache[url];\n    return item && item.expiry > Date.now();\n  },\n  clear: function () {\n    this.cache = {};\n  }\n};\n\n// TabPanel component for the tabs\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `tabpanel-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      padding: '20px 0'\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nconst StageEditor = () => {\n  _s();\n  var _templates$templateTy, _availableTemplates$t, _templates$templateTy2, _templates$templateTy3, _variables$templateTy;\n  const {\n    stageId: urlStageId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Define template types array\n  const templateTypes = ['stage_selection', 'data_extraction', 'response_generation'];\n\n  // Add stageId state\n  const [stageId, setStageId] = useState(urlStageId || 'new');\n\n  // Local implementation of getStoredCredentials\n  const getStoredCredentials = () => {\n    return {\n      businessId: localStorage.getItem('businessId') || '',\n      businessApiKey: localStorage.getItem('businessApiKey') || ''\n    };\n  };\n\n  // Check local storage and cookies for business ID and API key\n  const getStoredValue = key => {\n    var _document$cookie$spli;\n    // Try localStorage first\n    const localStorageValue = localStorage.getItem(key);\n    if (localStorageValue) return localStorageValue;\n\n    // Then try cookies\n    const cookieValue = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith(`${key}=`))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n    if (cookieValue) return cookieValue;\n\n    // Finally try getStoredCredentials\n    const storedCredentials = getStoredCredentials();\n    if (key === 'businessId') return storedCredentials.businessId;\n    if (key === 'businessApiKey') return storedCredentials.businessApiKey;\n    return null;\n  };\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n\n  // Location state values as fallback\n  const {\n    businessId: locationBusinessId,\n    agentId: locationAgentId,\n    isNewStage\n  } = location.state || {};\n\n  // Get stored values\n  const storedBusinessId = getStoredValue('businessId') || getStoredCredentials().businessId;\n  const storedApiKey = getStoredValue('businessApiKey') || getStoredCredentials().businessApiKey;\n\n  // Use query parameters first, then location state, then stored values\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || storedBusinessId || '');\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\n  const agentId = queryParams.get('agent_id') || locationAgentId;\n  const [stage, setStage] = useState(null);\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [tabValue, setTabValue] = useState(0);\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n  const [previewLoading, setPreviewLoading] = useState(false);\n  const [previewError, setPreviewError] = useState('');\n  const [showPreview, setShowPreview] = useState(false);\n\n  // Add template saving loading states\n  const [savingTemplates, setSavingTemplates] = useState({\n    stage_selection: false,\n    data_extraction: false,\n    response_generation: false\n  });\n\n  // Add template save confirmation dialog\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [templateToSave, setTemplateToSave] = useState('');\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\n\n  // Track if component is mounted\n  const isMounted = useRef(true);\n\n  // Add missing state variables\n  const [previewOpen, setPreviewOpen] = useState(false);\n  const [helpOpen, setHelpOpen] = useState(false);\n\n  // Clear any previous fetch timeouts on unmount\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  // Function to open the confirmation dialog\n  const confirmSaveTemplate = (type, asDefault = false) => {\n    setTemplateToSave(type);\n    setSaveAsDefault(asDefault);\n    setShowConfirmDialog(true);\n  };\n\n  // Function to handle dialog confirm\n  const handleConfirmSave = async () => {\n    setShowConfirmDialog(false);\n    if (templateToSave) {\n      await saveTemplate(templateToSave, saveAsDefault);\n    }\n  };\n\n  // Add validation function for credentials\n  const validateCredentials = useCallback(async () => {\n    if (!businessId || !businessApiKey) {\n      setError('Business ID and API Key are required');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n    try {\n      // Test credentials with the validate-credentials endpoint\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Invalid business ID or API key');\n      }\n      return true;\n    } catch (err) {\n      console.error('Credential validation error:', err);\n      setError('Failed to validate credentials: ' + err.message);\n      setShowBusinessIdInput(true);\n      return false;\n    }\n  }, [businessId, businessApiKey]);\n\n  // Add a throttled fetch for all templates with proper dependencies\n  const fetchAllTemplates = useCallback(async () => {\n    const {\n      businessId,\n      businessApiKey\n    } = getStoredCredentials();\n    if (!businessId || !businessApiKey || !isMounted.current) {\n      return;\n    }\n    console.log('Fetching templates for business:', businessId);\n    try {\n      const response = await fetch(`/templates?business_id=${businessId}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error fetching templates:', response.status, errorData);\n        throw new Error(`Failed to fetch templates: ${response.status} ${errorData.message || ''}`);\n      }\n      const templates = await response.json();\n      console.log('Fetched templates:', templates);\n\n      // Initialize template categories\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: [],\n        default_stage_selection: [],\n        default_data_extraction: [],\n        default_response_generation: [],\n        other: []\n      };\n\n      // Map template types to their corresponding categories\n      const typeMapping = {\n        'stage_selection': 'stage_selection',\n        'data_extraction': 'data_extraction',\n        'response_generation': 'response_generation',\n        'default_stage_selection': 'default_stage_selection',\n        'default_data_extraction': 'default_data_extraction',\n        'default_response_generation': 'default_response_generation'\n      };\n\n      // Organize templates by type\n      templates.forEach(template => {\n        const type = template.template_type || 'generic';\n        const mappedType = typeMapping[type] || 'other';\n\n        // If template has no template_type, check if name contains any type keywords\n        let assignedType = mappedType;\n        if (mappedType === 'other' || mappedType === 'generic') {\n          const name = (template.template_name || '').toLowerCase();\n          if (name.includes('selection')) assignedType = 'stage_selection';else if (name.includes('extract')) assignedType = 'data_extraction';else if (name.includes('response') || name.includes('generation')) assignedType = 'response_generation';\n        }\n\n        // Add the template to the appropriate category\n        if (!templatesByType[assignedType]) {\n          templatesByType[assignedType] = [];\n        }\n        templatesByType[assignedType].push(template);\n      });\n      console.log('Organized templates by type:', templatesByType);\n      if (isMounted.current) {\n        setAvailableTemplates(templatesByType);\n      }\n    } catch (error) {\n      console.error('Error in fetchAllTemplates:', error);\n      if (isMounted.current) {\n        setError(`Failed to fetch templates: ${error.message}`);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    let isActive = true;\n    const initializeComponent = async () => {\n      try {\n        // Start with loading state\n        setIsLoading(true);\n\n        // Check if we have the required credentials\n        if (!businessId || !businessApiKey) {\n          setShowBusinessIdInput(true);\n          setIsLoading(false);\n          return;\n        }\n\n        // Validate credentials before proceeding\n        const isValid = await validateCredentials();\n        if (!isActive) return;\n        if (!isValid) {\n          setIsLoading(false);\n          return;\n        }\n\n        // Store validated credentials\n        localStorage.setItem('businessId', businessId);\n        localStorage.setItem('businessApiKey', businessApiKey);\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n\n        // Load stage data if needed\n        if (stageId === 'new' || isNewStage) {\n          // For new stage, just set up defaults\n          if (isActive) {\n            setStage({\n              stage_name: '',\n              stage_description: '',\n              business_id: businessId,\n              agent_id: agentId,\n              stage_selection_template_id: null,\n              data_extraction_template_id: null,\n              response_generation_template_id: null,\n              stage_config: {\n                order: 0\n              }\n            });\n          }\n        } else if (stageId) {\n          // Fetch existing stage\n          await fetchStage(stageId);\n        }\n\n        // Always fetch templates with validated credentials\n        if (isActive) {\n          await fetchAllTemplates();\n        }\n      } catch (err) {\n        console.error('Error initializing component:', err);\n        if (isActive) {\n          setError('Error initializing: ' + err.message);\n        }\n      } finally {\n        if (isActive) {\n          setIsLoading(false);\n        }\n      }\n    };\n    initializeComponent();\n    return () => {\n      isActive = false;\n    };\n  }, [stageId, businessId, businessApiKey, agentId, isNewStage, fetchAllTemplates, validateCredentials]);\n\n  // Fetch specific stage data\n  const fetchStage = async id => {\n    if (!isMounted.current || !businessId || !businessApiKey) return;\n    setIsLoading(true);\n    try {\n      console.log(`Fetching stage with ID: ${id} for business: ${businessId} and agent: ${agentId}`);\n\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('business_id', businessId);\n      if (agentId) {\n        params.append('agent_id', agentId);\n      }\n\n      // Use direct fetch with proper headers\n      const response = await fetch(`/stages/${id}?${params.toString()}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`Failed to fetch stage: ${response.status} ${errorData.message || ''}`);\n      }\n      const data = await response.json();\n      console.log('Fetched stage data:', data);\n      if (isMounted.current) {\n        setStage(data);\n        setStageName(data.stage_name || '');\n        setStageDescription(data.stage_description || '');\n\n        // For each template ID in the stage, fetch the template content\n        const templatePromises = [];\n        if (data.stage_selection_template_id) {\n          templatePromises.push(fetchTemplate(data.stage_selection_template_id, 'stage_selection'));\n        }\n        if (data.data_extraction_template_id) {\n          templatePromises.push(fetchTemplate(data.data_extraction_template_id, 'data_extraction'));\n        }\n        if (data.response_generation_template_id) {\n          templatePromises.push(fetchTemplate(data.response_generation_template_id, 'response_generation'));\n        }\n\n        // Wait for all templates to be fetched\n        await Promise.all(templatePromises);\n      }\n    } catch (err) {\n      console.error('Error fetching stage:', err);\n      if (isMounted.current) {\n        setError(err.message);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n      }\n    }\n  };\n  const fetchTemplate = async (templateId, type) => {\n    if (!isMounted.current || !businessId || !businessApiKey || !templateId) {\n      console.error('Missing required parameters for fetchTemplate:', {\n        businessId,\n        businessApiKey,\n        templateId\n      });\n      return null;\n    }\n    try {\n      console.log(`Fetching template with ID: ${templateId} for type: ${type}`);\n\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('business_id', businessId);\n      if (agentId) {\n        params.append('agent_id', agentId);\n      }\n      const response = await fetch(`/templates/${templateId}?${params.toString()}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`Failed to fetch template: ${response.status} ${errorData.message || ''}`);\n      }\n      const template = await response.json();\n      console.log('Fetched template:', template);\n      if (isMounted.current) {\n        // Update templates state with the fetched template\n        setTemplates(prev => ({\n          ...prev,\n          [type]: {\n            id: templateId,\n            text: template.template_text || '',\n            type: template.template_type || type,\n            name: template.template_name || ''\n          }\n        }));\n\n        // Update variables based on template text\n        const variables = extractVariables(template.template_text || '');\n        setVariables(prev => ({\n          ...prev,\n          [type]: variables\n        }));\n      }\n      return template;\n    } catch (err) {\n      console.error('Error fetching template:', err);\n      if (isMounted.current) {\n        setError(err.message);\n      }\n      return null;\n    }\n  };\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Set loading state for this template type\n    setSavingTemplates(prev => ({\n      ...prev,\n      [type]: true\n    }));\n    try {\n      // Fetch the selected template\n      const template = await fetchTemplate(templateId, type);\n      if (!template) {\n        throw new Error(`Failed to fetch template with ID: ${templateId}`);\n      }\n\n      // Template state is already updated in fetchTemplate\n      setSuccess(`Template for ${type} loaded successfully`);\n    } catch (err) {\n      console.error(`Error selecting template for ${type}:`, err);\n      setError(`Failed to load template: ${err.message}`);\n    } finally {\n      // Clear loading state\n      setSavingTemplates(prev => ({\n        ...prev,\n        [type]: false\n      }));\n    }\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text,\n        type: type // Keep the original type, not the default type\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template for ${type}`);\n  };\n  const handlePreview = async templateType => {\n    try {\n      setPreviewLoading(true);\n      setPreviewError('');\n      const templateText = templates[templateType].text;\n      if (!templateText.trim()) {\n        setPreviewError('Template text is empty');\n        return;\n      }\n      if (!businessApiKey) {\n        setPreviewError('Business API key is required but was not found');\n        setShowBusinessIdInput(true);\n        return;\n      }\n\n      // Prepare preview request\n      const previewRequest = {\n        template_type: templateType,\n        template_text: templateText,\n        context: {\n          conversation_history: [{\n            role: \"user\",\n            content: \"I'm interested in your products\"\n          }, {\n            role: \"assistant\",\n            content: \"I'd be happy to tell you about our products. What type are you interested in?\"\n          }],\n          extracted_data: {\n            customer_name: \"John Doe\",\n            product_interest: \"shoes\",\n            budget: \"$100\"\n          }\n        }\n      };\n\n      // Try multiple possible endpoints (for compatibility)\n      const endpoints = ['/templates/render', '/render_template', '/api/templates/preview'];\n      let response = null;\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\n          response = await cachedFetch(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(previewRequest)\n          });\n          if (response.ok) break;\n        } catch (endpointErr) {\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\n        }\n      }\n\n      // If we got a successful response from any endpoint\n      if (response && response.ok) {\n        const data = await response.json();\n        console.log('Preview response:', data);\n        setPreviewData(data);\n        setShowPreview(true);\n      } else {\n        // Local fallback preview if no endpoint worked\n        console.log('All endpoint attempts failed, using local preview');\n\n        // Simple variable replacement for demonstration\n        let previewText = templateText;\n        const variables = extractVariables(templateText);\n\n        // Replace variables with sample values\n        variables.forEach(variable => {\n          const sampleValue = `[Sample ${variable}]`;\n          previewText = previewText.replace(new RegExp(`{{\\\\s*${variable}\\\\s*}}`, 'g'), sampleValue);\n        });\n        setPreviewData({\n          rendered_text: previewText\n        });\n        setShowPreview(true);\n      }\n    } catch (err) {\n      console.error('Error generating preview:', err);\n      setPreviewError(`Failed to generate preview: ${err.message}`);\n    } finally {\n      setPreviewLoading(false);\n    }\n  };\n\n  // Update saveTemplate function to use cachedFetch\n  const saveTemplate = async (templateType, asDefault = false) => {\n    // Don't allow saving if we don't have valid credentials\n    if (!businessId) {\n      setError('Business ID is required to save templates');\n      return;\n    }\n\n    // Set loading state for this specific template type\n    setSavingTemplates(prev => ({\n      ...prev,\n      [templateType]: true\n    }));\n    try {\n      const templateData = {\n        business_id: businessId,\n        template_text: templates[templateType].text,\n        template_type: asDefault ? `default_${templateType}` : templateType,\n        variables: variables[templateType]\n      };\n\n      // Add template name if available\n      if (templates[templateType].name) {\n        templateData.template_name = templates[templateType].name;\n      }\n\n      // If we have an existing template ID and we're not saving as default, update it\n      const templateId = templates[templateType].id;\n      let url, method;\n      if (templateId && !asDefault) {\n        // Update existing template\n        url = `/templates/${templateId}`;\n        method = 'PUT';\n      } else {\n        // Create new template\n        url = '/templates';\n        method = 'POST';\n      }\n      console.log(`${method} template to ${url}`, templateData);\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(templateData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to save ${templateType} template`);\n      }\n      const result = await response.json();\n      console.log('Template saved successfully:', result);\n\n      // Update local state with new template ID if it was created\n      if (method === 'POST' && result.template_id) {\n        setTemplates(prev => ({\n          ...prev,\n          [templateType]: {\n            ...prev[templateType],\n            id: result.template_id\n          }\n        }));\n\n        // Update stage with new template ID if needed\n        if (stage && !asDefault) {\n          const templateIdField = `${templateType}_template_id`;\n          setStage(prev => ({\n            ...prev,\n            [templateIdField]: result.template_id\n          }));\n        }\n      }\n\n      // Show success message\n      const successAction = method === 'POST' ? 'created' : 'updated';\n      const successType = asDefault ? 'default template' : 'template';\n      setSuccess(`${templateType} ${successType} ${successAction} successfully`);\n\n      // Refresh templates list\n      fetchAllTemplates();\n    } catch (err) {\n      console.error(`Error saving ${templateType} template:`, err);\n      setError(err.message || `Failed to save ${templateType} template`);\n    } finally {\n      // Clear loading state\n      setSavingTemplates(prev => ({\n        ...prev,\n        [templateType]: false\n      }));\n    }\n  };\n\n  // Update handleSave function\n  const handleSave = async () => {\n    if (!stageName.trim()) {\n      setError('Stage name is required');\n      return;\n    }\n    if (!businessId) {\n      setError('Business ID is required');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // First save any unsaved templates\n      const templatePromises = [];\n\n      // Create template save promises for each template type\n      const templateTypes = ['stage_selection', 'data_extraction', 'response_generation'];\n      for (const templateType of templateTypes) {\n        // Only save templates that have content but no ID\n        if (templates[templateType].text && !templates[templateType].id) {\n          // Set template name based on stage name\n          templates[templateType].name = `${stageName} - ${templateType.replace('_', ' ').toUpperCase()}`;\n          templatePromises.push(saveTemplate(templateType, false));\n        }\n      }\n\n      // Wait for all templates to be saved\n      await Promise.all(templatePromises);\n      const method = stageId === 'new' ? 'POST' : 'PUT';\n      const url = stageId === 'new' ? '/stages' : `/stages/${stageId}`;\n\n      // Get updated template IDs from the templates object\n      const selectionTemplateId = templates.stage_selection.id;\n      const extractionTemplateId = templates.data_extraction.id;\n      const responseTemplateId = templates.response_generation.id;\n      const stageData = {\n        stage_name: stageName,\n        stage_description: stageDescription,\n        business_id: businessId,\n        stage_selection_template_id: selectionTemplateId || null,\n        data_extraction_template_id: extractionTemplateId || null,\n        response_generation_template_id: responseTemplateId || null,\n        stage_type: (stage === null || stage === void 0 ? void 0 : stage.stage_type) || 'conversation'\n      };\n\n      // Only include agent_id if it exists\n      if (agentId) {\n        stageData.agent_id = agentId;\n      }\n      console.log(`Saving stage with ${method} to ${url}:`, stageData);\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(stageData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to save stage');\n      }\n      const result = await response.json();\n      console.log('Stage saved successfully:', result);\n      setSuccess('Stage saved successfully');\n\n      // If this was a new stage, update the stageId and URL\n      if (stageId === 'new' && result.stage_id) {\n        setStageId(result.stage_id);\n\n        // Update URL without page reload\n        const newUrl = `/stage-editor/${result.stage_id}?business_id=${businessId}${agentId ? `&agent_id=${agentId}` : ''}`;\n        window.history.pushState({}, '', newUrl);\n      }\n\n      // Fetch the updated stage data\n      if (result.stage_id) {\n        await fetchStage(result.stage_id);\n      }\n    } catch (err) {\n      console.error('Error saving stage:', err);\n      setError(err.message || 'Failed to save stage');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleCancel = () => {\n    // Navigate back to stage manager\n    let backUrl;\n    if (businessId && agentId) {\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n    } else if (businessId) {\n      backUrl = `/stage-management/business_id=${businessId}`;\n    } else {\n      backUrl = '/stage-management';\n    }\n    navigate(backUrl);\n  };\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  // Update the credentials save function\n  const saveCredentials = () => {\n    if (!businessId || !businessApiKey) {\n      setError('Please enter both Business ID and API Key');\n      return;\n    }\n\n    // Validate credentials first\n    validateCredentials().then(isValid => {\n      if (isValid) {\n        // Save to both localStorage and cookies\n        localStorage.setItem('businessId', businessId);\n        localStorage.setItem('businessApiKey', businessApiKey);\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n        setShowBusinessIdInput(false);\n        setSuccess('Business credentials validated and saved');\n\n        // Reload templates\n        fetchAllTemplates();\n      }\n    });\n  };\n\n  // Add missing handlers\n  const handlePreviewClose = () => {\n    setPreviewOpen(false);\n  };\n  const handleHelpClose = () => {\n    setHelpOpen(false);\n  };\n  const handleReset = () => {\n    // Reset the form to its initial state\n    if (stageId && stageId !== 'new') {\n      fetchStage(stageId);\n    } else {\n      setStageName('');\n      setStageDescription('');\n      setTemplates({\n        stage_selection: {\n          id: '',\n          text: '',\n          type: ''\n        },\n        data_extraction: {\n          id: '',\n          text: '',\n          type: ''\n        },\n        response_generation: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      });\n      setVariables({\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: []\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 995,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Stage Name\",\n            value: stageName,\n            onChange: e => setStageName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Stage Description\",\n            value: stageDescription,\n            onChange: e => setStageDescription(e.target.value),\n            multiline: true,\n            rows: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1012,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tabValue,\n        onChange: handleTabChange,\n        sx: {\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Stage Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Data Extraction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Response Generation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Select Template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1037,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: ((_templates$templateTy = templates[templateTypes[tabValue]]) === null || _templates$templateTy === void 0 ? void 0 : _templates$templateTy.id) || '',\n            onChange: e => handleTemplateSelect(templateTypes[tabValue], e.target.value),\n            label: \"Select Template\",\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: /*#__PURE__*/_jsxDEV(\"em\", {\n                children: \"None\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1044,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 15\n            }, this), (_availableTemplates$t = availableTemplates[templateTypes[tabValue]]) === null || _availableTemplates$t === void 0 ? void 0 : _availableTemplates$t.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: template.template_id,\n              children: template.template_name\n            }, template.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1038,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: `${templateTypes[tabValue]} Template`,\n        value: ((_templates$templateTy2 = templates[templateTypes[tabValue]]) === null || _templates$templateTy2 === void 0 ? void 0 : _templates$templateTy2.text) || '',\n        onChange: e => handleTemplateChange(templateTypes[tabValue], e.target.value),\n        multiline: true,\n        rows: 10,\n        disabled: !((_templates$templateTy3 = templates[templateTypes[tabValue]]) !== null && _templates$templateTy3 !== void 0 && _templates$templateTy3.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 9\n      }, this), ((_variables$templateTy = variables[templateTypes[tabValue]]) === null || _variables$templateTy === void 0 ? void 0 : _variables$templateTy.length) > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: \"Variables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 1\n          },\n          children: variables[templateTypes[tabValue]].map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n            label: variable\n          }, variable, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        gap: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleReset,\n        startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 22\n        }, this),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSave,\n        startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 22\n        }, this),\n        disabled: isLoading || savingTemplates[templateTypes[tabValue]],\n        children: isLoading || savingTemplates[templateTypes[tabValue]] ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1098,\n          columnNumber: 13\n        }, this) : 'Save'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: previewOpen,\n      onClose: handlePreviewClose,\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Stage Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Stage Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1116,\n              columnNumber: 25\n            }, this), \" \", stageName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1117,\n              columnNumber: 25\n            }, this), \" \", stageDescription]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Templates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1123,\n            columnNumber: 13\n          }, this), Object.entries(templates).map(([type, template]) => /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [type, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1126,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1126,\n              columnNumber: 17\n            }, this), template !== null && template !== void 0 && template.text ? /*#__PURE__*/_jsxDEV(Paper, {\n              sx: {\n                p: 2,\n                bgcolor: 'grey.100'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  whiteSpace: 'pre-wrap',\n                  margin: 0\n                },\n                children: template.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1129,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1128,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"text.secondary\",\n              children: \"No template selected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1134,\n              columnNumber: 19\n            }, this)]\n          }, type, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1125,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handlePreviewClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: helpOpen,\n      onClose: handleHelpClose,\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Stage Editor Help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Stage Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          paragraph: true,\n          children: \"The stage name and description help identify the purpose of this stage in your workflow.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          paragraph: true,\n          children: \"Each stage can have three types of templates:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Stage Selection:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1164,\n              columnNumber: 17\n            }, this), \" Used to determine which stage to go to next\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Data Extraction:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1165,\n              columnNumber: 17\n            }, this), \" Used to extract data from the user's input\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Response Generation:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1166,\n              columnNumber: 17\n            }, this), \" Used to generate a response to the user\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Variables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          paragraph: true,\n          children: [\"Variables are placeholders in your templates that will be replaced with actual values. They are enclosed in curly braces, like \", '{variable_name}', \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Saving\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          paragraph: true,\n          children: \"Click the Save button to save your changes. You can preview your stage before saving by clicking the Preview button.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleHelpClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 987,\n    columnNumber: 5\n  }, this);\n};\n_s(StageEditor, \"6+Tj10rCSpLOS0MOGqtT5kmTl78=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c2 = StageEditor;\nexport default StageEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"StageEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useParams","useNavigate","useLocation","cachedFetch","Box","Paper","Typography","TextField","Button","Tabs","Tab","Grid","Alert","Snackbar","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","CircularProgress","Divider","Chip","Dialog","DialogTitle","DialogContent","DialogActions","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","ArrowBackIcon","jsxDEV","_jsxDEV","apiCache","cache","get","url","_this$cache$url","data","set","ttl","expiry","Date","now","isValid","item","clear","TabPanel","props","children","value","index","other","role","hidden","id","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","StageEditor","_s","_templates$templateTy","_availableTemplates$t","_templates$templateTy2","_templates$templateTy3","_variables$templateTy","stageId","urlStageId","navigate","location","templateTypes","setStageId","getStoredCredentials","businessId","localStorage","getItem","businessApiKey","getStoredValue","key","_document$cookie$spli","localStorageValue","cookieValue","document","cookie","split","find","row","startsWith","storedCredentials","queryParams","URLSearchParams","search","queryBusinessId","locationBusinessId","agentId","locationAgentId","isNewStage","state","storedBusinessId","storedApiKey","setBusinessId","setBusinessApiKey","showBusinessIdInput","setShowBusinessIdInput","stage","setStage","stageName","setStageName","stageDescription","setStageDescription","tabValue","setTabValue","templates","setTemplates","stage_selection","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","isLoading","setIsLoading","previewData","setPreviewData","previewLoading","setPreviewLoading","previewError","setPreviewError","showPreview","setShowPreview","savingTemplates","setSavingTemplates","showConfirmDialog","setShowConfirmDialog","templateToSave","setTemplateToSave","saveAsDefault","setSaveAsDefault","isMounted","previewOpen","setPreviewOpen","helpOpen","setHelpOpen","current","confirmSaveTemplate","asDefault","handleConfirmSave","saveTemplate","validateCredentials","response","fetch","method","headers","credentials","ok","Error","err","console","message","fetchAllTemplates","log","errorData","json","catch","status","templatesByType","typeMapping","forEach","template","template_type","mappedType","assignedType","name","template_name","toLowerCase","includes","push","isActive","initializeComponent","setItem","stage_name","stage_description","business_id","agent_id","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","stage_config","order","fetchStage","params","append","toString","templatePromises","fetchTemplate","Promise","all","templateId","prev","template_text","extractVariables","matches","match","map","slice","handleTemplateChange","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","handlePreview","templateType","templateText","trim","previewRequest","context","conversation_history","content","extracted_data","customer_name","product_interest","budget","endpoints","endpoint","body","JSON","stringify","endpointErr","warn","previewText","variable","sampleValue","replace","RegExp","rendered_text","templateData","result","template_id","templateIdField","successAction","successType","handleSave","toUpperCase","selectionTemplateId","extractionTemplateId","responseTemplateId","stageData","stage_type","stage_id","newUrl","window","history","pushState","handleCancel","backUrl","handleTabChange","event","newValue","saveCredentials","then","handlePreviewClose","handleHelpClose","handleReset","severity","sx","mb","p","container","spacing","xs","fullWidth","label","onChange","e","target","required","multiline","rows","variant","gutterBottom","disabled","mt","display","flexWrap","gap","justifyContent","onClick","startIcon","color","size","open","onClose","maxWidth","my","Object","entries","bgcolor","whiteSpace","margin","paragraph","_c2","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport { cachedFetch } from '../utils/fetchUtils';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Divider,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// Global request cache to prevent duplicate API calls\r\nconst apiCache = {\r\n  cache: {},\r\n  get: function(url) {\r\n    return this.cache[url]?.data;\r\n  },\r\n  set: function(url, data, ttl = 60000) { // Default TTL: 1 minute\r\n    this.cache[url] = {\r\n      data,\r\n      expiry: Date.now() + ttl\r\n    };\r\n  },\r\n  isValid: function(url) {\r\n    const item = this.cache[url];\r\n    return item && item.expiry > Date.now();\r\n  },\r\n  clear: function() {\r\n    this.cache = {};\r\n  }\r\n};\r\n\r\n// TabPanel component for the tabs\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n      style={{ padding: '20px 0' }}\r\n    >\r\n      {value === index && (\r\n        <Box>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StageEditor = () => {\r\n  const { stageId: urlStageId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Define template types array\r\n  const templateTypes = ['stage_selection', 'data_extraction', 'response_generation'];\r\n  \r\n  // Add stageId state\r\n  const [stageId, setStageId] = useState(urlStageId || 'new');\r\n  \r\n  // Local implementation of getStoredCredentials\r\n  const getStoredCredentials = () => {\r\n    return {\r\n      businessId: localStorage.getItem('businessId') || '',\r\n      businessApiKey: localStorage.getItem('businessApiKey') || ''\r\n    };\r\n  };\r\n  \r\n  // Check local storage and cookies for business ID and API key\r\n  const getStoredValue = (key) => {\r\n    // Try localStorage first\r\n    const localStorageValue = localStorage.getItem(key);\r\n    if (localStorageValue) return localStorageValue;\r\n    \r\n    // Then try cookies\r\n    const cookieValue = document.cookie\r\n      .split('; ')\r\n      .find(row => row.startsWith(`${key}=`))\r\n      ?.split('=')[1];\r\n    if (cookieValue) return cookieValue;\r\n    \r\n    // Finally try getStoredCredentials\r\n    const storedCredentials = getStoredCredentials();\r\n    if (key === 'businessId') return storedCredentials.businessId;\r\n    if (key === 'businessApiKey') return storedCredentials.businessApiKey;\r\n    \r\n    return null;\r\n  };\r\n  \r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  \r\n  // Location state values as fallback\r\n  const { businessId: locationBusinessId, agentId: locationAgentId, isNewStage } = location.state || {};\r\n  \r\n  // Get stored values\r\n  const storedBusinessId = getStoredValue('businessId') || getStoredCredentials().businessId;\r\n  const storedApiKey = getStoredValue('businessApiKey') || getStoredCredentials().businessApiKey;\r\n  \r\n  // Use query parameters first, then location state, then stored values\r\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || storedBusinessId || '');\r\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\r\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\r\n  \r\n  const agentId = queryParams.get('agent_id') || locationAgentId;\r\n  \r\n  const [stage, setStage] = useState(null);\r\n  const [stageName, setStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [previewLoading, setPreviewLoading] = useState(false);\r\n  const [previewError, setPreviewError] = useState('');\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  \r\n  // Add template saving loading states\r\n  const [savingTemplates, setSavingTemplates] = useState({\r\n    stage_selection: false,\r\n    data_extraction: false,\r\n    response_generation: false\r\n  });\r\n\r\n  // Add template save confirmation dialog\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [templateToSave, setTemplateToSave] = useState('');\r\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\r\n\r\n  // Track if component is mounted\r\n  const isMounted = useRef(true);\r\n  \r\n  // Add missing state variables\r\n  const [previewOpen, setPreviewOpen] = useState(false);\r\n  const [helpOpen, setHelpOpen] = useState(false);\r\n  \r\n  // Clear any previous fetch timeouts on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  // Function to open the confirmation dialog\r\n  const confirmSaveTemplate = (type, asDefault = false) => {\r\n    setTemplateToSave(type);\r\n    setSaveAsDefault(asDefault);\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  // Function to handle dialog confirm\r\n  const handleConfirmSave = async () => {\r\n    setShowConfirmDialog(false);\r\n    if (templateToSave) {\r\n      await saveTemplate(templateToSave, saveAsDefault);\r\n    }\r\n  };\r\n\r\n  // Add validation function for credentials\r\n  const validateCredentials = useCallback(async () => {\r\n    if (!businessId || !businessApiKey) {\r\n      setError('Business ID and API Key are required');\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Test credentials with the validate-credentials endpoint\r\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Invalid business ID or API key');\r\n      }\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Credential validation error:', err);\r\n      setError('Failed to validate credentials: ' + err.message);\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n  }, [businessId, businessApiKey]);\r\n\r\n  // Add a throttled fetch for all templates with proper dependencies\r\n  const fetchAllTemplates = useCallback(async () => {\r\n    const { businessId, businessApiKey } = getStoredCredentials();\r\n    \r\n    if (!businessId || !businessApiKey || !isMounted.current) {\r\n      return;\r\n    }\r\n    \r\n    console.log('Fetching templates for business:', businessId);\r\n    \r\n    try {\r\n      const response = await fetch(`/templates?business_id=${businessId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Error fetching templates:', response.status, errorData);\r\n        throw new Error(`Failed to fetch templates: ${response.status} ${errorData.message || ''}`);\r\n      }\r\n      \r\n      const templates = await response.json();\r\n      console.log('Fetched templates:', templates);\r\n      \r\n      // Initialize template categories\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: [],\r\n        default_stage_selection: [],\r\n        default_data_extraction: [],\r\n        default_response_generation: [],\r\n        other: []\r\n      };\r\n      \r\n      // Map template types to their corresponding categories\r\n      const typeMapping = {\r\n        'stage_selection': 'stage_selection',\r\n        'data_extraction': 'data_extraction', \r\n        'response_generation': 'response_generation',\r\n        'default_stage_selection': 'default_stage_selection',\r\n        'default_data_extraction': 'default_data_extraction',\r\n        'default_response_generation': 'default_response_generation'\r\n      };\r\n      \r\n      // Organize templates by type\r\n      templates.forEach(template => {\r\n        const type = template.template_type || 'generic';\r\n        const mappedType = typeMapping[type] || 'other';\r\n        \r\n        // If template has no template_type, check if name contains any type keywords\r\n        let assignedType = mappedType;\r\n        if (mappedType === 'other' || mappedType === 'generic') {\r\n          const name = (template.template_name || '').toLowerCase();\r\n          if (name.includes('selection')) assignedType = 'stage_selection';\r\n          else if (name.includes('extract')) assignedType = 'data_extraction';\r\n          else if (name.includes('response') || name.includes('generation')) assignedType = 'response_generation';\r\n        }\r\n        \r\n        // Add the template to the appropriate category\r\n        if (!templatesByType[assignedType]) {\r\n          templatesByType[assignedType] = [];\r\n        }\r\n        templatesByType[assignedType].push(template);\r\n      });\r\n      \r\n      console.log('Organized templates by type:', templatesByType);\r\n      \r\n      if (isMounted.current) {\r\n        setAvailableTemplates(templatesByType);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in fetchAllTemplates:', error);\r\n      if (isMounted.current) {\r\n        setError(`Failed to fetch templates: ${error.message}`);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isActive = true;\r\n    \r\n    const initializeComponent = async () => {\r\n      try {\r\n        // Start with loading state\r\n        setIsLoading(true);\r\n        \r\n        // Check if we have the required credentials\r\n        if (!businessId || !businessApiKey) {\r\n          setShowBusinessIdInput(true);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // Validate credentials before proceeding\r\n        const isValid = await validateCredentials();\r\n        if (!isActive) return;\r\n        \r\n        if (!isValid) {\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // Store validated credentials\r\n        localStorage.setItem('businessId', businessId);\r\n        localStorage.setItem('businessApiKey', businessApiKey);\r\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n        \r\n        // Load stage data if needed\r\n        if (stageId === 'new' || isNewStage) {\r\n          // For new stage, just set up defaults\r\n          if (isActive) {\r\n            setStage({\r\n              stage_name: '',\r\n              stage_description: '',\r\n              business_id: businessId,\r\n              agent_id: agentId,\r\n              stage_selection_template_id: null,\r\n              data_extraction_template_id: null,\r\n              response_generation_template_id: null,\r\n              stage_config: { order: 0 }\r\n            });\r\n          }\r\n        } else if (stageId) {\r\n          // Fetch existing stage\r\n          await fetchStage(stageId);\r\n        }\r\n        \r\n        // Always fetch templates with validated credentials\r\n        if (isActive) {\r\n          await fetchAllTemplates();\r\n        }\r\n      } catch (err) {\r\n        console.error('Error initializing component:', err);\r\n        if (isActive) {\r\n          setError('Error initializing: ' + err.message);\r\n        }\r\n      } finally {\r\n        if (isActive) {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    initializeComponent();\r\n    \r\n    return () => {\r\n      isActive = false;\r\n    };\r\n  }, [stageId, businessId, businessApiKey, agentId, isNewStage, fetchAllTemplates, validateCredentials]);\r\n\r\n  // Fetch specific stage data\r\n  const fetchStage = async (id) => {\r\n    if (!isMounted.current || !businessId || !businessApiKey) return;\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      console.log(`Fetching stage with ID: ${id} for business: ${businessId} and agent: ${agentId}`);\r\n      \r\n      // Build query parameters\r\n      const params = new URLSearchParams();\r\n      params.append('business_id', businessId);\r\n      if (agentId) {\r\n        params.append('agent_id', agentId);\r\n      }\r\n      \r\n      // Use direct fetch with proper headers\r\n      const response = await fetch(`/stages/${id}?${params.toString()}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(`Failed to fetch stage: ${response.status} ${errorData.message || ''}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Fetched stage data:', data);\r\n      \r\n      if (isMounted.current) {\r\n        setStage(data);\r\n        setStageName(data.stage_name || '');\r\n        setStageDescription(data.stage_description || '');\r\n        \r\n        // For each template ID in the stage, fetch the template content\r\n        const templatePromises = [];\r\n        if (data.stage_selection_template_id) {\r\n          templatePromises.push(fetchTemplate(data.stage_selection_template_id, 'stage_selection'));\r\n        }\r\n        if (data.data_extraction_template_id) {\r\n          templatePromises.push(fetchTemplate(data.data_extraction_template_id, 'data_extraction'));\r\n        }\r\n        if (data.response_generation_template_id) {\r\n          templatePromises.push(fetchTemplate(data.response_generation_template_id, 'response_generation'));\r\n        }\r\n        \r\n        // Wait for all templates to be fetched\r\n        await Promise.all(templatePromises);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching stage:', err);\r\n      if (isMounted.current) {\r\n        setError(err.message);\r\n      }\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = async (templateId, type) => {\r\n    if (!isMounted.current || !businessId || !businessApiKey || !templateId) {\r\n      console.error('Missing required parameters for fetchTemplate:', { businessId, businessApiKey, templateId });\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      console.log(`Fetching template with ID: ${templateId} for type: ${type}`);\r\n      \r\n      // Build query parameters\r\n      const params = new URLSearchParams();\r\n      params.append('business_id', businessId);\r\n      if (agentId) {\r\n        params.append('agent_id', agentId);\r\n      }\r\n      \r\n      const response = await fetch(`/templates/${templateId}?${params.toString()}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(`Failed to fetch template: ${response.status} ${errorData.message || ''}`);\r\n      }\r\n      \r\n      const template = await response.json();\r\n      console.log('Fetched template:', template);\r\n      \r\n      if (isMounted.current) {\r\n        // Update templates state with the fetched template\r\n        setTemplates(prev => ({\r\n          ...prev,\r\n          [type]: {\r\n            id: templateId,\r\n            text: template.template_text || '',\r\n            type: template.template_type || type,\r\n            name: template.template_name || ''\r\n          }\r\n        }));\r\n        \r\n        // Update variables based on template text\r\n        const variables = extractVariables(template.template_text || '');\r\n        setVariables(prev => ({\r\n          ...prev,\r\n          [type]: variables\r\n        }));\r\n      }\r\n      \r\n      return template;\r\n    } catch (err) {\r\n      console.error('Error fetching template:', err);\r\n      if (isMounted.current) {\r\n        setError(err.message);\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Set loading state for this template type\r\n    setSavingTemplates(prev => ({\r\n      ...prev,\r\n      [type]: true\r\n    }));\r\n    \r\n    try {\r\n      // Fetch the selected template\r\n      const template = await fetchTemplate(templateId, type);\r\n      \r\n      if (!template) {\r\n        throw new Error(`Failed to fetch template with ID: ${templateId}`);\r\n      }\r\n      \r\n      // Template state is already updated in fetchTemplate\r\n      setSuccess(`Template for ${type} loaded successfully`);\r\n    } catch (err) {\r\n      console.error(`Error selecting template for ${type}:`, err);\r\n      setError(`Failed to load template: ${err.message}`);\r\n    } finally {\r\n      // Clear loading state\r\n      setSavingTemplates(prev => ({\r\n        ...prev,\r\n        [type]: false\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text,\r\n        type: type // Keep the original type, not the default type\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template for ${type}`);\r\n  };\r\n\r\n  const handlePreview = async (templateType) => {\r\n    try {\r\n      setPreviewLoading(true);\r\n      setPreviewError('');\r\n      \r\n      const templateText = templates[templateType].text;\r\n      if (!templateText.trim()) {\r\n        setPreviewError('Template text is empty');\r\n        return;\r\n      }\r\n      \r\n      if (!businessApiKey) {\r\n        setPreviewError('Business API key is required but was not found');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n      \r\n      // Prepare preview request\r\n      const previewRequest = {\r\n        template_type: templateType,\r\n        template_text: templateText,\r\n        context: {\r\n          conversation_history: [\r\n            { role: \"user\", content: \"I'm interested in your products\" },\r\n            { role: \"assistant\", content: \"I'd be happy to tell you about our products. What type are you interested in?\" }\r\n          ],\r\n          extracted_data: {\r\n            customer_name: \"John Doe\",\r\n            product_interest: \"shoes\",\r\n            budget: \"$100\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Try multiple possible endpoints (for compatibility)\r\n      const endpoints = [\r\n        '/templates/render',\r\n        '/render_template',\r\n        '/api/templates/preview'\r\n      ];\r\n      \r\n      let response = null;\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\r\n          \r\n          response = await cachedFetch(endpoint, {\r\n            method: 'POST',\r\n            body: JSON.stringify(previewRequest)\r\n          });\r\n          \r\n          if (response.ok) break;\r\n        } catch (endpointErr) {\r\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\r\n        }\r\n      }\r\n      \r\n      // If we got a successful response from any endpoint\r\n      if (response && response.ok) {\r\n        const data = await response.json();\r\n        console.log('Preview response:', data);\r\n        setPreviewData(data);\r\n        setShowPreview(true);\r\n      } else {\r\n        // Local fallback preview if no endpoint worked\r\n        console.log('All endpoint attempts failed, using local preview');\r\n        \r\n        // Simple variable replacement for demonstration\r\n        let previewText = templateText;\r\n        const variables = extractVariables(templateText);\r\n        \r\n        // Replace variables with sample values\r\n        variables.forEach(variable => {\r\n          const sampleValue = `[Sample ${variable}]`;\r\n          previewText = previewText.replace(new RegExp(`{{\\\\s*${variable}\\\\s*}}`, 'g'), sampleValue);\r\n        });\r\n        \r\n        setPreviewData({ rendered_text: previewText });\r\n        setShowPreview(true);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating preview:', err);\r\n      setPreviewError(`Failed to generate preview: ${err.message}`);\r\n    } finally {\r\n      setPreviewLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update saveTemplate function to use cachedFetch\r\n  const saveTemplate = async (templateType, asDefault = false) => {\r\n    // Don't allow saving if we don't have valid credentials\r\n    if (!businessId) {\r\n      setError('Business ID is required to save templates');\r\n      return;\r\n    }\r\n    \r\n    // Set loading state for this specific template type\r\n    setSavingTemplates(prev => ({\r\n      ...prev,\r\n      [templateType]: true\r\n    }));\r\n    \r\n    try {\r\n      const templateData = {\r\n        business_id: businessId,\r\n        template_text: templates[templateType].text,\r\n        template_type: asDefault ? `default_${templateType}` : templateType,\r\n        variables: variables[templateType]\r\n      };\r\n      \r\n      // Add template name if available\r\n      if (templates[templateType].name) {\r\n        templateData.template_name = templates[templateType].name;\r\n      }\r\n      \r\n      // If we have an existing template ID and we're not saving as default, update it\r\n      const templateId = templates[templateType].id;\r\n      let url, method;\r\n      \r\n      if (templateId && !asDefault) {\r\n        // Update existing template\r\n        url = `/templates/${templateId}`;\r\n        method = 'PUT';\r\n      } else {\r\n        // Create new template\r\n        url = '/templates';\r\n        method = 'POST';\r\n      }\r\n      \r\n      console.log(`${method} template to ${url}`, templateData);\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(templateData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || `Failed to save ${templateType} template`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Template saved successfully:', result);\r\n      \r\n      // Update local state with new template ID if it was created\r\n      if (method === 'POST' && result.template_id) {\r\n        setTemplates(prev => ({\r\n          ...prev,\r\n          [templateType]: {\r\n            ...prev[templateType],\r\n            id: result.template_id\r\n          }\r\n        }));\r\n        \r\n        // Update stage with new template ID if needed\r\n        if (stage && !asDefault) {\r\n          const templateIdField = `${templateType}_template_id`;\r\n          setStage(prev => ({\r\n            ...prev,\r\n            [templateIdField]: result.template_id\r\n          }));\r\n        }\r\n      }\r\n      \r\n      // Show success message\r\n      const successAction = method === 'POST' ? 'created' : 'updated';\r\n      const successType = asDefault ? 'default template' : 'template';\r\n      setSuccess(`${templateType} ${successType} ${successAction} successfully`);\r\n      \r\n      // Refresh templates list\r\n      fetchAllTemplates();\r\n      \r\n    } catch (err) {\r\n      console.error(`Error saving ${templateType} template:`, err);\r\n      setError(err.message || `Failed to save ${templateType} template`);\r\n    } finally {\r\n      // Clear loading state\r\n      setSavingTemplates(prev => ({\r\n        ...prev,\r\n        [templateType]: false\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Update handleSave function\r\n  const handleSave = async () => {\r\n    if (!stageName.trim()) {\r\n      setError('Stage name is required');\r\n      return;\r\n    }\r\n\r\n    if (!businessId) {\r\n      setError('Business ID is required');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // First save any unsaved templates\r\n      const templatePromises = [];\r\n      \r\n      // Create template save promises for each template type\r\n      const templateTypes = ['stage_selection', 'data_extraction', 'response_generation'];\r\n      for (const templateType of templateTypes) {\r\n        // Only save templates that have content but no ID\r\n        if (templates[templateType].text && !templates[templateType].id) {\r\n          // Set template name based on stage name\r\n          templates[templateType].name = `${stageName} - ${templateType.replace('_', ' ').toUpperCase()}`;\r\n          templatePromises.push(saveTemplate(templateType, false));\r\n        }\r\n      }\r\n      \r\n      // Wait for all templates to be saved\r\n      await Promise.all(templatePromises);\r\n      \r\n      const method = stageId === 'new' ? 'POST' : 'PUT';\r\n      const url = stageId === 'new' ? '/stages' : `/stages/${stageId}`;\r\n      \r\n      // Get updated template IDs from the templates object\r\n      const selectionTemplateId = templates.stage_selection.id;\r\n      const extractionTemplateId = templates.data_extraction.id;\r\n      const responseTemplateId = templates.response_generation.id;\r\n      \r\n      const stageData = {\r\n        stage_name: stageName,\r\n        stage_description: stageDescription,\r\n        business_id: businessId,\r\n        stage_selection_template_id: selectionTemplateId || null,\r\n        data_extraction_template_id: extractionTemplateId || null,\r\n        response_generation_template_id: responseTemplateId || null,\r\n        stage_type: stage?.stage_type || 'conversation'\r\n      };\r\n      \r\n      // Only include agent_id if it exists\r\n      if (agentId) {\r\n        stageData.agent_id = agentId;\r\n      }\r\n      \r\n      console.log(`Saving stage with ${method} to ${url}:`, stageData);\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(stageData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || 'Failed to save stage');\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Stage saved successfully:', result);\r\n      \r\n      setSuccess('Stage saved successfully');\r\n      \r\n      // If this was a new stage, update the stageId and URL\r\n      if (stageId === 'new' && result.stage_id) {\r\n        setStageId(result.stage_id);\r\n        \r\n        // Update URL without page reload\r\n        const newUrl = `/stage-editor/${result.stage_id}?business_id=${businessId}${agentId ? `&agent_id=${agentId}` : ''}`;\r\n        window.history.pushState({}, '', newUrl);\r\n      }\r\n      \r\n      // Fetch the updated stage data\r\n      if (result.stage_id) {\r\n        await fetchStage(result.stage_id);\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('Error saving stage:', err);\r\n      setError(err.message || 'Failed to save stage');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Navigate back to stage manager\r\n    let backUrl;\r\n    if (businessId && agentId) {\r\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n    } else if (businessId) {\r\n      backUrl = `/stage-management/business_id=${businessId}`;\r\n    } else {\r\n      backUrl = '/stage-management';\r\n    }\r\n    navigate(backUrl);\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Update the credentials save function\r\n  const saveCredentials = () => {\r\n    if (!businessId || !businessApiKey) {\r\n      setError('Please enter both Business ID and API Key');\r\n      return;\r\n    }\r\n    \r\n    // Validate credentials first\r\n    validateCredentials().then(isValid => {\r\n      if (isValid) {\r\n        // Save to both localStorage and cookies\r\n        localStorage.setItem('businessId', businessId);\r\n        localStorage.setItem('businessApiKey', businessApiKey);\r\n        document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n        document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n        \r\n        setShowBusinessIdInput(false);\r\n        setSuccess('Business credentials validated and saved');\r\n        \r\n        // Reload templates\r\n        fetchAllTemplates();\r\n      }\r\n    });\r\n  };\r\n\r\n  // Add missing handlers\r\n  const handlePreviewClose = () => {\r\n    setPreviewOpen(false);\r\n  };\r\n  \r\n  const handleHelpClose = () => {\r\n    setHelpOpen(false);\r\n  };\r\n  \r\n  const handleReset = () => {\r\n    // Reset the form to its initial state\r\n    if (stageId && stageId !== 'new') {\r\n      fetchStage(stageId);\r\n    } else {\r\n      setStageName('');\r\n      setStageDescription('');\r\n      setTemplates({\r\n        stage_selection: { id: '', text: '', type: '' },\r\n        data_extraction: { id: '', text: '', type: '' },\r\n        response_generation: { id: '', text: '', type: '' }\r\n      });\r\n      setVariables({\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: []\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Stage Name\"\r\n              value={stageName}\r\n              onChange={(e) => setStageName(e.target.value)}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Stage Description\"\r\n              value={stageDescription}\r\n              onChange={(e) => setStageDescription(e.target.value)}\r\n              multiline\r\n              rows={3}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Templates\r\n        </Typography>\r\n        <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n          <Tab label=\"Stage Selection\" />\r\n          <Tab label=\"Data Extraction\" />\r\n          <Tab label=\"Response Generation\" />\r\n        </Tabs>\r\n        \r\n        {/* Template Selection */}\r\n        <Box sx={{ mb: 3 }}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Select Template</InputLabel>\r\n            <Select\r\n              value={templates[templateTypes[tabValue]]?.id || ''}\r\n              onChange={(e) => handleTemplateSelect(templateTypes[tabValue], e.target.value)}\r\n              label=\"Select Template\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              {availableTemplates[templateTypes[tabValue]]?.map((template) => (\r\n                <MenuItem key={template.template_id} value={template.template_id}>\r\n                  {template.template_name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n        \r\n        {/* Template Editor */}\r\n        <TextField\r\n          fullWidth\r\n          label={`${templateTypes[tabValue]} Template`}\r\n          value={templates[templateTypes[tabValue]]?.text || ''}\r\n          onChange={(e) => handleTemplateChange(templateTypes[tabValue], e.target.value)}\r\n          multiline\r\n          rows={10}\r\n          disabled={!templates[templateTypes[tabValue]]?.id}\r\n        />\r\n        \r\n        {/* Variables */}\r\n        {variables[templateTypes[tabValue]]?.length > 0 && (\r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Variables\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n              {variables[templateTypes[tabValue]].map((variable) => (\r\n                <Chip key={variable} label={variable} />\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n      \r\n      {/* Action Buttons */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={handleReset}\r\n          startIcon={<RestartAltIcon />}\r\n        >\r\n          Reset\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSave}\r\n          startIcon={<SaveIcon />}\r\n          disabled={isLoading || savingTemplates[templateTypes[tabValue]]}\r\n        >\r\n          {isLoading || savingTemplates[templateTypes[tabValue]] ? (\r\n            <CircularProgress size={24} />\r\n          ) : (\r\n            'Save'\r\n          )}\r\n        </Button>\r\n      </Box>\r\n      \r\n      {/* Preview Dialog */}\r\n      <Dialog\r\n        open={previewOpen}\r\n        onClose={handlePreviewClose}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Stage Preview</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"h6\">Stage Information</Typography>\r\n            <Typography><strong>Name:</strong> {stageName}</Typography>\r\n            <Typography><strong>Description:</strong> {stageDescription}</Typography>\r\n          </Box>\r\n          \r\n          <Divider sx={{ my: 2 }} />\r\n          \r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"h6\">Templates</Typography>\r\n            {Object.entries(templates).map(([type, template]) => (\r\n              <Box key={type} sx={{ mt: 2 }}>\r\n                <Typography variant=\"subtitle1\"><strong>{type}:</strong></Typography>\r\n                {template?.text ? (\r\n                  <Paper sx={{ p: 2, bgcolor: 'grey.100' }}>\r\n                    <pre style={{ whiteSpace: 'pre-wrap', margin: 0 }}>\r\n                      {template.text}\r\n                    </pre>\r\n                  </Paper>\r\n                ) : (\r\n                  <Typography color=\"text.secondary\">No template selected</Typography>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handlePreviewClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Help Dialog */}\r\n      <Dialog\r\n        open={helpOpen}\r\n        onClose={handleHelpClose}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Stage Editor Help</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"h6\" gutterBottom>Stage Information</Typography>\r\n          <Typography paragraph>\r\n            The stage name and description help identify the purpose of this stage in your workflow.\r\n          </Typography>\r\n          \r\n          <Typography variant=\"h6\" gutterBottom>Templates</Typography>\r\n          <Typography paragraph>\r\n            Each stage can have three types of templates:\r\n          </Typography>\r\n          <ul>\r\n            <li><strong>Stage Selection:</strong> Used to determine which stage to go to next</li>\r\n            <li><strong>Data Extraction:</strong> Used to extract data from the user's input</li>\r\n            <li><strong>Response Generation:</strong> Used to generate a response to the user</li>\r\n          </ul>\r\n          \r\n          <Typography variant=\"h6\" gutterBottom>Variables</Typography>\r\n          <Typography paragraph>\r\n            Variables are placeholders in your templates that will be replaced with actual values.\r\n            They are enclosed in curly braces, like {'{variable_name}'}.\r\n          </Typography>\r\n          \r\n          <Typography variant=\"h6\" gutterBottom>Saving</Typography>\r\n          <Typography paragraph>\r\n            Click the Save button to save your changes. You can preview your stage before saving by clicking the Preview button.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleHelpClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StageEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}