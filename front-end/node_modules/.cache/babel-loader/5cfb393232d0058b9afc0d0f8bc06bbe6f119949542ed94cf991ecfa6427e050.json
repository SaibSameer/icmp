{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\MyInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react'; // Import useCallback\nimport './MyInterface.css';\nimport { TextField, Button, Typography, Card, CardContent, Box, TextareaAutosize, Snackbar, Alert, Grid, Select, MenuItem, InputLabel, FormControl } from '@mui/material';\nimport { saveConfig as saveConfigApi, createUser as createUserApi, fetchBusinessDetails as fetchBusinessDetailsApi, createTemplate as createTemplateApi, fetchTemplates as fetchTemplatesApi, createStage as createStageApi, fetchStages as fetchStagesApi, processMessage as processMessageApi, getStage as getStageApi,\n// new one\nupdateStage as updateStageApi,\n// new one\ngetDefaultTemplates as getDefaultTemplatesApi, saveDefaultTemplate as saveDefaultTemplateApi // new api end point\n} from './testService'; // Correct import path\nimport Configuration from './Configuration';\nimport UserManagement from './UserManagement';\nimport BusinessManagement from './BusinessManagement';\nimport TemplateManagement from './TemplateManagement';\nimport StageManagement from './StageManagement';\nimport SendMessage from './SendMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyInterface() {\n  _s();\n  const [apiKey, setApiKey] = useState(localStorage.getItem('icmpApiKey') || '');\n  const [userId, setUserId] = useState('');\n  const [businessId, setBusinessId] = useState('');\n  const [defaultTemplates, setDefaultTemplates] = React.useState([]);\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [availableVariable, setAvailableVariable] = React.useState([]);\n  const [selectedVariable, setSelectedVariable] = React.useState('');\n  const [businessName, setBusinessName] = useState('');\n  const [templateID, setTemplateID] = React.useState('');\n  const [templateText, setTemplateText] = useState('');\n  const [stageId, setStageId] = useState(''); // Stage ID for editing\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [stageType, setStageType] = useState('');\n  const [selectionTemplateId, setSelectionTemplateId] = useState('');\n  const [selectionCustomPrompt, setSelectionCustomPrompt] = useState('');\n  const [extractionTemplateId, setExtractionTemplateId] = useState('');\n  const [extractionCustomPrompt, setExtractionCustomPrompt] = useState('');\n  const [responseTemplateId, setResponseTemplateId] = useState('');\n  const [responseCustomPrompt, setResponseCustomPrompt] = useState('');\n  const [messageInput, setMessageInput] = useState('');\n  const [configOutput, setConfigOutput] = useState('');\n  const [userOutput, setUserOutput] = useState('');\n  const [businessOutput, setBusinessOutput] = useState('');\n  const [templateOutput, setTemplateOutput] = useState('');\n  const [stageOutput, setStageOutput] = useState('');\n  const [messageOutput, setMessageOutput] = useState('');\n\n  // Snackbar\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success'); // or 'error'\n\n  // Open and close snackbar\n  const handleSnackbarOpen = (message, severity) => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n\n  // Configuration\n  const saveConfig = async () => {\n    try {\n      const response = await saveConfigApi(apiKey, userId, businessId);\n      localStorage.setItem('icmpApiKey', apiKey);\n      setConfigOutput(`Configuration Saved:\\nUser ID: ${userId}\\nBusiness ID: ${businessId}\\nAPI Key: ${apiKey}`);\n      handleSnackbarOpen(\"Configuration Saved!\", \"success\");\n    } catch (error) {\n      setConfigOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n\n  //user section\n  const createUser = async () => {\n    try {\n      const response = await createUserApi(firstName, lastName, email);\n      setUserOutput(\"User Created (dummy)\");\n      handleSnackbarOpen(\"User Created!\", \"success\");\n    } catch (error) {\n      setUserOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  const fetchBusinessDetails = async () => {\n    if (!businessId) {\n      setBusinessOutput(\"Please enter a Business ID.\");\n      handleSnackbarOpen(\"Please enter a Business ID.\", \"warning\");\n      return;\n    }\n    try {\n      const response = await fetchBusinessDetailsApi(businessId, apiKey);\n      setBusinessOutput(\"Business endpoint not implemented yet.\");\n      handleSnackbarOpen(\"Business endpoint not implemented yet.\", \"info\");\n    } catch (error) {\n      setBusinessOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(\"Error in MyInterface:\" + error.message, \"error\"); // Correct use\n    }\n  };\n  const createTemplate = async () => {\n    const templateData = {\n      template_name: templateName,\n      template_text: templateText\n    };\n    try {\n      const data = await createTemplateApi(templateData, apiKey);\n      setTemplateOutput(`Template Created: ${data.template_id}`);\n      handleSnackbarOpen(`Template Created: ${data.template_id}`, \"success\");\n    } catch (error) {\n      setTemplateOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  const fetchTemplates = async () => {\n    try {\n      const data = await fetchTemplatesApi(apiKey);\n      setTemplateOutput(JSON.stringify(data, null, 2));\n      handleSnackbarOpen(\"Templates Fetched!\", \"success\");\n    } catch (error) {\n      setTemplateOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  const addVariableToTemplate = () => {\n    // Combine the static and dynamic variables\n    let newTemplateText = templateText + \"{\" + selectedVariable + \"}\";\n    setTemplateText(newTemplateText);\n  };\n  const handleTemplateSelection = event => {\n    const selectedTemplateId = event.target.value;\n    setTemplateID(selectedTemplateId);\n    // Find the selected template object\n    const selectedTemplate = defaultTemplates.find(template => template.template_id === selectedTemplateId);\n\n    // If the template is found, update the templateText state\n    if (selectedTemplate) {\n      setTemplateText(selectedTemplate.template_text);\n    } else {\n      setTemplateText(''); // Clear the template text if the template is not found\n    }\n  };\n  const handleSaveDefaultTemplate = async () => {\n    try {\n      const templateData = {\n        template_name: templateName,\n        template_text: templateText\n      };\n      // const data = await createTemplateApi(templateData, apiKey)\n      // await saveDefaultTemplateApi(templateData, apiKey); // Implement API call to save the current template to defaults\n      setTemplateOutput(`Template Saved to Defaults: ${templateID}`);\n      handleSnackbarOpen(`Template Saved to Defaults: ${templateID}`, \"success\");\n    } catch (error) {\n      handleSnackbarOpen(`Error saving template: ${error.message}`, \"error\");\n    }\n  };\n  const handleVariableSelection = event => {\n    setSelectedVariable(event.target.value);\n  };\n  //stage section\n  const createStage = async () => {\n    const stageData = {\n      business_id: businessId,\n      stage_name: stageName,\n      stage_description: stageDescription,\n      stage_type: stageType,\n      selection_template_id: selectionTemplateId || null,\n      selection_custom_prompt: selectionCustomPrompt || null,\n      extraction_template_id: extractionTemplateId || null,\n      extraction_custom_prompt: extractionCustomPrompt || null,\n      response_template_id: responseTemplateId || null,\n      response_custom_prompt: responseCustomPrompt || null\n    };\n    try {\n      const data = await createStageApi(stageData, apiKey);\n      setStageOutput(`Stage Created: ${data.stage_id}`);\n      handleSnackbarOpen(`Stage Created: ${data.stage_id}`, \"success\");\n    } catch (error) {\n      setStageOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  const fetchStages = async () => {\n    if (!businessId) {\n      setStageOutput(\"Please enter a Business ID.\");\n      handleSnackbarOpen(\"Please enter a Business ID.\", \"warning\");\n      return;\n    }\n    try {\n      const data = await fetchStagesApi(businessId, apiKey);\n      setStageOutput(JSON.stringify(data, null, 2));\n      handleSnackbarOpen(\"Stages Fetched!\", \"success\");\n    } catch (error) {\n      setStageOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  /*#__PURE__*/_jsxDEV(TextField, {\n    label: \"Business Name\",\n    variant: \"outlined\",\n    value: businessName,\n    onChange: e => setBusinessName(e.target.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n  const processMessage = async () => {\n    const messageData = {\n      business_id: businessId,\n      user_id: userId,\n      message: messageInput\n    };\n    try {\n      const data = await processMessageApi(messageData, apiKey);\n      setMessageOutput(`Response: ${data.response}\\nConversation ID: ${data.conversation_id}`);\n      handleSnackbarOpen(`Response: ${data.response}\\nConversation ID: ${data.conversation_id}`, \"success\");\n    } catch (error) {\n      setMessageOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  useEffect(() => {\n    // When the app load, load the API KEY\n    const storedApiKey = localStorage.getItem('icmpApiKey');\n    if (storedApiKey) {\n      setApiKey(storedApiKey);\n    }\n  }, []);\n  const memoizedSetApiKey = useCallback(newApiKey => {\n    //<-- memoize\n    setApiKey(newApiKey);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"ICMP Proof of Concept\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Configuration, {\n      apiKey: apiKey,\n      setApiKey: memoizedSetApiKey,\n      userId: userId,\n      setUserId: setUserId,\n      businessId: businessId,\n      setBusinessId: setBusinessId,\n      handleSnackbarOpen: handleSnackbarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserManagement, {\n      firstName: firstName,\n      setFirstName: setFirstName,\n      lastName: lastName,\n      setLastName: setLastName,\n      email: email,\n      setEmail: setEmail,\n      userOutput: userOutput,\n      createUser: createUser,\n      handleSnackbarOpen: handleSnackbarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BusinessManagement, {\n      businessName: businessName,\n      setBusinessName: setBusinessName,\n      businessOutput: businessOutput,\n      setBusinessOutput: setBusinessOutput,\n      fetchBusinessDetails: fetchBusinessDetails,\n      handleSnackbarOpen: handleSnackbarOpen,\n      apiKey: apiKey,\n      businessId: businessId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TemplateManagement, {\n      templateID: templateID,\n      setTemplateID: setTemplateID,\n      availableVariable: availableVariable,\n      setAvailableVariable: setAvailableVariable,\n      selectedVariable: selectedVariable,\n      setSelectedVariable: setSelectedVariable,\n      handleTemplateSelection: handleTemplateSelection,\n      handleVariableSelection: handleVariableSelection,\n      addVariableToTemplate: addVariableToTemplate,\n      templateName: templateName,\n      setTemplateName: setTemplateName,\n      templateText: templateText,\n      setTemplateText: setTemplateText,\n      templateOutput: templateOutput,\n      createTemplate: createTemplate,\n      fetchTemplates: fetchTemplates,\n      handleSnackbarOpen: handleSnackbarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StageManagement, {\n      stageId: stageId,\n      setStageId: setStageId,\n      stageName: stageName,\n      setStageName: setStageName,\n      stageDescription: stageDescription,\n      setStageDescription: setStageDescription,\n      stageType: stageType,\n      setStageType: setStageType,\n      selectionTemplateId: selectionTemplateId,\n      setSelectionTemplateId: setSelectionTemplateId,\n      selectionCustomPrompt: selectionCustomPrompt,\n      extractionTemplateId: extractionTemplateId,\n      setExtractionTemplateId: setExtractionTemplateId,\n      extractionCustomPrompt: extractionCustomPrompt,\n      setExtractionCustomPrompt: setExtractionCustomPrompt,\n      responseTemplateId: responseTemplateId,\n      setResponseTemplateId: setResponseTemplateId,\n      responseCustomPrompt: responseCustomPrompt,\n      setResponseCustomPrompt: setResponseCustomPrompt,\n      stageOutput: stageOutput,\n      createStage: createStage,\n      fetchStages: fetchStages,\n      handleSnackbarOpen: handleSnackbarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      messageInput: messageInput,\n      setMessageInput: setMessageInput,\n      messageOutput: messageOutput,\n      processMessage: processMessage,\n      handleSnackbarOpen: handleSnackbarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbarOpen,\n      autoHideDuration: 6000,\n      onClose: handleSnackbarClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleSnackbarClose,\n        severity: snackbarSeverity,\n        sx: {\n          width: '100%'\n        },\n        children: snackbarMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n}\n_s(MyInterface, \"a2UP3FoIWjLSHO1Bn086H8/xgTc=\");\n_c = MyInterface;\nexport default MyInterface;\nvar _c;\n$RefreshReg$(_c, \"MyInterface\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","TextField","Button","Typography","Card","CardContent","Box","TextareaAutosize","Snackbar","Alert","Grid","Select","MenuItem","InputLabel","FormControl","saveConfig","saveConfigApi","createUser","createUserApi","fetchBusinessDetails","fetchBusinessDetailsApi","createTemplate","createTemplateApi","fetchTemplates","fetchTemplatesApi","createStage","createStageApi","fetchStages","fetchStagesApi","processMessage","processMessageApi","getStage","getStageApi","updateStage","updateStageApi","getDefaultTemplates","getDefaultTemplatesApi","saveDefaultTemplate","saveDefaultTemplateApi","Configuration","UserManagement","BusinessManagement","TemplateManagement","StageManagement","SendMessage","jsxDEV","_jsxDEV","MyInterface","_s","apiKey","setApiKey","localStorage","getItem","userId","setUserId","businessId","setBusinessId","defaultTemplates","setDefaultTemplates","firstName","setFirstName","lastName","setLastName","email","setEmail","availableVariable","setAvailableVariable","selectedVariable","setSelectedVariable","businessName","setBusinessName","templateID","setTemplateID","templateText","setTemplateText","stageId","setStageId","stageName","setStageName","stageDescription","setStageDescription","stageType","setStageType","selectionTemplateId","setSelectionTemplateId","selectionCustomPrompt","setSelectionCustomPrompt","extractionTemplateId","setExtractionTemplateId","extractionCustomPrompt","setExtractionCustomPrompt","responseTemplateId","setResponseTemplateId","responseCustomPrompt","setResponseCustomPrompt","messageInput","setMessageInput","configOutput","setConfigOutput","userOutput","setUserOutput","businessOutput","setBusinessOutput","templateOutput","setTemplateOutput","stageOutput","setStageOutput","messageOutput","setMessageOutput","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","handleSnackbarOpen","message","severity","handleSnackbarClose","event","reason","response","setItem","error","templateData","template_name","templateName","template_text","data","template_id","JSON","stringify","addVariableToTemplate","newTemplateText","handleTemplateSelection","selectedTemplateId","target","value","selectedTemplate","find","template","handleSaveDefaultTemplate","handleVariableSelection","stageData","business_id","stage_name","stage_description","stage_type","selection_template_id","selection_custom_prompt","extraction_template_id","extraction_custom_prompt","response_template_id","response_custom_prompt","stage_id","label","variant","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","messageData","user_id","conversation_id","storedApiKey","memoizedSetApiKey","newApiKey","className","children","align","gutterBottom","setTemplateName","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","width","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/MyInterface.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'; // Import useCallback\r\nimport './MyInterface.css';\r\nimport {\r\n    TextField, Button, Typography, Card, CardContent, Box, TextareaAutosize,\r\n    Snackbar, Alert, Grid, Select, MenuItem, InputLabel, FormControl\r\n} from '@mui/material';\r\nimport {\r\n    saveConfig as saveConfigApi,\r\n    createUser as createUserApi,\r\n    fetchBusinessDetails as fetchBusinessDetailsApi,\r\n    createTemplate as createTemplateApi,\r\n    fetchTemplates as fetchTemplatesApi,\r\n    createStage as createStageApi,\r\n    fetchStages as fetchStagesApi,\r\n    processMessage as processMessageApi,\r\n    getStage as getStageApi, // new one\r\n    updateStage as updateStageApi, // new one\r\n    getDefaultTemplates as getDefaultTemplatesApi,\r\n    saveDefaultTemplate as saveDefaultTemplateApi // new api end point\r\n} from './testService' // Correct import path\r\nimport Configuration from './Configuration';\r\nimport UserManagement from './UserManagement';\r\nimport BusinessManagement from './BusinessManagement';\r\nimport TemplateManagement from './TemplateManagement';\r\nimport StageManagement from './StageManagement';\r\nimport SendMessage from './SendMessage';\r\n\r\nfunction MyInterface() {\r\n    const [apiKey, setApiKey] = useState(localStorage.getItem('icmpApiKey') || '');\r\n    const [userId, setUserId] = useState('');\r\n    const [businessId, setBusinessId] = useState('');\r\n    const [defaultTemplates, setDefaultTemplates] = React.useState([]);\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [availableVariable, setAvailableVariable] = React.useState([]);\r\n    const [selectedVariable, setSelectedVariable] = React.useState('');\r\n    const [businessName, setBusinessName] = useState('');\r\n    const [templateID, setTemplateID] = React.useState('');\r\n    const [templateText, setTemplateText] = useState('');\r\n    const [stageId, setStageId] = useState(''); // Stage ID for editing\r\n    const [stageName, setStageName] = useState('');\r\n    const [stageDescription, setStageDescription] = useState('');\r\n    const [stageType, setStageType] = useState('');\r\n    const [selectionTemplateId, setSelectionTemplateId] = useState('');\r\n    const [selectionCustomPrompt, setSelectionCustomPrompt] = useState('');\r\n    const [extractionTemplateId, setExtractionTemplateId] = useState('');\r\n    const [extractionCustomPrompt, setExtractionCustomPrompt] = useState('');\r\n    const [responseTemplateId, setResponseTemplateId] = useState('');\r\n    const [responseCustomPrompt, setResponseCustomPrompt] = useState('');\r\n    const [messageInput, setMessageInput] = useState('');\r\n\r\n    const [configOutput, setConfigOutput] = useState('');\r\n    const [userOutput, setUserOutput] = useState('');\r\n    const [businessOutput, setBusinessOutput] = useState('');\r\n    const [templateOutput, setTemplateOutput] = useState('');\r\n    const [stageOutput, setStageOutput] = useState('');\r\n    const [messageOutput, setMessageOutput] = useState('');\r\n\r\n    // Snackbar\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = useState('');\r\n    const [snackbarSeverity, setSnackbarSeverity] = useState('success'); // or 'error'\r\n\r\n    // Open and close snackbar\r\n    const handleSnackbarOpen = (message, severity) => {\r\n        setSnackbarMessage(message);\r\n        setSnackbarSeverity(severity);\r\n        setSnackbarOpen(true);\r\n    };\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    // Configuration\r\n    const saveConfig = async () => {\r\n        try {\r\n            const response = await saveConfigApi(apiKey, userId, businessId)\r\n            localStorage.setItem('icmpApiKey', apiKey);\r\n            setConfigOutput(`Configuration Saved:\\nUser ID: ${userId}\\nBusiness ID: ${businessId}\\nAPI Key: ${apiKey}`);\r\n            handleSnackbarOpen(\"Configuration Saved!\", \"success\")\r\n\r\n        } catch (error) {\r\n            setConfigOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n        }\r\n    };\r\n\r\n    //user section\r\n    const createUser = async () => {\r\n        try {\r\n            const response = await createUserApi(firstName, lastName, email)\r\n            setUserOutput(\"User Created (dummy)\");\r\n            handleSnackbarOpen(\"User Created!\", \"success\")\r\n\r\n        } catch (error) {\r\n            setUserOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n\r\n        }\r\n    };\r\n\r\n    const fetchBusinessDetails = async () => {\r\n        if (!businessId) {\r\n            setBusinessOutput(\"Please enter a Business ID.\");\r\n            handleSnackbarOpen(\"Please enter a Business ID.\", \"warning\")\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetchBusinessDetailsApi(businessId, apiKey)\r\n            setBusinessOutput(\"Business endpoint not implemented yet.\");\r\n            handleSnackbarOpen(\"Business endpoint not implemented yet.\", \"info\")\r\n\r\n        } catch (error) {\r\n            setBusinessOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(\"Error in MyInterface:\" + error.message, \"error\") // Correct use\r\n\r\n        }\r\n    };\r\n\r\n    const createTemplate = async () => {\r\n        const templateData = {\r\n            template_name: templateName,\r\n            template_text: templateText\r\n        };\r\n        try {\r\n            const data = await createTemplateApi(templateData, apiKey)\r\n            setTemplateOutput(`Template Created: ${data.template_id}`);\r\n            handleSnackbarOpen(`Template Created: ${data.template_id}`, \"success\")\r\n        } catch (error) {\r\n            setTemplateOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n\r\n        }\r\n    };\r\n\r\n    const fetchTemplates = async () => {\r\n        try {\r\n            const data = await fetchTemplatesApi(apiKey)\r\n            setTemplateOutput(JSON.stringify(data, null, 2));\r\n            handleSnackbarOpen(\"Templates Fetched!\", \"success\")\r\n\r\n        } catch (error) {\r\n            setTemplateOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n        }\r\n    };\r\n\r\n    const addVariableToTemplate = () => {\r\n        // Combine the static and dynamic variables\r\n        let newTemplateText = templateText + \"{\" + selectedVariable + \"}\";\r\n        setTemplateText(newTemplateText);\r\n    };\r\n\r\n    const handleTemplateSelection = (event) => {\r\n        const selectedTemplateId = event.target.value;\r\n        setTemplateID(selectedTemplateId);\r\n        // Find the selected template object\r\n        const selectedTemplate = defaultTemplates.find(template => template.template_id === selectedTemplateId);\r\n\r\n        // If the template is found, update the templateText state\r\n        if (selectedTemplate) {\r\n            setTemplateText(selectedTemplate.template_text);\r\n        } else {\r\n            setTemplateText(''); // Clear the template text if the template is not found\r\n        }\r\n\r\n    };\r\n\r\n    const handleSaveDefaultTemplate = async () => {\r\n        try {\r\n            const templateData = {\r\n                template_name: templateName,\r\n                template_text: templateText\r\n            };\r\n            // const data = await createTemplateApi(templateData, apiKey)\r\n            // await saveDefaultTemplateApi(templateData, apiKey); // Implement API call to save the current template to defaults\r\n            setTemplateOutput(`Template Saved to Defaults: ${templateID}`);\r\n            handleSnackbarOpen(`Template Saved to Defaults: ${templateID}`, \"success\");\r\n\r\n        } catch (error) {\r\n            handleSnackbarOpen(`Error saving template: ${error.message}`, \"error\");\r\n        }\r\n    };\r\n\r\n    const handleVariableSelection = (event) => {\r\n        setSelectedVariable(event.target.value);\r\n    };\r\n    //stage section\r\n    const createStage = async () => {\r\n        const stageData = {\r\n            business_id: businessId,\r\n            stage_name: stageName,\r\n            stage_description: stageDescription,\r\n            stage_type: stageType,\r\n            selection_template_id: selectionTemplateId || null,\r\n            selection_custom_prompt: selectionCustomPrompt || null,\r\n            extraction_template_id: extractionTemplateId || null,\r\n            extraction_custom_prompt: extractionCustomPrompt || null,\r\n            response_template_id: responseTemplateId || null,\r\n            response_custom_prompt: responseCustomPrompt || null\r\n        };\r\n\r\n        try {\r\n            const data = await createStageApi(stageData, apiKey)\r\n            setStageOutput(`Stage Created: ${data.stage_id}`);\r\n            handleSnackbarOpen(`Stage Created: ${data.stage_id}`, \"success\")\r\n        } catch (error) {\r\n            setStageOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n        }\r\n    };\r\n\r\n    const fetchStages = async () => {\r\n        if (!businessId) {\r\n            setStageOutput(\"Please enter a Business ID.\");\r\n            handleSnackbarOpen(\"Please enter a Business ID.\", \"warning\");\r\n\r\n            return;\r\n        }\r\n        try {\r\n            const data = await fetchStagesApi(businessId, apiKey)\r\n            setStageOutput(JSON.stringify(data, null, 2));\r\n            handleSnackbarOpen(\"Stages Fetched!\", \"success\")\r\n\r\n        } catch (error) {\r\n            setStageOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n        }\r\n    };\r\n\r\n        <TextField label=\"Business Name\" variant=\"outlined\" value={businessName} onChange={(e) => setBusinessName(e.target.value)} />\r\n\r\n   const processMessage = async () => {\r\n        const messageData = {\r\n            business_id: businessId,\r\n            user_id: userId,\r\n            message: messageInput\r\n        };\r\n        try {\r\n            const data = await processMessageApi(messageData, apiKey)\r\n            setMessageOutput(`Response: ${data.response}\\nConversation ID: ${data.conversation_id}`);\r\n            handleSnackbarOpen(`Response: ${data.response}\\nConversation ID: ${data.conversation_id}`, \"success\")\r\n\r\n        } catch (error) {\r\n            setMessageOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\")\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // When the app load, load the API KEY\r\n        const storedApiKey = localStorage.getItem('icmpApiKey');\r\n        if (storedApiKey) {\r\n            setApiKey(storedApiKey);\r\n        }\r\n    }, []);\r\n\r\n    const memoizedSetApiKey = useCallback((newApiKey) => {  //<-- memoize\r\n        setApiKey(newApiKey);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Typography variant=\"h4\" align=\"center\" gutterBottom>ICMP Proof of Concept</Typography>\r\n\r\n            <Configuration apiKey={apiKey} setApiKey={memoizedSetApiKey} userId={userId} setUserId={setUserId} businessId={businessId} setBusinessId={setBusinessId} handleSnackbarOpen={handleSnackbarOpen} />\r\n            <UserManagement firstName={firstName} setFirstName={setFirstName} lastName={lastName} setLastName={setLastName} email={email} setEmail={setEmail} userOutput={userOutput} createUser={createUser} handleSnackbarOpen={handleSnackbarOpen} />\r\n            <BusinessManagement businessName={businessName} setBusinessName={setBusinessName} businessOutput={businessOutput} setBusinessOutput={setBusinessOutput} fetchBusinessDetails={fetchBusinessDetails} handleSnackbarOpen={handleSnackbarOpen} apiKey={apiKey} businessId={businessId} />\r\n            <TemplateManagement templateID={templateID} setTemplateID={setTemplateID} availableVariable={availableVariable} setAvailableVariable={setAvailableVariable} selectedVariable={selectedVariable} setSelectedVariable={setSelectedVariable} handleTemplateSelection={handleTemplateSelection} handleVariableSelection={handleVariableSelection} addVariableToTemplate={addVariableToTemplate} templateName={templateName} setTemplateName={setTemplateName} templateText={templateText} setTemplateText={setTemplateText} templateOutput={templateOutput} createTemplate={createTemplate} fetchTemplates={fetchTemplates} handleSnackbarOpen={handleSnackbarOpen} />\r\n            <StageManagement stageId={stageId} setStageId={setStageId} stageName={stageName} setStageName={setStageName} stageDescription={stageDescription} setStageDescription={setStageDescription} stageType={stageType} setStageType={setStageType} selectionTemplateId={selectionTemplateId} setSelectionTemplateId={setSelectionTemplateId} selectionCustomPrompt={selectionCustomPrompt}  extractionTemplateId={extractionTemplateId} setExtractionTemplateId={setExtractionTemplateId} extractionCustomPrompt={extractionCustomPrompt} setExtractionCustomPrompt={setExtractionCustomPrompt} responseTemplateId={responseTemplateId} setResponseTemplateId={setResponseTemplateId} responseCustomPrompt={responseCustomPrompt} setResponseCustomPrompt={setResponseCustomPrompt} stageOutput={stageOutput} createStage={createStage} fetchStages={fetchStages} handleSnackbarOpen={handleSnackbarOpen} />\r\n            <SendMessage messageInput={messageInput} setMessageInput={setMessageInput} messageOutput={messageOutput} processMessage={processMessage} handleSnackbarOpen={handleSnackbarOpen} />\r\n\r\n            {/* Snackbar for notifications */}\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleSnackbarClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}>\r\n                <Alert onClose={handleSnackbarClose} severity={snackbarSeverity} sx={{ width: '100%' }}>\r\n                    {snackbarMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}