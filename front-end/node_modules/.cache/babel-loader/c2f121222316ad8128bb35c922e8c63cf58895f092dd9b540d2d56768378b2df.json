{"ast":null,"code":"// API Test Utility\n// This file contains functions to test API connectivity and authentication\n\nimport { getStoredCredentials } from './fetchUtils';\n\n/**\r\n * Test API key authentication\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test result\r\n */\nexport const testApiKeyAuth = async (businessId, apiKey) => {\n  console.log('Testing API key authentication...');\n  try {\n    // If businessId or apiKey is not provided, try to get them from stored credentials\n    if (!businessId || !apiKey) {\n      const storedCredentials = getStoredCredentials();\n      businessId = businessId || storedCredentials.businessId;\n      apiKey = apiKey || storedCredentials.businessApiKey;\n      if (!businessId || !apiKey) {\n        return {\n          success: false,\n          error: 'Business ID and API Key are required'\n        };\n      }\n    }\n\n    // Test with different authentication methods\n    const authMethods = [\n    // Method 1: API key as query parameter\n    {\n      url: `/businesses/validate-credentials?business_id=${businessId}&api_key=${apiKey}`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    },\n    // Method 2: API key in X-API-Key header\n    {\n      url: `/businesses/validate-credentials?business_id=${businessId}`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-API-Key': apiKey\n      }\n    },\n    // Method 3: API key in Authorization header as Bearer token\n    {\n      url: `/businesses/validate-credentials?business_id=${businessId}`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      }\n    }];\n    const results = [];\n    for (const method of authMethods) {\n      try {\n        console.log(`Testing with URL: ${method.url} and headers:`, method.headers);\n        const response = await fetch(method.url, {\n          method: 'GET',\n          headers: method.headers,\n          credentials: 'include'\n        });\n        const status = response.status;\n        const data = await response.json().catch(() => ({}));\n        results.push({\n          method: Object.keys(method.headers).find(h => h.includes('API') || h.includes('Authorization')) || 'query',\n          status,\n          data,\n          success: response.ok\n        });\n\n        // If any method succeeds, we can stop testing\n        if (response.ok) {\n          break;\n        }\n      } catch (err) {\n        console.error(`Error testing authentication method:`, err);\n        results.push({\n          method: Object.keys(method.headers).find(h => h.includes('API') || h.includes('Authorization')) || 'query',\n          error: err.message,\n          success: false\n        });\n      }\n    }\n\n    // Check if any method succeeded\n    const successfulResult = results.find(r => r.success);\n    return {\n      success: !!successfulResult,\n      results,\n      message: successfulResult ? 'Authentication successful' : 'All authentication methods failed'\n    };\n  } catch (err) {\n    console.error('Error in testApiKeyAuth:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Test template operations\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test result\r\n */\nexport const testTemplateOperations = async (businessId, apiKey) => {\n  console.log('Testing template operations...');\n  try {\n    // If businessId or apiKey is not provided, try to get them from stored credentials\n    if (!businessId || !apiKey) {\n      const storedCredentials = getStoredCredentials();\n      businessId = businessId || storedCredentials.businessId;\n      apiKey = apiKey || storedCredentials.businessApiKey;\n      if (!businessId || !apiKey) {\n        return {\n          success: false,\n          error: 'Business ID and API Key are required'\n        };\n      }\n    }\n\n    // Test fetching templates\n    const fetchResult = await testFetchTemplates(businessId, apiKey);\n\n    // Test creating a template\n    const createResult = await testCreateTemplate(businessId, apiKey);\n    return {\n      success: fetchResult.success && createResult.success,\n      fetchResult,\n      createResult\n    };\n  } catch (err) {\n    console.error('Template operations test error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Test fetching templates\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\nconst testFetchTemplates = async (businessId, apiKey) => {\n  console.log('Testing fetching templates...');\n  try {\n    // Try both methods: GET with params and POST with body\n    const methods = [\n    // Method 1: GET request with business_id as query parameter\n    {\n      method: 'GET',\n      url: `/templates?business_id=${businessId}`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n        'X-API-Key': apiKey\n      },\n      body: null\n    },\n    // Method 2: POST request with business_id in body\n    {\n      method: 'POST',\n      url: '/templates',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n        'X-API-Key': apiKey\n      },\n      body: JSON.stringify({\n        business_id: businessId\n      })\n    }];\n\n    // Try each method until one succeeds\n    for (const method of methods) {\n      try {\n        console.log(`Trying to fetch templates with ${method.method} request:`, method);\n        const response = await fetch(method.url, {\n          method: method.method,\n          headers: method.headers,\n          body: method.body,\n          credentials: 'include'\n        });\n        const status = response.status;\n        const data = await response.json().catch(() => ({}));\n        console.log(`${method.method} templates result:`, {\n          status,\n          data\n        });\n        if (response.ok) {\n          return {\n            success: true,\n            status,\n            data,\n            method: method.method\n          };\n        }\n      } catch (err) {\n        console.error(`Error with ${method.method} templates request:`, err);\n      }\n    }\n    return {\n      success: false,\n      error: \"All template fetch methods failed\"\n    };\n  } catch (err) {\n    console.error('Fetch templates error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Test creating a template\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\nconst testCreateTemplate = async (businessId, apiKey) => {\n  console.log('Testing creating a template...');\n  try {\n    const templateData = {\n      template_name: `Test Template ${Date.now()}`,\n      template_text: 'This is a test template with {variable1} and {variable2}.',\n      template_type: 'test_template',\n      business_id: businessId,\n      variables: ['variable1', 'variable2'],\n      template_description: 'A test template for API testing'\n    };\n    const response = await fetch('/templates/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      credentials: 'include',\n      body: JSON.stringify(templateData)\n    });\n    const status = response.status;\n    const data = await response.json().catch(() => ({}));\n    console.log('Create template result:', {\n      status,\n      data\n    });\n    return {\n      success: response.ok,\n      status,\n      data\n    };\n  } catch (err) {\n    console.error('Create template error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n/**\r\n * Run all API tests\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test results\r\n */\nexport const runAllApiTests = async (businessId, apiKey) => {\n  console.log('Running all API tests...');\n  try {\n    // If businessId or apiKey is not provided, try to get them from stored credentials\n    if (!businessId || !apiKey) {\n      const storedCredentials = getStoredCredentials();\n      businessId = businessId || storedCredentials.businessId;\n      apiKey = apiKey || storedCredentials.businessApiKey;\n      if (!businessId || !apiKey) {\n        return {\n          success: false,\n          error: 'Business ID and API Key are required'\n        };\n      }\n    }\n    const authResult = await testApiKeyAuth(businessId, apiKey);\n    const templateResult = await testTemplateOperations(businessId, apiKey);\n    return {\n      success: authResult.success && templateResult.success,\n      authResult,\n      templateResult\n    };\n  } catch (err) {\n    console.error('API tests error:', err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};","map":{"version":3,"names":["getStoredCredentials","testApiKeyAuth","businessId","apiKey","console","log","storedCredentials","businessApiKey","success","error","authMethods","url","headers","results","method","response","fetch","credentials","status","data","json","catch","push","Object","keys","find","h","includes","ok","err","message","successfulResult","r","testTemplateOperations","fetchResult","testFetchTemplates","createResult","testCreateTemplate","methods","body","JSON","stringify","business_id","templateData","template_name","Date","now","template_text","template_type","variables","template_description","runAllApiTests","authResult","templateResult"],"sources":["C:/icmp_events_api/front-end/src/utils/apiTest.js"],"sourcesContent":["// API Test Utility\r\n// This file contains functions to test API connectivity and authentication\r\n\r\nimport { getStoredCredentials } from './fetchUtils';\r\n\r\n/**\r\n * Test API key authentication\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nexport const testApiKeyAuth = async (businessId, apiKey) => {\r\n  console.log('Testing API key authentication...');\r\n  \r\n  try {\r\n    // If businessId or apiKey is not provided, try to get them from stored credentials\r\n    if (!businessId || !apiKey) {\r\n      const storedCredentials = getStoredCredentials();\r\n      businessId = businessId || storedCredentials.businessId;\r\n      apiKey = apiKey || storedCredentials.businessApiKey;\r\n      \r\n      if (!businessId || !apiKey) {\r\n        return {\r\n          success: false,\r\n          error: 'Business ID and API Key are required'\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Test with different authentication methods\r\n    const authMethods = [\r\n      // Method 1: API key as query parameter\r\n      {\r\n        url: `/businesses/validate-credentials?business_id=${businessId}&api_key=${apiKey}`,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      },\r\n      // Method 2: API key in X-API-Key header\r\n      {\r\n        url: `/businesses/validate-credentials?business_id=${businessId}`,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'X-API-Key': apiKey\r\n        }\r\n      },\r\n      // Method 3: API key in Authorization header as Bearer token\r\n      {\r\n        url: `/businesses/validate-credentials?business_id=${businessId}`,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        }\r\n      }\r\n    ];\r\n    \r\n    const results = [];\r\n    \r\n    for (const method of authMethods) {\r\n      try {\r\n        console.log(`Testing with URL: ${method.url} and headers:`, method.headers);\r\n        \r\n        const response = await fetch(method.url, {\r\n          method: 'GET',\r\n          headers: method.headers,\r\n          credentials: 'include'\r\n        });\r\n        \r\n        const status = response.status;\r\n        const data = await response.json().catch(() => ({}));\r\n        \r\n        results.push({\r\n          method: Object.keys(method.headers).find(h => h.includes('API') || h.includes('Authorization')) || 'query',\r\n          status,\r\n          data,\r\n          success: response.ok\r\n        });\r\n        \r\n        // If any method succeeds, we can stop testing\r\n        if (response.ok) {\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error testing authentication method:`, err);\r\n        results.push({\r\n          method: Object.keys(method.headers).find(h => h.includes('API') || h.includes('Authorization')) || 'query',\r\n          error: err.message,\r\n          success: false\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check if any method succeeded\r\n    const successfulResult = results.find(r => r.success);\r\n    \r\n    return {\r\n      success: !!successfulResult,\r\n      results,\r\n      message: successfulResult ? 'Authentication successful' : 'All authentication methods failed'\r\n    };\r\n  } catch (err) {\r\n    console.error('Error in testApiKeyAuth:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test template operations\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nexport const testTemplateOperations = async (businessId, apiKey) => {\r\n  console.log('Testing template operations...');\r\n  \r\n  try {\r\n    // If businessId or apiKey is not provided, try to get them from stored credentials\r\n    if (!businessId || !apiKey) {\r\n      const storedCredentials = getStoredCredentials();\r\n      businessId = businessId || storedCredentials.businessId;\r\n      apiKey = apiKey || storedCredentials.businessApiKey;\r\n      \r\n      if (!businessId || !apiKey) {\r\n        return {\r\n          success: false,\r\n          error: 'Business ID and API Key are required'\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Test fetching templates\r\n    const fetchResult = await testFetchTemplates(businessId, apiKey);\r\n    \r\n    // Test creating a template\r\n    const createResult = await testCreateTemplate(businessId, apiKey);\r\n    \r\n    return {\r\n      success: fetchResult.success && createResult.success,\r\n      fetchResult,\r\n      createResult\r\n    };\r\n  } catch (err) {\r\n    console.error('Template operations test error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test fetching templates\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nconst testFetchTemplates = async (businessId, apiKey) => {\r\n  console.log('Testing fetching templates...');\r\n  \r\n  try {\r\n    // Try both methods: GET with params and POST with body\r\n    const methods = [\r\n      // Method 1: GET request with business_id as query parameter\r\n      {\r\n        method: 'GET',\r\n        url: `/templates?business_id=${businessId}`,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'X-API-Key': apiKey\r\n        },\r\n        body: null\r\n      },\r\n      // Method 2: POST request with business_id in body\r\n      {\r\n        method: 'POST',\r\n        url: '/templates',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'X-API-Key': apiKey\r\n        },\r\n        body: JSON.stringify({ business_id: businessId })\r\n      }\r\n    ];\r\n    \r\n    // Try each method until one succeeds\r\n    for (const method of methods) {\r\n      try {\r\n        console.log(`Trying to fetch templates with ${method.method} request:`, method);\r\n        \r\n        const response = await fetch(method.url, {\r\n          method: method.method,\r\n          headers: method.headers,\r\n          body: method.body,\r\n          credentials: 'include'\r\n        });\r\n        \r\n        const status = response.status;\r\n        const data = await response.json().catch(() => ({}));\r\n        \r\n        console.log(`${method.method} templates result:`, { status, data });\r\n        \r\n        if (response.ok) {\r\n          return {\r\n            success: true,\r\n            status,\r\n            data,\r\n            method: method.method\r\n          };\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error with ${method.method} templates request:`, err);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      error: \"All template fetch methods failed\"\r\n    };\r\n  } catch (err) {\r\n    console.error('Fetch templates error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test creating a template\r\n * @param {string} businessId - The business ID\r\n * @param {string} apiKey - The API key\r\n * @returns {Promise<Object>} - The test result\r\n */\r\nconst testCreateTemplate = async (businessId, apiKey) => {\r\n  console.log('Testing creating a template...');\r\n  \r\n  try {\r\n    const templateData = {\r\n      template_name: `Test Template ${Date.now()}`,\r\n      template_text: 'This is a test template with {variable1} and {variable2}.',\r\n      template_type: 'test_template',\r\n      business_id: businessId,\r\n      variables: ['variable1', 'variable2'],\r\n      template_description: 'A test template for API testing'\r\n    };\r\n    \r\n    const response = await fetch('/templates/', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': `Bearer ${apiKey}`\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify(templateData)\r\n    });\r\n    \r\n    const status = response.status;\r\n    const data = await response.json().catch(() => ({}));\r\n    \r\n    console.log('Create template result:', { status, data });\r\n    \r\n    return {\r\n      success: response.ok,\r\n      status,\r\n      data\r\n    };\r\n  } catch (err) {\r\n    console.error('Create template error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Run all API tests\r\n * @param {string} [businessId] - The business ID (optional, will use stored credentials if not provided)\r\n * @param {string} [apiKey] - The API key (optional, will use stored credentials if not provided)\r\n * @returns {Promise<Object>} - The test results\r\n */\r\nexport const runAllApiTests = async (businessId, apiKey) => {\r\n  console.log('Running all API tests...');\r\n  \r\n  try {\r\n    // If businessId or apiKey is not provided, try to get them from stored credentials\r\n    if (!businessId || !apiKey) {\r\n      const storedCredentials = getStoredCredentials();\r\n      businessId = businessId || storedCredentials.businessId;\r\n      apiKey = apiKey || storedCredentials.businessApiKey;\r\n      \r\n      if (!businessId || !apiKey) {\r\n        return {\r\n          success: false,\r\n          error: 'Business ID and API Key are required'\r\n        };\r\n      }\r\n    }\r\n    \r\n    const authResult = await testApiKeyAuth(businessId, apiKey);\r\n    const templateResult = await testTemplateOperations(businessId, apiKey);\r\n    \r\n    return {\r\n      success: authResult.success && templateResult.success,\r\n      authResult,\r\n      templateResult\r\n    };\r\n  } catch (err) {\r\n    console.error('API tests error:', err);\r\n    return {\r\n      success: false,\r\n      error: err.message\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}