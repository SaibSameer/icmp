{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\AddEditStageForm\\\\AddEditStageForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// TODO: Import routing hooks (useParams, useLocation, useNavigate)\n// Example: import { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { API_BASE_URL } from '../../config';\n\n// Remove the hardcoded API_BASE_URL\n// const API_BASE_URL = 'http://localhost:5000';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddEditStageForm() {\n  _s();\n  // --- Routing & Context ---\n  // TODO: Replace placeholder logic with actual router hooks\n  // const { stageId } = useParams(); // Get stageId from URL path for edit mode\n  // const location = useLocation();\n  // const queryParams = new URLSearchParams(location.search);\n  // const agentIdParam = queryParams.get('agent_id'); // Get agent context ('uuid' or 'null')\n\n  // --- Placeholder ---\n  const stageId = null; // Set to a stage UUID string for testing Edit mode\n  const agentIdParam = 'null'; // Set to 'null' or agent UUID string\n  // --- End Placeholder ---\n\n  const isEditMode = Boolean(stageId);\n  const navigate = path => console.log(`Navigate to: ${path}`); // Placeholder navigate\n\n  // --- State ---\n  const [formData, setFormData] = useState({\n    stage_name: '',\n    stage_description: 'Default description',\n    // Add default value\n    stage_type: 'conversation',\n    // Add default value (one of the common types)\n    stage_selection_template_id: '',\n    data_extraction_template_id: '',\n    response_generation_template_id: ''\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    selection: [],\n    extraction: [],\n    generation: []\n  });\n  const [isLoading, setIsLoading] = useState(true); // Loading templates or stage data\n  const [isSaving, setIsSaving] = useState(false); // Saving state\n  const [error, setError] = useState(null);\n  const [contextAgentName, setContextAgentName] = useState('General');\n\n  // TODO: Replace with actual business ID from context/props/state management\n  const businessId = '7ae167a0-d864-43b9-bdaf-fcba35b33f27'; // Replace with a REAL ID\n\n  // --- Effects ---\n  // 1. Determine context agent name (similar to list view)\n  useEffect(() => {\n    // TODO: If agentIdParam is a UUID, fetch agent details to get name?\n    setContextAgentName(agentIdParam === 'null' ? 'General' : `Agent ${agentIdParam}`);\n  }, [agentIdParam]);\n\n  // 2. Fetch available templates\n  useEffect(() => {\n    const fetchTemplates = async () => {\n      setError(null);\n      setIsLoading(true); // Start loading templates\n      console.log(\"Fetching available templates...\");\n\n      // Organize templates by type for dropdowns\n      const organized = {\n        selection: [],\n        extraction: [],\n        generation: []\n      };\n\n      // Step 1: Fetch regular templates first\n      try {\n        const regularResponse = await fetch(`${API_BASE_URL}/templates`, {\n          method: 'GET',\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (regularResponse.ok) {\n          const regularTemplates = await regularResponse.json();\n          console.log(\"Regular templates fetched:\", regularTemplates);\n\n          // Process regular templates\n          regularTemplates.forEach(template => {\n            categorizeTemplate(template, organized);\n          });\n        } else {\n          console.warn(`Failed to fetch regular templates: ${regularResponse.status}`);\n        }\n\n        // Step 2: Now fetch default templates\n        const defaultResponse = await fetch(`${API_BASE_URL}/api/templates/default-templates`, {\n          method: 'GET',\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (defaultResponse.ok) {\n          const defaultTemplates = await defaultResponse.json();\n          console.log(\"Default templates fetched:\", defaultTemplates);\n\n          // Process default templates and add them to the organized object\n          defaultTemplates.forEach(template => {\n            // Add a flag to indicate this is a default template (for UI display)\n            template.isDefault = true;\n            categorizeTemplate(template, organized);\n          });\n        } else {\n          console.warn(`Failed to fetch default templates: ${defaultResponse.status}`);\n        }\n\n        // If we have templates from either source\n        if (organized.selection.length > 0 || organized.extraction.length > 0 || organized.generation.length > 0) {\n          setAvailableTemplates(organized);\n          console.log(\"Templates fetched and organized:\", organized);\n        } else {\n          throw new Error(\"No templates found from any source\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching templates:\", err);\n        setError(err.message || \"Failed to load templates. Cannot create/edit stage.\");\n        setAvailableTemplates({\n          selection: [],\n          extraction: [],\n          generation: []\n        }); // Ensure empty on error\n      } finally {\n        // Don't set isLoading to false here if in edit mode, wait for stage data\n        if (!isEditMode) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    // Helper function to categorize a template into the right bucket\n    const categorizeTemplate = (template, organized) => {\n      const type = template.template_type || '';\n\n      // Map template types to categories\n      if (type === 'stage_selection' || type === 'default_stage_selection' || type.includes('selection')) {\n        organized.selection.push(template);\n      } else if (type === 'data_extraction' || type === 'default_data_extraction' || type.includes('extract')) {\n        organized.extraction.push(template);\n      } else if (type === 'response_generation' || type === 'default_response_generation' || type.includes('response') || type.includes('generation')) {\n        organized.generation.push(template);\n      }\n      // For templates with no type, try to infer from name\n      else if (type === '' || type === 'generic') {\n        const name = (template.template_name || template.name || '').toLowerCase();\n        if (name.includes('selection')) {\n          organized.selection.push(template);\n        } else if (name.includes('extract')) {\n          organized.extraction.push(template);\n        } else if (name.includes('response') || name.includes('generation')) {\n          organized.generation.push(template);\n        }\n      }\n    };\n    fetchTemplates();\n  }, [isEditMode, API_BASE_URL]); // Fetch templates on mount\n\n  // 3. Fetch stage data if in Edit mode (after templates are loaded)\n  useEffect(() => {\n    const fetchStageDetails = async () => {\n      if (!isEditMode || !businessId || agentIdParam === null) return; // Need context\n\n      // Continue loading state from template fetch until stage data is loaded/failed\n      setIsLoading(true);\n      setError(null); // Clear template fetch errors if any\n      console.log(`Fetching details for stage ID: ${stageId}, Agent Context: ${agentIdParam}`);\n\n      // Fetch the list and filter, as GET /stages/{id} isn't implemented\n      const listUrl = `${API_BASE_URL}/stages?business_id=${businessId}&agent_id=${agentIdParam}`;\n      try {\n        const response = await fetch(listUrl, {\n          method: 'GET',\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          throw new Error(`HTTP error ${response.status}: ${errorData.message || 'Failed to fetch stage list for editing'}`);\n        }\n        const stageList = await response.json();\n        const stageToEdit = stageList.find(s => s.stage_id === stageId);\n        if (!stageToEdit) {\n          throw new Error(`Stage with ID ${stageId} not found in the list for the given context.`);\n        }\n        console.log(\"Found stage to edit:\", stageToEdit);\n        // Set form data with existing stage details\n        setFormData({\n          stage_name: stageToEdit.stage_name || '',\n          stage_description: stageToEdit.stage_description || '',\n          stage_type: stageToEdit.stage_type || '',\n          stage_selection_template_id: stageToEdit.stage_selection_template_id || '',\n          data_extraction_template_id: stageToEdit.data_extraction_template_id || '',\n          response_generation_template_id: stageToEdit.response_generation_template_id || ''\n        });\n      } catch (err) {\n        console.error(\"Error fetching stage details for edit:\", err);\n        setError(err.message || \"Failed to load stage details for editing.\");\n        // Clear form data on error? Or leave potentially partially loaded? Clearing is safer.\n        setFormData({\n          stage_name: '',\n          stage_description: '',\n          stage_type: '',\n          stage_selection_template_id: '',\n          data_extraction_template_id: '',\n          response_generation_template_id: ''\n        });\n      } finally {\n        setIsLoading(false); // Finish loading indicator\n      }\n    };\n\n    // Only run fetchStageDetails if in edit mode and templates are potentially loaded\n    if (isEditMode && availableTemplates.selection.length > 0) {\n      // Check if templates loaded as a proxy\n      fetchStageDetails();\n    } else if (isEditMode && error) {\n      // If template fetch failed, stop loading for edit mode too\n      setIsLoading(false);\n    }\n  }, [isEditMode, stageId, businessId, agentIdParam, availableTemplates]); // Dependencies for fetching stage data\n\n  // At the beginning of the file, right at first render:\n  useEffect(() => {\n    // Ensure we always have default values for required fields\n    setFormData(current => ({\n      ...current,\n      stage_description: current.stage_description || 'Default description',\n      stage_type: current.stage_type || 'conversation'\n    }));\n  }, []);\n\n  // --- Handlers ---\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    console.log(`Field ${name} changed to: ${value}`);\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSaving(true);\n    setError(null);\n\n    // Log the form state to verify values\n    console.log(\"Form state before submission:\", {\n      stage_name: formData.stage_name,\n      stage_description: formData.stage_description,\n      stage_type: formData.stage_type,\n      selection_id: formData.stage_selection_template_id,\n      extraction_id: formData.data_extraction_template_id,\n      response_id: formData.response_generation_template_id\n    });\n    console.log(\"Raw form data:\", formData);\n    const url = isEditMode ? `${API_BASE_URL}/stages/${stageId}` : `${API_BASE_URL}/stages`;\n    const method = isEditMode ? 'PUT' : 'POST';\n\n    // Ensure all required fields are present\n    if (!formData.stage_name || !formData.stage_description || !formData.stage_type) {\n      setError(\"Missing required fields: stage name, description, and type are required\");\n      setIsSaving(false);\n      return;\n    }\n\n    // Ensure all template IDs are present\n    if (!formData.stage_selection_template_id || !formData.data_extraction_template_id || !formData.response_generation_template_id) {\n      setError(\"All template selections are required\");\n      setIsSaving(false);\n      return;\n    }\n\n    // Create payload with explicit field assignments to ensure all fields are included\n    const payload = {\n      stage_name: formData.stage_name || \"\",\n      // Use a hardcoded default here in addition to the form state default\n      stage_description: formData.stage_description || \"Default stage description for \" + formData.stage_name,\n      // Use a hardcoded default here in addition to the form state default\n      stage_type: formData.stage_type || \"conversation\",\n      stage_selection_template_id: formData.stage_selection_template_id,\n      data_extraction_template_id: formData.data_extraction_template_id,\n      response_generation_template_id: formData.response_generation_template_id,\n      business_id: businessId,\n      agent_id: agentIdParam === 'null' ? null : agentIdParam\n    };\n\n    // For PUT, also need business_id in body/query for backend validation\n    if (isEditMode) {\n      payload.business_id = businessId; // Ensure it's in PUT body\n    }\n\n    // Final check to make sure all required fields are in the payload\n    console.log(\"Sending payload:\", payload);\n    const requestBody = JSON.stringify(payload);\n    console.log(\"Actual request body:\", requestBody);\n    try {\n      const response = await fetch(url, {\n        method: method,\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': 'Bearer default_api_key' // Add API key header here\n        },\n        body: requestBody\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = `HTTP error ${response.status}`;\n        try {\n          // Try to parse as JSON for structured error\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.error || errorData.message || errorMessage;\n          console.error(\"API error details:\", errorData);\n        } catch (e) {\n          // If not JSON, use the text directly\n          errorMessage = errorText || errorMessage;\n        }\n        console.error(`Error ${response.status}: ${errorText}`);\n        throw new Error(errorMessage);\n      }\n      const result = await response.json();\n      console.log(`Stage ${isEditMode ? 'updated' : 'created'}:`, result);\n\n      // If this is a new stage and we have new template IDs, update the form data\n      if (!isEditMode && result.template_ids && Object.keys(result.template_ids).length > 0) {\n        console.log(\"New template IDs created:\", result.template_ids);\n\n        // Update the form data with the new template IDs\n        const updatedFormData = {\n          ...formData,\n          stage_selection_template_id: result.template_ids.stage_selection || formData.stage_selection_template_id,\n          data_extraction_template_id: result.template_ids.data_extraction || formData.data_extraction_template_id,\n          response_generation_template_id: result.template_ids.response_generation || formData.response_generation_template_id\n        };\n        console.log(\"Updated form data with new template IDs:\", updatedFormData);\n        setFormData(updatedFormData);\n      }\n\n      // Navigate back to the list view on success\n      // TODO: Replace with actual navigate call\n      navigate(`/stages?business_id=${businessId}&agent_id=${agentIdParam}`);\n    } catch (err) {\n      console.error(`Error ${isEditMode ? 'updating' : 'creating'} stage:`, err);\n      setError(err.message || `An unexpected error occurred while ${isEditMode ? 'saving' : 'creating'} the stage.`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleCancel = () => {\n    // TODO: Replace with actual navigate call\n    navigate(`/stages?business_id=${businessId}&agent_id=${agentIdParam}`);\n  };\n\n  // --- Render Logic ---\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Loading \", isEditMode ? 'stage details' : 'form', \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If template fetch failed, prevent rendering the form\n  if (availableTemplates.selection.length === 0 && availableTemplates.extraction.length === 0 && availableTemplates.generation.length === 0 && error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error loading templates: \", error, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 79\n      }, this), \" Cannot display form.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 16\n    }, this);\n  }\n  // If edit mode failed to load stage data\n  if (isEditMode && !formData.stage_name && error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error loading stage details: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 17\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: isEditMode ? 'Edit Stage' : 'Add New Stage'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f5f5f5',\n        padding: '10px',\n        borderRadius: '5px',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '5px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Business ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 46\n        }, this), \" \", businessId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '5px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Agent Context:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 46\n        }, this), \" \", contextAgentName, \" (\", agentIdParam, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '20px',\n        padding: '10px',\n        backgroundColor: '#ffeeee',\n        borderRadius: '5px'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"stage_name\",\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Stage Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"stage_name\",\n          name: \"stage_name\",\n          value: formData.stage_name,\n          onChange: handleInputChange,\n          required: true,\n          disabled: isSaving,\n          style: {\n            padding: '8px',\n            borderRadius: '4px',\n            border: '1px solid #ccc'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"stage_description\",\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"stage_description\",\n          name: \"stage_description\",\n          value: formData.stage_description,\n          onChange: handleInputChange,\n          required: true,\n          disabled: isSaving,\n          style: {\n            padding: '8px',\n            borderRadius: '4px',\n            border: '1px solid #ccc',\n            minHeight: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"stage_type\",\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Stage Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"stage_type\",\n          name: \"stage_type\",\n          value: formData.stage_type,\n          onChange: handleInputChange,\n          required: true,\n          disabled: isSaving,\n          style: {\n            padding: '8px',\n            borderRadius: '4px',\n            border: '1px solid #ccc'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Stage Type --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"conversation\",\n            children: \"Conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"data_collection\",\n            children: \"Data Collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"prompt_response\",\n            children: \"Prompt Response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"form\",\n            children: \"Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"decision\",\n            children: \"Decision\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"transfer\",\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          margin: '10px 0',\n          border: '1px solid #eee'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: \"Template Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginBottom: '20px',\n          color: '#666'\n        },\n        children: \"Select templates for each stage of the conversation flow.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"stage_selection_template_id\",\n          children: \"Stage Selection Template:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"stage_selection_template_id\",\n          name: \"stage_selection_template_id\",\n          value: formData.stage_selection_template_id,\n          onChange: handleInputChange,\n          required: true,\n          disabled: isSaving,\n          style: {\n            padding: '8px',\n            width: '100%',\n            maxWidth: '400px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Selection Template --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"Default Templates\",\n            children: availableTemplates.selection.filter(t => t.isDefault).map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.template_id,\n              children: t.template_name || t.name || 'Unnamed Template'\n            }, t.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"Custom Templates\",\n            children: availableTemplates.selection.filter(t => !t.isDefault).map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.template_id,\n              children: t.template_name || t.name || 'Unnamed Template'\n            }, t.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"data_extraction_template_id\",\n          children: \"Data Extraction Template:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"data_extraction_template_id\",\n          name: \"data_extraction_template_id\",\n          value: formData.data_extraction_template_id,\n          onChange: handleInputChange,\n          required: true,\n          disabled: isSaving,\n          style: {\n            padding: '8px',\n            width: '100%',\n            maxWidth: '400px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Extraction Template --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"Default Templates\",\n            children: availableTemplates.extraction.filter(t => t.isDefault).map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.template_id,\n              children: t.template_name || t.name || 'Unnamed Template'\n            }, t.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"Custom Templates\",\n            children: availableTemplates.extraction.filter(t => !t.isDefault).map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.template_id,\n              children: t.template_name || t.name || 'Unnamed Template'\n            }, t.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"response_generation_template_id\",\n          children: \"Response Generation Template:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"response_generation_template_id\",\n          name: \"response_generation_template_id\",\n          value: formData.response_generation_template_id,\n          onChange: handleInputChange,\n          required: true,\n          disabled: isSaving,\n          style: {\n            padding: '8px',\n            width: '100%',\n            maxWidth: '400px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Response Template --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"Default Templates\",\n            children: availableTemplates.generation.filter(t => t.isDefault).map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.template_id,\n              children: t.template_name || t.name || 'Unnamed Template'\n            }, t.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"Custom Templates\",\n            children: availableTemplates.generation.filter(t => !t.isDefault).map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.template_id,\n              children: t.template_name || t.name || 'Unnamed Template'\n            }, t.template_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px',\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSaving || isLoading,\n          style: {\n            padding: '10px 20px',\n            backgroundColor: isSaving ? '#cccccc' : '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: isSaving ? 'not-allowed' : 'pointer'\n          },\n          children: isSaving ? 'Saving...' : isEditMode ? 'Update Stage' : 'Create Stage'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleCancel,\n          disabled: isSaving,\n          style: {\n            padding: '10px 20px',\n            backgroundColor: '#f44336',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: isSaving ? 'not-allowed' : 'pointer'\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 9\n  }, this);\n}\n_s(AddEditStageForm, \"Rilv/sNwurljnQSoclGTLMI9Y70=\");\n_c = AddEditStageForm;\nexport default AddEditStageForm;\nvar _c;\n$RefreshReg$(_c, \"AddEditStageForm\");","map":{"version":3,"names":["React","useState","useEffect","API_BASE_URL","jsxDEV","_jsxDEV","AddEditStageForm","_s","stageId","agentIdParam","isEditMode","Boolean","navigate","path","console","log","formData","setFormData","stage_name","stage_description","stage_type","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","availableTemplates","setAvailableTemplates","selection","extraction","generation","isLoading","setIsLoading","isSaving","setIsSaving","error","setError","contextAgentName","setContextAgentName","businessId","fetchTemplates","organized","regularResponse","fetch","method","credentials","headers","ok","regularTemplates","json","forEach","template","categorizeTemplate","warn","status","defaultResponse","defaultTemplates","isDefault","length","Error","err","message","type","template_type","includes","push","name","template_name","toLowerCase","fetchStageDetails","listUrl","response","errorData","catch","stageList","stageToEdit","find","s","stage_id","current","handleInputChange","e","value","target","prev","handleSubmit","preventDefault","selection_id","extraction_id","response_id","url","payload","business_id","agent_id","requestBody","JSON","stringify","body","errorText","text","errorMessage","parse","result","template_ids","Object","keys","updatedFormData","stage_selection","data_extraction","response_generation","handleCancel","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","maxWidth","margin","padding","marginBottom","backgroundColor","borderRadius","onSubmit","display","flexDirection","gap","htmlFor","fontWeight","id","onChange","required","disabled","border","minHeight","width","label","filter","t","map","template_id","marginTop","cursor","onClick","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/AddEditStageForm/AddEditStageForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// TODO: Import routing hooks (useParams, useLocation, useNavigate)\r\n// Example: import { useParams, useLocation, useNavigate } from 'react-router-dom';\r\nimport { API_BASE_URL } from '../../config';\r\n\r\n// Remove the hardcoded API_BASE_URL\r\n// const API_BASE_URL = 'http://localhost:5000';\r\n\r\nfunction AddEditStageForm() {\r\n    // --- Routing & Context ---\r\n    // TODO: Replace placeholder logic with actual router hooks\r\n    // const { stageId } = useParams(); // Get stageId from URL path for edit mode\r\n    // const location = useLocation();\r\n    // const queryParams = new URLSearchParams(location.search);\r\n    // const agentIdParam = queryParams.get('agent_id'); // Get agent context ('uuid' or 'null')\r\n\r\n    // --- Placeholder ---\r\n    const stageId = null; // Set to a stage UUID string for testing Edit mode\r\n    const agentIdParam = 'null'; // Set to 'null' or agent UUID string\r\n    // --- End Placeholder ---\r\n\r\n    const isEditMode = Boolean(stageId);\r\n    const navigate = (path) => console.log(`Navigate to: ${path}`); // Placeholder navigate\r\n\r\n    // --- State ---\r\n    const [formData, setFormData] = useState({\r\n        stage_name: '',\r\n        stage_description: 'Default description',  // Add default value\r\n        stage_type: 'conversation',  // Add default value (one of the common types)\r\n        stage_selection_template_id: '',\r\n        data_extraction_template_id: '',\r\n        response_generation_template_id: ''\r\n    });\r\n    const [availableTemplates, setAvailableTemplates] = useState({ selection: [], extraction: [], generation: [] });\r\n    const [isLoading, setIsLoading] = useState(true); // Loading templates or stage data\r\n    const [isSaving, setIsSaving] = useState(false);  // Saving state\r\n    const [error, setError] = useState(null);\r\n    const [contextAgentName, setContextAgentName] = useState('General');\r\n\r\n    // TODO: Replace with actual business ID from context/props/state management\r\n    const businessId = '7ae167a0-d864-43b9-bdaf-fcba35b33f27'; // Replace with a REAL ID\r\n\r\n    // --- Effects ---\r\n    // 1. Determine context agent name (similar to list view)\r\n    useEffect(() => {\r\n         // TODO: If agentIdParam is a UUID, fetch agent details to get name?\r\n        setContextAgentName(agentIdParam === 'null' ? 'General' : `Agent ${agentIdParam}`);\r\n    }, [agentIdParam]);\r\n\r\n    // 2. Fetch available templates\r\n    useEffect(() => {\r\n        const fetchTemplates = async () => {\r\n            setError(null);\r\n            setIsLoading(true); // Start loading templates\r\n            console.log(\"Fetching available templates...\");\r\n            \r\n            // Organize templates by type for dropdowns\r\n            const organized = { \r\n                selection: [], \r\n                extraction: [], \r\n                generation: [] \r\n            };\r\n            \r\n            // Step 1: Fetch regular templates first\r\n            try {\r\n                const regularResponse = await fetch(`${API_BASE_URL}/templates`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                    headers: { 'Accept': 'application/json' }\r\n                });\r\n                \r\n                if (regularResponse.ok) {\r\n                    const regularTemplates = await regularResponse.json();\r\n                    console.log(\"Regular templates fetched:\", regularTemplates);\r\n                    \r\n                    // Process regular templates\r\n                    regularTemplates.forEach(template => {\r\n                        categorizeTemplate(template, organized);\r\n                    });\r\n                } else {\r\n                    console.warn(`Failed to fetch regular templates: ${regularResponse.status}`);\r\n                }\r\n                \r\n                // Step 2: Now fetch default templates\r\n                const defaultResponse = await fetch(`${API_BASE_URL}/api/templates/default-templates`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                    headers: { 'Accept': 'application/json' }\r\n                });\r\n                \r\n                if (defaultResponse.ok) {\r\n                    const defaultTemplates = await defaultResponse.json();\r\n                    console.log(\"Default templates fetched:\", defaultTemplates);\r\n                    \r\n                    // Process default templates and add them to the organized object\r\n                    defaultTemplates.forEach(template => {\r\n                        // Add a flag to indicate this is a default template (for UI display)\r\n                        template.isDefault = true;\r\n                        categorizeTemplate(template, organized);\r\n                    });\r\n                } else {\r\n                    console.warn(`Failed to fetch default templates: ${defaultResponse.status}`);\r\n                }\r\n                \r\n                // If we have templates from either source\r\n                if (organized.selection.length > 0 || organized.extraction.length > 0 || organized.generation.length > 0) {\r\n                    setAvailableTemplates(organized);\r\n                    console.log(\"Templates fetched and organized:\", organized);\r\n                } else {\r\n                    throw new Error(\"No templates found from any source\");\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Error fetching templates:\", err);\r\n                setError(err.message || \"Failed to load templates. Cannot create/edit stage.\");\r\n                setAvailableTemplates({ selection: [], extraction: [], generation: [] }); // Ensure empty on error\r\n            } finally {\r\n                // Don't set isLoading to false here if in edit mode, wait for stage data\r\n                if (!isEditMode) {\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n        };\r\n        \r\n        // Helper function to categorize a template into the right bucket\r\n        const categorizeTemplate = (template, organized) => {\r\n            const type = template.template_type || '';\r\n            \r\n            // Map template types to categories\r\n            if (type === 'stage_selection' || type === 'default_stage_selection' || \r\n                type.includes('selection')) {\r\n                organized.selection.push(template);\r\n            } \r\n            else if (type === 'data_extraction' || type === 'default_data_extraction' || \r\n                     type.includes('extract')) {\r\n                organized.extraction.push(template);\r\n            } \r\n            else if (type === 'response_generation' || type === 'default_response_generation' || \r\n                     type.includes('response') || type.includes('generation')) {\r\n                organized.generation.push(template);\r\n            }\r\n            // For templates with no type, try to infer from name\r\n            else if (type === '' || type === 'generic') {\r\n                const name = (template.template_name || template.name || '').toLowerCase();\r\n                if (name.includes('selection')) {\r\n                    organized.selection.push(template);\r\n                } else if (name.includes('extract')) {\r\n                    organized.extraction.push(template);\r\n                } else if (name.includes('response') || name.includes('generation')) {\r\n                    organized.generation.push(template);\r\n                }\r\n            }\r\n        };\r\n        \r\n        fetchTemplates();\r\n    }, [isEditMode, API_BASE_URL]); // Fetch templates on mount\r\n\r\n    // 3. Fetch stage data if in Edit mode (after templates are loaded)\r\n    useEffect(() => {\r\n        const fetchStageDetails = async () => {\r\n             if (!isEditMode || !businessId || agentIdParam === null) return; // Need context\r\n\r\n            // Continue loading state from template fetch until stage data is loaded/failed\r\n            setIsLoading(true);\r\n            setError(null); // Clear template fetch errors if any\r\n            console.log(`Fetching details for stage ID: ${stageId}, Agent Context: ${agentIdParam}`);\r\n\r\n            // Fetch the list and filter, as GET /stages/{id} isn't implemented\r\n             const listUrl = `${API_BASE_URL}/stages?business_id=${businessId}&agent_id=${agentIdParam}`;\r\n\r\n            try {\r\n                const response = await fetch(listUrl, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                    headers: { 'Accept': 'application/json' }\r\n                });\r\n                 if (!response.ok) {\r\n                    const errorData = await response.json().catch(() => ({}));\r\n                    throw new Error(`HTTP error ${response.status}: ${errorData.message || 'Failed to fetch stage list for editing'}`);\r\n                }\r\n                const stageList = await response.json();\r\n                const stageToEdit = stageList.find(s => s.stage_id === stageId);\r\n\r\n                if (!stageToEdit) {\r\n                     throw new Error(`Stage with ID ${stageId} not found in the list for the given context.`);\r\n                }\r\n\r\n                console.log(\"Found stage to edit:\", stageToEdit);\r\n                // Set form data with existing stage details\r\n                setFormData({\r\n                    stage_name: stageToEdit.stage_name || '',\r\n                    stage_description: stageToEdit.stage_description || '',\r\n                    stage_type: stageToEdit.stage_type || '',\r\n                    stage_selection_template_id: stageToEdit.stage_selection_template_id || '',\r\n                    data_extraction_template_id: stageToEdit.data_extraction_template_id || '',\r\n                    response_generation_template_id: stageToEdit.response_generation_template_id || ''\r\n                 });\r\n\r\n            } catch (err) {\r\n                console.error(\"Error fetching stage details for edit:\", err);\r\n                setError(err.message || \"Failed to load stage details for editing.\");\r\n                // Clear form data on error? Or leave potentially partially loaded? Clearing is safer.\r\n                setFormData({ stage_name: '', stage_description: '', stage_type: '', stage_selection_template_id: '', data_extraction_template_id: '', response_generation_template_id: '' });\r\n            } finally {\r\n                setIsLoading(false); // Finish loading indicator\r\n            }\r\n        };\r\n\r\n         // Only run fetchStageDetails if in edit mode and templates are potentially loaded\r\n         if (isEditMode && availableTemplates.selection.length > 0) { // Check if templates loaded as a proxy\r\n             fetchStageDetails();\r\n         } else if (isEditMode && error) {\r\n            // If template fetch failed, stop loading for edit mode too\r\n             setIsLoading(false);\r\n         }\r\n\r\n    }, [isEditMode, stageId, businessId, agentIdParam, availableTemplates]); // Dependencies for fetching stage data\r\n\r\n    // At the beginning of the file, right at first render:\r\n    useEffect(() => {\r\n        // Ensure we always have default values for required fields\r\n        setFormData(current => ({\r\n            ...current,\r\n            stage_description: current.stage_description || 'Default description',\r\n            stage_type: current.stage_type || 'conversation'\r\n        }));\r\n    }, []);\r\n\r\n    // --- Handlers ---\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log(`Field ${name} changed to: ${value}`);\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsSaving(true);\r\n        setError(null);\r\n        \r\n        // Log the form state to verify values\r\n        console.log(\"Form state before submission:\", {\r\n            stage_name: formData.stage_name,\r\n            stage_description: formData.stage_description,\r\n            stage_type: formData.stage_type,\r\n            selection_id: formData.stage_selection_template_id,\r\n            extraction_id: formData.data_extraction_template_id,\r\n            response_id: formData.response_generation_template_id\r\n        });\r\n        \r\n        console.log(\"Raw form data:\", formData);\r\n\r\n        const url = isEditMode\r\n            ? `${API_BASE_URL}/stages/${stageId}`\r\n            : `${API_BASE_URL}/stages`;\r\n\r\n        const method = isEditMode ? 'PUT' : 'POST';\r\n\r\n        // Ensure all required fields are present\r\n        if (!formData.stage_name || !formData.stage_description || !formData.stage_type) {\r\n            setError(\"Missing required fields: stage name, description, and type are required\");\r\n            setIsSaving(false);\r\n            return;\r\n        }\r\n\r\n        // Ensure all template IDs are present\r\n        if (!formData.stage_selection_template_id || \r\n            !formData.data_extraction_template_id || \r\n            !formData.response_generation_template_id) {\r\n            setError(\"All template selections are required\");\r\n            setIsSaving(false);\r\n            return;\r\n        }\r\n\r\n        // Create payload with explicit field assignments to ensure all fields are included\r\n        const payload = {\r\n            stage_name: formData.stage_name || \"\",\r\n            // Use a hardcoded default here in addition to the form state default\r\n            stage_description: formData.stage_description || \"Default stage description for \" + formData.stage_name,\r\n            // Use a hardcoded default here in addition to the form state default\r\n            stage_type: formData.stage_type || \"conversation\",\r\n            stage_selection_template_id: formData.stage_selection_template_id,\r\n            data_extraction_template_id: formData.data_extraction_template_id,\r\n            response_generation_template_id: formData.response_generation_template_id,\r\n            business_id: businessId,\r\n            agent_id: agentIdParam === 'null' ? null : agentIdParam\r\n        };\r\n        \r\n        // For PUT, also need business_id in body/query for backend validation\r\n        if (isEditMode) {\r\n            payload.business_id = businessId; // Ensure it's in PUT body\r\n        }\r\n\r\n        // Final check to make sure all required fields are in the payload\r\n        console.log(\"Sending payload:\", payload);\r\n        const requestBody = JSON.stringify(payload);\r\n        console.log(\"Actual request body:\", requestBody);\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: method,\r\n                credentials: 'include',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer default_api_key' // Add API key header here\r\n                },\r\n                body: requestBody\r\n            });\r\n\r\n            if (!response.ok) {\r\n                 const errorText = await response.text();\r\n                 let errorMessage = `HTTP error ${response.status}`;\r\n                 \r\n                 try {\r\n                     // Try to parse as JSON for structured error\r\n                     const errorData = JSON.parse(errorText);\r\n                     errorMessage = errorData.error || errorData.message || errorMessage;\r\n                     console.error(\"API error details:\", errorData);\r\n                 } catch (e) {\r\n                     // If not JSON, use the text directly\r\n                     errorMessage = errorText || errorMessage;\r\n                 }\r\n                 \r\n                 console.error(`Error ${response.status}: ${errorText}`);\r\n                 throw new Error(errorMessage);\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log(`Stage ${isEditMode ? 'updated' : 'created'}:`, result);\r\n\r\n            // If this is a new stage and we have new template IDs, update the form data\r\n            if (!isEditMode && result.template_ids && Object.keys(result.template_ids).length > 0) {\r\n                console.log(\"New template IDs created:\", result.template_ids);\r\n                \r\n                // Update the form data with the new template IDs\r\n                const updatedFormData = {\r\n                    ...formData,\r\n                    stage_selection_template_id: result.template_ids.stage_selection || formData.stage_selection_template_id,\r\n                    data_extraction_template_id: result.template_ids.data_extraction || formData.data_extraction_template_id,\r\n                    response_generation_template_id: result.template_ids.response_generation || formData.response_generation_template_id\r\n                };\r\n                \r\n                console.log(\"Updated form data with new template IDs:\", updatedFormData);\r\n                setFormData(updatedFormData);\r\n            }\r\n\r\n            // Navigate back to the list view on success\r\n            // TODO: Replace with actual navigate call\r\n            navigate(`/stages?business_id=${businessId}&agent_id=${agentIdParam}`);\r\n\r\n\r\n        } catch (err) {\r\n            console.error(`Error ${isEditMode ? 'updating' : 'creating'} stage:`, err);\r\n            setError(err.message || `An unexpected error occurred while ${isEditMode ? 'saving' : 'creating'} the stage.`);\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        // TODO: Replace with actual navigate call\r\n        navigate(`/stages?business_id=${businessId}&agent_id=${agentIdParam}`);\r\n    };\r\n\r\n    // --- Render Logic ---\r\n    if (isLoading) {\r\n        return <div>Loading {isEditMode ? 'stage details' : 'form'}...</div>;\r\n    }\r\n\r\n    // If template fetch failed, prevent rendering the form\r\n     if (availableTemplates.selection.length === 0 && availableTemplates.extraction.length === 0 && availableTemplates.generation.length === 0 && error) {\r\n        return <div style={{ color: 'red' }}>Error loading templates: {error} <br/> Cannot display form.</div>;\r\n    }\r\n     // If edit mode failed to load stage data\r\n     if (isEditMode && !formData.stage_name && error) {\r\n         return <div style={{ color: 'red' }}>Error loading stage details: {error}</div>;\r\n     }\r\n\r\n\r\n    return (\r\n        <div style={{maxWidth: '800px', margin: '0 auto', padding: '20px'}}>\r\n            <h2 style={{marginBottom: '20px'}}>{isEditMode ? 'Edit Stage' : 'Add New Stage'}</h2>\r\n            <div style={{backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '5px', marginBottom: '20px'}}>\r\n                <p style={{margin: '5px 0'}}><strong>Business ID:</strong> {businessId}</p>\r\n                <p style={{margin: '5px 0'}}><strong>Agent Context:</strong> {contextAgentName} ({agentIdParam})</p>\r\n            </div>\r\n\r\n            {error && <div style={{ color: 'red', marginBottom: '20px', padding: '10px', backgroundColor: '#ffeeee', borderRadius: '5px' }}>Error: {error}</div>}\r\n\r\n            <form onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column', gap: '20px'}}>\r\n                {/* Stage Name */}\r\n                <div style={{display: 'flex', flexDirection: 'column', gap: '5px'}}>\r\n                    <label htmlFor=\"stage_name\" style={{fontWeight: 'bold'}}>Stage Name:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"stage_name\"\r\n                        name=\"stage_name\"\r\n                        value={formData.stage_name}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        disabled={isSaving}\r\n                        style={{padding: '8px', borderRadius: '4px', border: '1px solid #ccc'}}\r\n                    />\r\n                </div>\r\n\r\n                {/* Stage Description */}\r\n                <div style={{display: 'flex', flexDirection: 'column', gap: '5px'}}>\r\n                    <label htmlFor=\"stage_description\" style={{fontWeight: 'bold'}}>Description:</label>\r\n                    <textarea\r\n                        id=\"stage_description\"\r\n                        name=\"stage_description\"\r\n                        value={formData.stage_description}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        disabled={isSaving}\r\n                        style={{padding: '8px', borderRadius: '4px', border: '1px solid #ccc', minHeight: '100px'}}\r\n                    />\r\n                </div>\r\n\r\n                {/* Stage Type */}\r\n                <div style={{display: 'flex', flexDirection: 'column', gap: '5px'}}>\r\n                    <label htmlFor=\"stage_type\" style={{fontWeight: 'bold'}}>Stage Type:</label>\r\n                    <select\r\n                        id=\"stage_type\"\r\n                        name=\"stage_type\"\r\n                        value={formData.stage_type}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        disabled={isSaving}\r\n                        style={{padding: '8px', borderRadius: '4px', border: '1px solid #ccc'}}\r\n                    >\r\n                        <option value=\"\">-- Select Stage Type --</option>\r\n                        <option value=\"conversation\">Conversation</option>\r\n                        <option value=\"data_collection\">Data Collection</option>\r\n                        <option value=\"prompt_response\">Prompt Response</option>\r\n                        <option value=\"form\">Form</option>\r\n                        <option value=\"decision\">Decision</option>\r\n                        <option value=\"transfer\">Transfer</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <hr style={{margin: '10px 0', border: '1px solid #eee'}}/>\r\n\r\n                {/* Template section header */}\r\n                <h3 style={{marginBottom: '10px'}}>Template Selection</h3>\r\n                <p style={{marginBottom: '20px', color: '#666'}}>Select templates for each stage of the conversation flow.</p>\r\n\r\n                {/* Template Selectors */}\r\n                <div>\r\n                    <label htmlFor=\"stage_selection_template_id\">Stage Selection Template:</label>\r\n                    <select\r\n                        id=\"stage_selection_template_id\"\r\n                        name=\"stage_selection_template_id\"\r\n                        value={formData.stage_selection_template_id}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        disabled={isSaving}\r\n                        style={{padding: '8px', width: '100%', maxWidth: '400px'}}\r\n                    >\r\n                        <option value=\"\">-- Select Selection Template --</option>\r\n                        <optgroup label=\"Default Templates\">\r\n                            {availableTemplates.selection\r\n                                .filter(t => t.isDefault)\r\n                                .map(t => (\r\n                                    <option key={t.template_id} value={t.template_id}>\r\n                                        {t.template_name || t.name || 'Unnamed Template'}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </optgroup>\r\n                        <optgroup label=\"Custom Templates\">\r\n                            {availableTemplates.selection\r\n                                .filter(t => !t.isDefault)\r\n                                .map(t => (\r\n                                    <option key={t.template_id} value={t.template_id}>\r\n                                        {t.template_name || t.name || 'Unnamed Template'}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </optgroup>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"data_extraction_template_id\">Data Extraction Template:</label>\r\n                    <select\r\n                        id=\"data_extraction_template_id\"\r\n                        name=\"data_extraction_template_id\"\r\n                        value={formData.data_extraction_template_id}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        disabled={isSaving}\r\n                        style={{padding: '8px', width: '100%', maxWidth: '400px'}}\r\n                    >\r\n                        <option value=\"\">-- Select Extraction Template --</option>\r\n                        <optgroup label=\"Default Templates\">\r\n                            {availableTemplates.extraction\r\n                                .filter(t => t.isDefault)\r\n                                .map(t => (\r\n                                    <option key={t.template_id} value={t.template_id}>\r\n                                        {t.template_name || t.name || 'Unnamed Template'}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </optgroup>\r\n                        <optgroup label=\"Custom Templates\">\r\n                            {availableTemplates.extraction\r\n                                .filter(t => !t.isDefault)\r\n                                .map(t => (\r\n                                    <option key={t.template_id} value={t.template_id}>\r\n                                        {t.template_name || t.name || 'Unnamed Template'}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </optgroup>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"response_generation_template_id\">Response Generation Template:</label>\r\n                    <select\r\n                        id=\"response_generation_template_id\"\r\n                        name=\"response_generation_template_id\"\r\n                        value={formData.response_generation_template_id}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        disabled={isSaving}\r\n                        style={{padding: '8px', width: '100%', maxWidth: '400px'}}\r\n                    >\r\n                        <option value=\"\">-- Select Response Template --</option>\r\n                        <optgroup label=\"Default Templates\">\r\n                            {availableTemplates.generation\r\n                                .filter(t => t.isDefault)\r\n                                .map(t => (\r\n                                    <option key={t.template_id} value={t.template_id}>\r\n                                        {t.template_name || t.name || 'Unnamed Template'}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </optgroup>\r\n                        <optgroup label=\"Custom Templates\">\r\n                            {availableTemplates.generation\r\n                                .filter(t => !t.isDefault)\r\n                                .map(t => (\r\n                                    <option key={t.template_id} value={t.template_id}>\r\n                                        {t.template_name || t.name || 'Unnamed Template'}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </optgroup>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <div style={{display: 'flex', gap: '10px', marginTop: '20px'}}>\r\n                    <button \r\n                        type=\"submit\" \r\n                        disabled={isSaving || isLoading}\r\n                        style={{\r\n                            padding: '10px 20px',\r\n                            backgroundColor: isSaving ? '#cccccc' : '#4CAF50',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '4px',\r\n                            cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                        }}\r\n                    >\r\n                        {isSaving ? 'Saving...' : (isEditMode ? 'Update Stage' : 'Create Stage')}\r\n                    </button>\r\n                    <button \r\n                        type=\"button\" \r\n                        onClick={handleCancel} \r\n                        disabled={isSaving}\r\n                        style={{\r\n                            padding: '10px 20px',\r\n                            backgroundColor: '#f44336',\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '4px',\r\n                            cursor: isSaving ? 'not-allowed' : 'pointer'\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddEditStageForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}