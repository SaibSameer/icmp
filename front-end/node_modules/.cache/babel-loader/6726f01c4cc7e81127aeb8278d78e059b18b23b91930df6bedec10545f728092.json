{"ast":null,"code":"// src/services/agentService.js\nimport { API_CONFIG } from '../config';\nimport { getAuthHeaders } from '../services/authService';\nimport { normalizeUUID } from '../hooks/useConfig';\n\n// Fetch agents for a business\nexport const fetchAgents = async businessId => {\n  try {\n    const normalizedBusinessId = normalizeUUID(businessId);\n    console.log(`Fetching agents for business: ${normalizedBusinessId}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents?business_id=${normalizedBusinessId}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch agents');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in fetchAgents:', error);\n    throw error;\n  }\n};\n\n// Create a new agent\nexport const createAgent = async agentData => {\n  try {\n    // Make sure business_id is normalized\n    const normalizedData = {\n      ...agentData,\n      business_id: normalizeUUID(agentData.business_id)\n    };\n    console.log('Creating agent:', normalizedData);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(normalizedData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create agent');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in createAgent:', error);\n    throw error;\n  }\n};\n\n// Update an existing agent\nexport const updateAgent = async (agentId, agentData) => {\n  try {\n    // Make sure business_id is normalized\n    const normalizedData = {\n      ...agentData,\n      business_id: normalizeUUID(agentData.business_id)\n    };\n    console.log(`Updating agent ${agentId}:`, normalizedData);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}`, {\n      method: 'PUT',\n      credentials: 'include',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(normalizedData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update agent');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in updateAgent:', error);\n    throw error;\n  }\n};\n\n// Delete an agent\nexport const deleteAgent = async (agentId, businessId) => {\n  try {\n    const normalizedBusinessId = normalizeUUID(businessId);\n    console.log(`Deleting agent ${agentId} for business ${normalizedBusinessId}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${normalizedBusinessId}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        business_id: normalizedBusinessId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete agent');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error in deleteAgent:', error);\n    throw error;\n  }\n};\n\n// Get a specific agent\nexport const getAgent = async (agentId, businessId) => {\n  try {\n    const normalizedBusinessId = normalizeUUID(businessId);\n    console.log(`Fetching agent ${agentId} for business ${normalizedBusinessId}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${normalizedBusinessId}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch agent');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in getAgent:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_CONFIG","getAuthHeaders","normalizeUUID","fetchAgents","businessId","normalizedBusinessId","console","log","response","fetch","BASE_URL","method","credentials","headers","ok","errorData","json","Error","message","error","createAgent","agentData","normalizedData","business_id","body","JSON","stringify","updateAgent","agentId","deleteAgent","getAgent"],"sources":["C:/icmp_events_api/front-end/src/services/agentService.js"],"sourcesContent":["// src/services/agentService.js\r\nimport { API_CONFIG } from '../config';\r\nimport { getAuthHeaders } from '../services/authService';\r\nimport { normalizeUUID } from '../hooks/useConfig';\r\n\r\n// Fetch agents for a business\r\nexport const fetchAgents = async (businessId) => {\r\n  try {\r\n    const normalizedBusinessId = normalizeUUID(businessId);\r\n    console.log(`Fetching agents for business: ${normalizedBusinessId}`);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents?business_id=${normalizedBusinessId}`, {\r\n      method: 'GET',\r\n      credentials: 'include',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to fetch agents');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in fetchAgents:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new agent\r\nexport const createAgent = async (agentData) => {\r\n  try {\r\n    // Make sure business_id is normalized\r\n    const normalizedData = {\r\n      ...agentData,\r\n      business_id: normalizeUUID(agentData.business_id)\r\n    };\r\n    \r\n    console.log('Creating agent:', normalizedData);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents`, {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(normalizedData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create agent');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in createAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing agent\r\nexport const updateAgent = async (agentId, agentData) => {\r\n  try {\r\n    // Make sure business_id is normalized\r\n    const normalizedData = {\r\n      ...agentData,\r\n      business_id: normalizeUUID(agentData.business_id)\r\n    };\r\n    \r\n    console.log(`Updating agent ${agentId}:`, normalizedData);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}`, {\r\n      method: 'PUT',\r\n      credentials: 'include',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(normalizedData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update agent');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in updateAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete an agent\r\nexport const deleteAgent = async (agentId, businessId) => {\r\n  try {\r\n    const normalizedBusinessId = normalizeUUID(businessId);\r\n    console.log(`Deleting agent ${agentId} for business ${normalizedBusinessId}`);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${normalizedBusinessId}`, {\r\n      method: 'DELETE',\r\n      credentials: 'include',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({ business_id: normalizedBusinessId })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete agent');\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error in deleteAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get a specific agent\r\nexport const getAgent = async (agentId, businessId) => {\r\n  try {\r\n    const normalizedBusinessId = normalizeUUID(businessId);\r\n    console.log(`Fetching agent ${agentId} for business ${normalizedBusinessId}`);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${normalizedBusinessId}`, {\r\n      method: 'GET',\r\n      credentials: 'include',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to fetch agent');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in getAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}