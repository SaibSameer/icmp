{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\Configuration.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Typography, Card, CardContent, Box, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Configuration({\n  apiKey,\n  setApiKey,\n  userId,\n  setUserId,\n  businessId,\n  setBusinessId,\n  businessApiKey,\n  setBusinessApiKey,\n  handleSnackbarOpen\n}) {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const validateConfig = async credentials => {\n    try {\n      const response = await fetch('/validate_config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${credentials.apiKey}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      return {\n        success: response.ok,\n        data\n      };\n    } catch (error) {\n      console.error('Validation error:', error);\n      return {\n        success: false,\n        data: {\n          error: 'Network error during validation'\n        }\n      };\n    }\n  };\n  const saveConfig = async () => {\n    // Validate local\n    if (!apiKey || !userId || !businessId || !businessApiKey) {\n      handleSnackbarOpen(\"Please enter all the configuration values\", \"warning\");\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const credentials = {\n        apiKey,\n        userId,\n        businessId,\n        businessApiKey\n      };\n\n      // First validate the credentials\n      const validationResult = await validateConfig(credentials);\n      if (!validationResult.success) {\n        handleSnackbarOpen(validationResult.data.error || \"Invalid credentials\", \"error\");\n        return;\n      }\n      const response = await fetch('/api/save-config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        handleSnackbarOpen(\"Configuration saved successfully!\", \"success\");\n        // Clear the API keys from state after successful save\n        setApiKey('');\n        setBusinessApiKey('');\n      } else {\n        handleSnackbarOpen(data.error || \"Failed to save configuration\", \"error\");\n      }\n    } catch (error) {\n      console.error('Save config error:', error);\n      handleSnackbarOpen(\"An error occurred while saving configuration\", \"error\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"ICMP API Key\",\n          variant: \"outlined\",\n          value: apiKey,\n          onChange: e => setApiKey(e.target.value),\n          disabled: isLoading,\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Business API Key\",\n          variant: \"outlined\",\n          value: businessApiKey,\n          onChange: e => setBusinessApiKey(e.target.value),\n          disabled: isLoading,\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"User ID\",\n          variant: \"outlined\",\n          value: userId,\n          onChange: e => setUserId(e.target.value),\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Business ID\",\n          variant: \"outlined\",\n          value: businessId,\n          onChange: e => setBusinessId(e.target.value),\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: saveConfig,\n          disabled: isLoading,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 38\n          }, this) : 'Save Config'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(Configuration, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n_c = Configuration;\nexport default Configuration;\nvar _c;\n$RefreshReg$(_c, \"Configuration\");","map":{"version":3,"names":["React","useState","TextField","Button","Typography","Card","CardContent","Box","CircularProgress","jsxDEV","_jsxDEV","Configuration","apiKey","setApiKey","userId","setUserId","businessId","setBusinessId","businessApiKey","setBusinessApiKey","handleSnackbarOpen","_s","isLoading","setIsLoading","validateConfig","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","success","ok","error","console","saveConfig","validationResult","sx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","label","value","onChange","e","target","disabled","type","onClick","size","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/Configuration.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Button, Typography, Card, CardContent, Box, CircularProgress } from '@mui/material';\r\n\r\nfunction Configuration({\r\n    apiKey,\r\n    setApiKey,\r\n    userId,\r\n    setUserId,\r\n    businessId,\r\n    setBusinessId,\r\n    businessApiKey,\r\n    setBusinessApiKey,\r\n    handleSnackbarOpen\r\n}) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const validateConfig = async (credentials) => {\r\n        try {\r\n            const response = await fetch('/validate_config', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${credentials.apiKey}`\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify(credentials)\r\n            });\r\n\r\n            const data = await response.json();\r\n            return { success: response.ok, data };\r\n        } catch (error) {\r\n            console.error('Validation error:', error);\r\n            return { success: false, data: { error: 'Network error during validation' } };\r\n        }\r\n    };\r\n\r\n    const saveConfig = async () => {\r\n        // Validate local\r\n        if (!apiKey || !userId || !businessId || !businessApiKey) {\r\n            handleSnackbarOpen(\"Please enter all the configuration values\", \"warning\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            const credentials = {\r\n                apiKey,\r\n                userId,\r\n                businessId,\r\n                businessApiKey\r\n            };\r\n\r\n            // First validate the credentials\r\n            const validationResult = await validateConfig(credentials);\r\n            if (!validationResult.success) {\r\n                handleSnackbarOpen(validationResult.data.error || \"Invalid credentials\", \"error\");\r\n                return;\r\n            }\r\n\r\n            const response = await fetch('/api/save-config', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify(credentials)\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok && data.success) {\r\n                handleSnackbarOpen(\"Configuration saved successfully!\", \"success\");\r\n                // Clear the API keys from state after successful save\r\n                setApiKey('');\r\n                setBusinessApiKey('');\r\n            } else {\r\n                handleSnackbarOpen(data.error || \"Failed to save configuration\", \"error\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Save config error:', error);\r\n            handleSnackbarOpen(\"An error occurred while saving configuration\", \"error\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card sx={{ mt: 2 }}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>Configuration</Typography>\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n                    <TextField\r\n                        label=\"ICMP API Key\"\r\n                        variant=\"outlined\"\r\n                        value={apiKey}\r\n                        onChange={(e) => setApiKey(e.target.value)}\r\n                        disabled={isLoading}\r\n                        type=\"password\"\r\n                    />\r\n                    <TextField\r\n                        label=\"Business API Key\"\r\n                        variant=\"outlined\"\r\n                        value={businessApiKey}\r\n                        onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                        disabled={isLoading}\r\n                        type=\"password\"\r\n                    />\r\n                    <TextField \r\n                        label=\"User ID\" \r\n                        variant=\"outlined\" \r\n                        value={userId}\r\n                        onChange={(e) => setUserId(e.target.value)}\r\n                        disabled={isLoading}\r\n                    />\r\n                    <TextField \r\n                        label=\"Business ID\" \r\n                        variant=\"outlined\" \r\n                        value={businessId}\r\n                        onChange={(e) => setBusinessId(e.target.value)}\r\n                        disabled={isLoading}\r\n                    />\r\n\r\n                    <Button \r\n                        variant=\"contained\" \r\n                        onClick={saveConfig} \r\n                        disabled={isLoading}\r\n                    >\r\n                        {isLoading ? <CircularProgress size={24} /> : 'Save Config'}\r\n                    </Button>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Configuration;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}