{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { TextField, Button, Typography, Card, CardContent, Box, TextareaAutosize, Select, MenuItem, InputLabel, FormControl, Grid, Paper, Divider, Tab, Tabs, Alert, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Chip, Dialog, DialogTitle, DialogContent, DialogActions, CircularProgress } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport TemplateSection from './TemplateSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TemplateManagement({\n  templateID,\n  setTemplateID,\n  availableVariable = [],\n  setAvailableVariable,\n  selectedVariable,\n  setSelectedVariable,\n  handleTemplateSelection,\n  handleVariableSelection,\n  addVariableToTemplate,\n  templateName,\n  setTemplateName,\n  templateText,\n  setTemplateText,\n  templateOutput,\n  createTemplate,\n  fetchTemplates,\n  handleSnackbarOpen,\n  handleSaveDefaultTemplate,\n  apiKey,\n  setTemplateOutput\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [templateType, setTemplateType] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [activeTab, setActiveTab] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState(null);\n  const [filterType, setFilterType] = useState('all');\n  const templateTypes = [{\n    value: 'stage_selection',\n    label: 'Stage Selection'\n  }, {\n    value: 'data_extraction',\n    label: 'Data Extraction'\n  }, {\n    value: 'response_generation',\n    label: 'Response Generation'\n  }, {\n    value: 'default_stage_selection',\n    label: 'Default Stage Selection'\n  }, {\n    value: 'default_data_extraction',\n    label: 'Default Data Extraction'\n  }, {\n    value: 'default_response_generation',\n    label: 'Default Response Generation'\n  }];\n  useEffect(() => {\n    console.log(\"TemplateManagement.js useEffect is running\");\n    if (typeof fetchTemplates === 'function') {\n      fetchTemplates();\n    }\n  }, [fetchTemplates]);\n  useEffect(() => {\n    // TODO: Implement API endpoint to retrieve available variables\n    const mockVariables = ['variable1', 'variable2', 'variable3'];\n    if (typeof setAvailableVariable === 'function') {\n      setAvailableVariable(mockVariables);\n    }\n  }, [setAvailableVariable]);\n  const handleCreateTemplate = async () => {\n    try {\n      if (!templateName || !templateText || !templateType) {\n        setErrorMessage('Template name, text, and type are required');\n        return;\n      }\n      const response = await fetch('/templates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          template_name: templateName,\n          template_text: templateText,\n          template_type: templateType\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create template');\n      }\n      const data = await response.json();\n\n      // Reset form\n      setTemplateName('');\n      setTemplateText('');\n      setTemplateType('');\n\n      // Refresh templates\n      fetchTemplates();\n      setSuccessMessage('Template created successfully');\n\n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSuccessMessage('');\n      }, 3000);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  const handleUpdateTemplate = async () => {\n    try {\n      if (!editingTemplate) return;\n      const response = await fetch(`/templates/${editingTemplate.template_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          template_name: editingTemplate.template_name,\n          template_text: editingTemplate.template_text,\n          template_type: editingTemplate.template_type\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update template');\n      }\n\n      // Close dialog and refresh templates\n      setEditDialogOpen(false);\n      fetchTemplates();\n      setSuccessMessage('Template updated successfully');\n\n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSuccessMessage('');\n      }, 3000);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  const handleDeleteTemplate = async templateId => {\n    if (!window.confirm('Are you sure you want to delete this template?')) {\n      return;\n    }\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete template');\n      }\n\n      // Refresh templates\n      fetchTemplates();\n      setSuccessMessage('Template deleted successfully');\n\n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSuccessMessage('');\n      }, 3000);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  const handleDuplicateTemplate = async template => {\n    try {\n      const response = await fetch('/templates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          template_name: `${template.template_name} (Copy)`,\n          template_text: template.template_text,\n          template_type: template.template_type\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to duplicate template');\n      }\n\n      // Refresh templates\n      fetchTemplates();\n      setSuccessMessage('Template duplicated successfully');\n\n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSuccessMessage('');\n      }, 3000);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  const handleEditTemplate = template => {\n    setEditingTemplate(template);\n    setEditDialogOpen(true);\n  };\n  const handleAddVariable = variable => {\n    setTemplateText(prev => `${prev} {${variable}}`);\n  };\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  const getFilteredTemplates = () => {\n    if (filterType === 'all') {\n      return templates;\n    }\n    return templates.filter(template => template.template_type === filterType);\n  };\n  const isDefaultTemplate = type => {\n    return type.startsWith('default_');\n  };\n  const getTemplateTypeLabel = type => {\n    const found = templateTypes.find(t => t.value === type);\n    return found ? found.label : type;\n  };\n  const handleNavigateToHome = () => {\n    navigate('/business');\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 4,\n      maxWidth: 1200,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleNavigateToHome,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        sx: {\n          flexGrow: 1,\n          mb: 0\n        },\n        children: \"Template Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setErrorMessage(''),\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setSuccessMessage(''),\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: activeTab,\n      onChange: handleTabChange,\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"Create Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"View Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), activeTab === 0 && /*#__PURE__*/_jsxDEV(TemplateSection, {\n      templateId: templateID,\n      templateName: templateName,\n      templateText: templateText,\n      templateType: templateType,\n      setTemplateId: setTemplateID,\n      setTemplateName: setTemplateName,\n      setTemplateText: setTemplateText,\n      setTemplateType: setTemplateType,\n      createTemplate: handleCreateTemplate,\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }, this), activeTab === 1 && /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            flexGrow: 1\n          },\n          children: \"Available Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            variant: \"outlined\",\n            size: \"small\",\n            sx: {\n              width: 200,\n              mr: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"filter-type-label\",\n              children: \"Filter by Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"filter-type-label\",\n              value: filterType,\n              onChange: e => setFilterType(e.target.value),\n              label: \"Filter by Type\",\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"all\",\n                children: \"All Templates\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 37\n              }, this), templateTypes.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: type.value,\n                children: type.label\n              }, type.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 44\n            }, this),\n            onClick: fetchTemplates,\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          p: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(List, {\n        children: getFilteredTemplates().length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"No templates found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 33\n        }, this) : getFilteredTemplates().map(template => /*#__PURE__*/_jsxDEV(ListItem, {\n          sx: {\n            mb: 1,\n            border: '1px solid #e0e0e0',\n            borderRadius: 1,\n            bgcolor: isDefaultTemplate(template.template_type) ? '#f5f5f5' : 'white'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  sx: {\n                    fontWeight: 'bold',\n                    flexGrow: 1\n                  },\n                  children: template.template_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(Chip, {\n                  label: getTemplateTypeLabel(template.template_type),\n                  size: \"small\",\n                  color: isDefaultTemplate(template.template_type) ? \"primary\" : \"default\",\n                  sx: {\n                    mr: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  size: \"small\",\n                  onClick: () => handleEditTemplate(template),\n                  children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  size: \"small\",\n                  onClick: () => handleDuplicateTemplate(template),\n                  children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  size: \"small\",\n                  onClick: () => handleDeleteTemplate(template.template_id),\n                  disabled: isDefaultTemplate(template.template_type),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap',\n                  bgcolor: '#f9f9f9',\n                  p: 1,\n                  borderRadius: 1,\n                  fontFamily: 'monospace',\n                  maxHeight: 150,\n                  overflow: 'auto'\n                },\n                children: template.template_text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 41\n          }, this)\n        }, template.template_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: editDialogOpen,\n      onClose: () => setEditDialogOpen(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Edit Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: editingTemplate && /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          sx: {\n            mt: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              required: true,\n              label: \"Template Name\",\n              value: editingTemplate.template_name,\n              onChange: e => setEditingTemplate({\n                ...editingTemplate,\n                template_name: e.target.value\n              }),\n              margin: \"normal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              margin: \"normal\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"edit-template-type-label\",\n                children: \"Template Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"edit-template-type-label\",\n                value: editingTemplate.template_type,\n                onChange: e => setEditingTemplate({\n                  ...editingTemplate,\n                  template_type: e.target.value\n                }),\n                label: \"Template Type\",\n                children: templateTypes.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: type.value,\n                  children: type.label\n                }, type.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              required: true,\n              label: \"Template Text\",\n              value: editingTemplate.template_text,\n              onChange: e => setEditingTemplate({\n                ...editingTemplate,\n                template_text: e.target.value\n              }),\n              margin: \"normal\",\n              multiline: true,\n              rows: 8\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                p: 2,\n                bgcolor: '#f5f5f5',\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Available Variables\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 0.5\n                },\n                children: availableVariable === null || availableVariable === void 0 ? void 0 : availableVariable.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\",\n                  onClick: () => setEditingTemplate({\n                    ...editingTemplate,\n                    template_text: `${editingTemplate.template_text} {${variable}}`\n                  })\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setEditDialogOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleUpdateTemplate,\n          color: \"primary\",\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 36\n          }, this),\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n}\n_s(TemplateManagement, \"LwVx4v6iAqwz7DUvkDQ9/Ni/XPs=\", false, function () {\n  return [useNavigate];\n});\n_c = TemplateManagement;\nexport default TemplateManagement;\nvar _c;\n$RefreshReg$(_c, \"TemplateManagement\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","TextField","Button","Typography","Card","CardContent","Box","TextareaAutosize","Select","MenuItem","InputLabel","FormControl","Grid","Paper","Divider","Tab","Tabs","Alert","List","ListItem","ListItemText","ListItemSecondaryAction","IconButton","Chip","Dialog","DialogTitle","DialogContent","DialogActions","CircularProgress","DeleteIcon","EditIcon","ContentCopyIcon","SaveIcon","RefreshIcon","ArrowBackIcon","TemplateSection","jsxDEV","_jsxDEV","TemplateManagement","templateID","setTemplateID","availableVariable","setAvailableVariable","selectedVariable","setSelectedVariable","handleTemplateSelection","handleVariableSelection","addVariableToTemplate","templateName","setTemplateName","templateText","setTemplateText","templateOutput","createTemplate","fetchTemplates","handleSnackbarOpen","handleSaveDefaultTemplate","apiKey","setTemplateOutput","_s","navigate","templates","setTemplates","selectedTemplate","setSelectedTemplate","templateType","setTemplateType","errorMessage","setErrorMessage","successMessage","setSuccessMessage","activeTab","setActiveTab","isLoading","setIsLoading","editDialogOpen","setEditDialogOpen","editingTemplate","setEditingTemplate","filterType","setFilterType","templateTypes","value","label","console","log","mockVariables","handleCreateTemplate","response","fetch","method","headers","credentials","body","JSON","stringify","template_name","template_text","template_type","ok","Error","data","json","setTimeout","error","message","handleUpdateTemplate","template_id","handleDeleteTemplate","templateId","window","confirm","handleDuplicateTemplate","template","handleEditTemplate","handleAddVariable","variable","prev","handleTabChange","event","newValue","getFilteredTemplates","filter","isDefaultTemplate","type","startsWith","getTemplateTypeLabel","found","find","t","handleNavigateToHome","sx","p","mb","maxWidth","mx","children","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","flexGrow","severity","onClose","onChange","setTemplateId","size","width","id","labelId","e","target","map","startIcon","justifyContent","length","border","borderRadius","bgcolor","container","spacing","item","xs","fontWeight","color","fontSize","disabled","whiteSpace","fontFamily","maxHeight","overflow","open","fullWidth","mt","required","margin","multiline","rows","flexWrap","gap","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    TextField, Button, Typography, Card, CardContent, Box, TextareaAutosize,\r\n    Select, MenuItem, InputLabel, FormControl, Grid, Paper, Divider, Tab, Tabs, Alert, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Chip, Dialog, DialogTitle, DialogContent, DialogActions, CircularProgress\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport TemplateSection from './TemplateSection';\r\n\r\nfunction TemplateManagement({ templateID, setTemplateID, availableVariable = [], setAvailableVariable, selectedVariable, setSelectedVariable, handleTemplateSelection, handleVariableSelection, addVariableToTemplate, templateName, setTemplateName, templateText, setTemplateText, templateOutput, createTemplate, fetchTemplates, handleSnackbarOpen, handleSaveDefaultTemplate, apiKey, setTemplateOutput }) {\r\n    const navigate = useNavigate();\r\n    const [templates, setTemplates] = useState([]);\r\n    const [selectedTemplate, setSelectedTemplate] = useState(null);\r\n    const [templateType, setTemplateType] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    const [editingTemplate, setEditingTemplate] = useState(null);\r\n    const [filterType, setFilterType] = useState('all');\r\n\r\n    const templateTypes = [\r\n        { value: 'stage_selection', label: 'Stage Selection' },\r\n        { value: 'data_extraction', label: 'Data Extraction' },\r\n        { value: 'response_generation', label: 'Response Generation' },\r\n        { value: 'default_stage_selection', label: 'Default Stage Selection' },\r\n        { value: 'default_data_extraction', label: 'Default Data Extraction' },\r\n        { value: 'default_response_generation', label: 'Default Response Generation' }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        console.log(\"TemplateManagement.js useEffect is running\");\r\n        if (typeof fetchTemplates === 'function') {\r\n            fetchTemplates();\r\n        }\r\n    }, [fetchTemplates]);\r\n\r\n    useEffect(() => {\r\n        // TODO: Implement API endpoint to retrieve available variables\r\n        const mockVariables = ['variable1', 'variable2', 'variable3'];\r\n        if (typeof setAvailableVariable === 'function') {\r\n            setAvailableVariable(mockVariables);\r\n        }\r\n    }, [setAvailableVariable]);\r\n\r\n    const handleCreateTemplate = async () => {\r\n        try {\r\n            if (!templateName || !templateText || !templateType) {\r\n                setErrorMessage('Template name, text, and type are required');\r\n                return;\r\n            }\r\n            \r\n            const response = await fetch('/templates', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    template_name: templateName,\r\n                    template_text: templateText,\r\n                    template_type: templateType\r\n                }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to create template');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            \r\n            // Reset form\r\n            setTemplateName('');\r\n            setTemplateText('');\r\n            setTemplateType('');\r\n            \r\n            // Refresh templates\r\n            fetchTemplates();\r\n            \r\n            setSuccessMessage('Template created successfully');\r\n            \r\n            // Clear success message after 3 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 3000);\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const handleUpdateTemplate = async () => {\r\n        try {\r\n            if (!editingTemplate) return;\r\n            \r\n            const response = await fetch(`/templates/${editingTemplate.template_id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    template_name: editingTemplate.template_name,\r\n                    template_text: editingTemplate.template_text,\r\n                    template_type: editingTemplate.template_type\r\n                }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to update template');\r\n            }\r\n            \r\n            // Close dialog and refresh templates\r\n            setEditDialogOpen(false);\r\n            fetchTemplates();\r\n            \r\n            setSuccessMessage('Template updated successfully');\r\n            \r\n            // Clear success message after 3 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 3000);\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTemplate = async (templateId) => {\r\n        if (!window.confirm('Are you sure you want to delete this template?')) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            const response = await fetch(`/templates/${templateId}`, {\r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to delete template');\r\n            }\r\n            \r\n            // Refresh templates\r\n            fetchTemplates();\r\n            \r\n            setSuccessMessage('Template deleted successfully');\r\n            \r\n            // Clear success message after 3 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 3000);\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const handleDuplicateTemplate = async (template) => {\r\n        try {\r\n            const response = await fetch('/templates', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    template_name: `${template.template_name} (Copy)`,\r\n                    template_text: template.template_text,\r\n                    template_type: template.template_type\r\n                }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to duplicate template');\r\n            }\r\n            \r\n            // Refresh templates\r\n            fetchTemplates();\r\n            \r\n            setSuccessMessage('Template duplicated successfully');\r\n            \r\n            // Clear success message after 3 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 3000);\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const handleEditTemplate = (template) => {\r\n        setEditingTemplate(template);\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n    const handleAddVariable = (variable) => {\r\n        setTemplateText((prev) => `${prev} {${variable}}`);\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setActiveTab(newValue);\r\n    };\r\n\r\n    const getFilteredTemplates = () => {\r\n        if (filterType === 'all') {\r\n            return templates;\r\n        }\r\n        \r\n        return templates.filter(template => template.template_type === filterType);\r\n    };\r\n\r\n    const isDefaultTemplate = (type) => {\r\n        return type.startsWith('default_');\r\n    };\r\n\r\n    const getTemplateTypeLabel = (type) => {\r\n        const found = templateTypes.find(t => t.value === type);\r\n        return found ? found.label : type;\r\n    };\r\n\r\n    const handleNavigateToHome = () => {\r\n        navigate('/business');\r\n    };\r\n\r\n    return (\r\n        <Paper sx={{ p: 3, mb: 4, maxWidth: 1200, mx: 'auto' }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                <IconButton onClick={handleNavigateToHome} sx={{ mr: 1 }}>\r\n                    <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h5\" gutterBottom sx={{ flexGrow: 1, mb: 0 }}>\r\n                    Template Management\r\n                </Typography>\r\n            </Box>\r\n            \r\n            {errorMessage && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setErrorMessage('')}>\r\n                    {errorMessage}\r\n                </Alert>\r\n            )}\r\n            \r\n            {successMessage && (\r\n                <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccessMessage('')}>\r\n                    {successMessage}\r\n                </Alert>\r\n            )}\r\n            \r\n            <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                <Tab label=\"Create Template\" />\r\n                <Tab label=\"View Templates\" />\r\n            </Tabs>\r\n            \r\n            {activeTab === 0 && (\r\n                <TemplateSection\r\n                    templateId={templateID}\r\n                    templateName={templateName}\r\n                    templateText={templateText}\r\n                    templateType={templateType}\r\n                    setTemplateId={setTemplateID}\r\n                    setTemplateName={setTemplateName}\r\n                    setTemplateText={setTemplateText}\r\n                    setTemplateType={setTemplateType}\r\n                    createTemplate={handleCreateTemplate}\r\n                    errorMessage={errorMessage}\r\n                />\r\n            )}\r\n            \r\n            {activeTab === 1 && (\r\n                <Box>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\r\n                            Available Templates\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                            <FormControl variant=\"outlined\" size=\"small\" sx={{ width: 200, mr: 1 }}>\r\n                                <InputLabel id=\"filter-type-label\">Filter by Type</InputLabel>\r\n                                <Select\r\n                                    labelId=\"filter-type-label\"\r\n                                    value={filterType}\r\n                                    onChange={(e) => setFilterType(e.target.value)}\r\n                                    label=\"Filter by Type\"\r\n                                >\r\n                                    <MenuItem value=\"all\">All Templates</MenuItem>\r\n                                    {templateTypes.map((type) => (\r\n                                        <MenuItem key={type.value} value={type.value}>\r\n                                            {type.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                startIcon={<RefreshIcon />}\r\n                                onClick={fetchTemplates}\r\n                            >\r\n                                Refresh\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                    \r\n                    {isLoading ? (\r\n                        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n                            <CircularProgress />\r\n                        </Box>\r\n                    ) : (\r\n                        <List>\r\n                            {getFilteredTemplates().length === 0 ? (\r\n                                <Alert severity=\"info\">No templates found</Alert>\r\n                            ) : (\r\n                                getFilteredTemplates().map((template) => (\r\n                                    <ListItem \r\n                                        key={template.template_id}\r\n                                        sx={{\r\n                                            mb: 1,\r\n                                            border: '1px solid #e0e0e0',\r\n                                            borderRadius: 1,\r\n                                            bgcolor: isDefaultTemplate(template.template_type) ? '#f5f5f5' : 'white'\r\n                                        }}\r\n                                    >\r\n                                        <Grid container spacing={1}>\r\n                                            <Grid item xs={12}>\r\n                                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', flexGrow: 1 }}>\r\n                                                        {template.template_name}\r\n                                                    </Typography>\r\n                                                    <Chip \r\n                                                        label={getTemplateTypeLabel(template.template_type)}\r\n                                                        size=\"small\"\r\n                                                        color={isDefaultTemplate(template.template_type) ? \"primary\" : \"default\"}\r\n                                                        sx={{ mr: 1 }}\r\n                                                    />\r\n                                                    <IconButton \r\n                                                        size=\"small\" \r\n                                                        onClick={() => handleEditTemplate(template)}\r\n                                                    >\r\n                                                        <EditIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                    <IconButton \r\n                                                        size=\"small\" \r\n                                                        onClick={() => handleDuplicateTemplate(template)}\r\n                                                    >\r\n                                                        <ContentCopyIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                    <IconButton \r\n                                                        size=\"small\" \r\n                                                        onClick={() => handleDeleteTemplate(template.template_id)}\r\n                                                        disabled={isDefaultTemplate(template.template_type)}\r\n                                                    >\r\n                                                        <DeleteIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography \r\n                                                    variant=\"body2\" \r\n                                                    sx={{ \r\n                                                        whiteSpace: 'pre-wrap', \r\n                                                        bgcolor: '#f9f9f9', \r\n                                                        p: 1, \r\n                                                        borderRadius: 1,\r\n                                                        fontFamily: 'monospace',\r\n                                                        maxHeight: 150,\r\n                                                        overflow: 'auto'\r\n                                                    }}\r\n                                                >\r\n                                                    {template.template_text}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </ListItem>\r\n                                ))\r\n                            )}\r\n                        </List>\r\n                    )}\r\n                </Box>\r\n            )}\r\n            \r\n            {/* Edit Template Dialog */}\r\n            <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n                <DialogTitle>Edit Template</DialogTitle>\r\n                <DialogContent>\r\n                    {editingTemplate && (\r\n                        <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    label=\"Template Name\"\r\n                                    value={editingTemplate.template_name}\r\n                                    onChange={(e) => setEditingTemplate({\r\n                                        ...editingTemplate,\r\n                                        template_name: e.target.value\r\n                                    })}\r\n                                    margin=\"normal\"\r\n                                />\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={12}>\r\n                                <FormControl fullWidth margin=\"normal\">\r\n                                    <InputLabel id=\"edit-template-type-label\">Template Type</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"edit-template-type-label\"\r\n                                        value={editingTemplate.template_type}\r\n                                        onChange={(e) => setEditingTemplate({\r\n                                            ...editingTemplate,\r\n                                            template_type: e.target.value\r\n                                        })}\r\n                                        label=\"Template Type\"\r\n                                    >\r\n                                        {templateTypes.map((type) => (\r\n                                            <MenuItem key={type.value} value={type.value}>\r\n                                                {type.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    label=\"Template Text\"\r\n                                    value={editingTemplate.template_text}\r\n                                    onChange={(e) => setEditingTemplate({\r\n                                        ...editingTemplate,\r\n                                        template_text: e.target.value\r\n                                    })}\r\n                                    margin=\"normal\"\r\n                                    multiline\r\n                                    rows={8}\r\n                                />\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={12}>\r\n                                <Box sx={{ p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>\r\n                                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                                        Available Variables\r\n                                    </Typography>\r\n                                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                        {availableVariable?.map((variable) => (\r\n                                            <Chip\r\n                                                key={variable}\r\n                                                label={variable}\r\n                                                size=\"small\"\r\n                                                onClick={() => setEditingTemplate({\r\n                                                    ...editingTemplate,\r\n                                                    template_text: `${editingTemplate.template_text} {${variable}}`\r\n                                                })}\r\n                                            />\r\n                                        ))}\r\n                                    </Box>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>\r\n                    <Button \r\n                        onClick={handleUpdateTemplate} \r\n                        color=\"primary\" \r\n                        variant=\"contained\"\r\n                        startIcon={<SaveIcon />}\r\n                    >\r\n                        Save Changes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TemplateManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}