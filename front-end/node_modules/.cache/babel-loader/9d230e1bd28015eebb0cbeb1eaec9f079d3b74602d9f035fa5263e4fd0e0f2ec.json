{"ast":null,"code":"// Global request cache to prevent duplicate API calls\nconst apiCache = {\n  cache: {},\n  get: function (url) {\n    var _this$cache$url;\n    return (_this$cache$url = this.cache[url]) === null || _this$cache$url === void 0 ? void 0 : _this$cache$url.data;\n  },\n  set: function (url, data, ttl = 60000) {\n    // Default TTL: 1 minute\n    this.cache[url] = {\n      data,\n      expiry: Date.now() + ttl\n    };\n  },\n  isValid: function (url) {\n    const item = this.cache[url];\n    return item && item.expiry > Date.now();\n  },\n  clear: function () {\n    this.cache = {};\n  }\n};\n\n// Get stored credentials\nconst getStoredCredentials = () => {\n  const businessId = localStorage.getItem('businessId');\n  const businessApiKey = localStorage.getItem('businessApiKey');\n  return {\n    businessId,\n    businessApiKey\n  };\n};\n\n// Cached fetch function\nexport const cachedFetch = async (url, options = {}, ttl = 60000) => {\n  // Get stored credentials\n  const {\n    businessId,\n    businessApiKey\n  } = getStoredCredentials();\n\n  // Ensure URL ends with trailing slash for POST/PUT requests\n  if ((options.method === 'POST' || options.method === 'PUT') && !url.endsWith('/')) {\n    url = url + '/';\n  }\n\n  // Add business_id to URL if not already present\n  if (businessId && !url.includes('business_id=')) {\n    url += (url.includes('?') ? '&' : '?') + `business_id=${businessId}`;\n  }\n\n  // Create cache key including the stringified body for POST/PUT requests\n  const cacheKey = options.method === 'POST' || options.method === 'PUT' ? `${url}-${JSON.stringify(options.body)}` : url;\n\n  // Check cache first for GET requests\n  if (options.method === 'GET' && apiCache.isValid(cacheKey)) {\n    console.log(`Using cached data for: ${url}`);\n    return {\n      ok: true,\n      json: async () => apiCache.get(cacheKey)\n    };\n  }\n\n  // Prepare headers\n  const headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...options.headers\n  };\n\n  // Add API key to headers if available\n  if (businessApiKey) {\n    // The backend expects the API key in the Authorization header with 'Bearer ' prefix\n    headers['Authorization'] = `Bearer ${businessApiKey}`;\n  }\n\n  // Ensure body is properly stringified if present\n  let body = options.body;\n  if (body && typeof body === 'object') {\n    body = JSON.stringify(body);\n  }\n\n  // Make the fetch request\n  const response = await fetch(url, {\n    ...options,\n    headers,\n    body,\n    credentials: 'include'\n  });\n\n  // Cache successful GET responses\n  if (options.method === 'GET' && response.ok) {\n    const data = await response.json();\n    apiCache.set(cacheKey, data, ttl);\n    return {\n      ok: true,\n      json: async () => data\n    };\n  }\n  return response;\n};","map":{"version":3,"names":["apiCache","cache","get","url","_this$cache$url","data","set","ttl","expiry","Date","now","isValid","item","clear","getStoredCredentials","businessId","localStorage","getItem","businessApiKey","cachedFetch","options","method","endsWith","includes","cacheKey","JSON","stringify","body","console","log","ok","json","headers","response","fetch","credentials"],"sources":["C:/icmp_events_api/front-end/src/utils/fetchUtils.js"],"sourcesContent":["// Global request cache to prevent duplicate API calls\r\nconst apiCache = {\r\n  cache: {},\r\n  get: function(url) {\r\n    return this.cache[url]?.data;\r\n  },\r\n  set: function(url, data, ttl = 60000) { // Default TTL: 1 minute\r\n    this.cache[url] = {\r\n      data,\r\n      expiry: Date.now() + ttl\r\n    };\r\n  },\r\n  isValid: function(url) {\r\n    const item = this.cache[url];\r\n    return item && item.expiry > Date.now();\r\n  },\r\n  clear: function() {\r\n    this.cache = {};\r\n  }\r\n};\r\n\r\n// Get stored credentials\r\nconst getStoredCredentials = () => {\r\n  const businessId = localStorage.getItem('businessId');\r\n  const businessApiKey = localStorage.getItem('businessApiKey');\r\n  return { businessId, businessApiKey };\r\n};\r\n\r\n// Cached fetch function\r\nexport const cachedFetch = async (url, options = {}, ttl = 60000) => {\r\n  // Get stored credentials\r\n  const { businessId, businessApiKey } = getStoredCredentials();\r\n  \r\n  // Ensure URL ends with trailing slash for POST/PUT requests\r\n  if ((options.method === 'POST' || options.method === 'PUT') && !url.endsWith('/')) {\r\n    url = url + '/';\r\n  }\r\n  \r\n  // Add business_id to URL if not already present\r\n  if (businessId && !url.includes('business_id=')) {\r\n    url += (url.includes('?') ? '&' : '?') + `business_id=${businessId}`;\r\n  }\r\n  \r\n  // Create cache key including the stringified body for POST/PUT requests\r\n  const cacheKey = options.method === 'POST' || options.method === 'PUT' \r\n    ? `${url}-${JSON.stringify(options.body)}`\r\n    : url;\r\n  \r\n  // Check cache first for GET requests\r\n  if (options.method === 'GET' && apiCache.isValid(cacheKey)) {\r\n    console.log(`Using cached data for: ${url}`);\r\n    return { \r\n      ok: true,\r\n      json: async () => apiCache.get(cacheKey)\r\n    };\r\n  }\r\n  \r\n  // Prepare headers\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    ...options.headers\r\n  };\r\n\r\n  // Add API key to headers if available\r\n  if (businessApiKey) {\r\n    // The backend expects the API key in the Authorization header with 'Bearer ' prefix\r\n    headers['Authorization'] = `Bearer ${businessApiKey}`;\r\n  }\r\n  \r\n  // Ensure body is properly stringified if present\r\n  let body = options.body;\r\n  if (body && typeof body === 'object') {\r\n    body = JSON.stringify(body);\r\n  }\r\n  \r\n  // Make the fetch request\r\n  const response = await fetch(url, {\r\n    ...options,\r\n    headers,\r\n    body,\r\n    credentials: 'include'\r\n  });\r\n  \r\n  // Cache successful GET responses\r\n  if (options.method === 'GET' && response.ok) {\r\n    const data = await response.json();\r\n    apiCache.set(cacheKey, data, ttl);\r\n    return {\r\n      ok: true,\r\n      json: async () => data\r\n    };\r\n  }\r\n  \r\n  return response;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}