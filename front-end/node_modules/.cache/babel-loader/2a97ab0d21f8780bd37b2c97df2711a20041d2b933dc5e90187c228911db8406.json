{"ast":null,"code":"// src/services/stageService.js\n\nimport { API_BASE_URL } from '../config';\n\n// Placeholder function - replace with actual API call\nexport const fetchStages = async agentId => {\n  console.log(`[Service Placeholder] Fetching stages for agent: ${agentId}`);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  // Replace with actual fetch call to e.g., /api/agents/${agentId}/stages\n  // Example structure:\n  // return [\n  //   { stage_id: 'stage-abc', stage_name: 'Greeting', description: 'Initial user greeting' },\n  //   { stage_id: 'stage-def', stage_name: 'Order Inquiry', description: 'Handle order status requests' },\n  // ];\n  return [];\n};\n\n// Placeholder function - replace with actual API call\nexport const fetchStageDetails = async stageId => {\n  try {\n    const businessId = localStorage.getItem('businessId');\n    if (!businessId || !stageId) {\n      throw new Error('Missing required parameters: ' + (!businessId ? 'businessId ' : '') + (!stageId ? 'stageId' : ''));\n    }\n    console.log(`Fetching stage details for stage ${stageId} and business ${businessId}`);\n    const response = await fetch(`${API_BASE_URL}/stages/${stageId}?business_id=${businessId}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.error('Error response:', errorData);\n      throw new Error(errorData.error || `Failed to fetch stage details (HTTP ${response.status})`);\n    }\n    const data = await response.json();\n    console.log('Received stage details:', data);\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid response format from server');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching stage details:', error);\n    throw error;\n  }\n};\n\n// Add other stage-related API functions here later (create, update, delete)","map":{"version":3,"names":["API_BASE_URL","fetchStages","agentId","console","log","Promise","resolve","setTimeout","fetchStageDetails","stageId","businessId","localStorage","getItem","Error","response","fetch","method","credentials","headers","ok","errorData","json","catch","error","status","data"],"sources":["C:/icmp_events_api/front-end/src/services/stageService.js"],"sourcesContent":["// src/services/stageService.js\r\n\r\nimport { API_BASE_URL } from '../config';\r\n\r\n// Placeholder function - replace with actual API call\r\nexport const fetchStages = async (agentId) => {\r\n  console.log(`[Service Placeholder] Fetching stages for agent: ${agentId}`);\r\n  await new Promise(resolve => setTimeout(resolve, 500));\r\n  // Replace with actual fetch call to e.g., /api/agents/${agentId}/stages\r\n  // Example structure:\r\n  // return [\r\n  //   { stage_id: 'stage-abc', stage_name: 'Greeting', description: 'Initial user greeting' },\r\n  //   { stage_id: 'stage-def', stage_name: 'Order Inquiry', description: 'Handle order status requests' },\r\n  // ];\r\n  return [];\r\n};\r\n\r\n// Placeholder function - replace with actual API call\r\nexport const fetchStageDetails = async (stageId) => {\r\n    try {\r\n        const businessId = localStorage.getItem('businessId');\r\n        if (!businessId || !stageId) {\r\n            throw new Error('Missing required parameters: ' + \r\n                (!businessId ? 'businessId ' : '') + \r\n                (!stageId ? 'stageId' : ''));\r\n        }\r\n\r\n        console.log(`Fetching stage details for stage ${stageId} and business ${businessId}`);\r\n        \r\n        const response = await fetch(`${API_BASE_URL}/stages/${stageId}?business_id=${businessId}`, {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({}));\r\n            console.error('Error response:', errorData);\r\n            throw new Error(errorData.error || `Failed to fetch stage details (HTTP ${response.status})`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Received stage details:', data);\r\n        \r\n        if (!data || typeof data !== 'object') {\r\n            throw new Error('Invalid response format from server');\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching stage details:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Add other stage-related API functions here later (create, update, delete)\r\n"],"mappings":"AAAA;;AAEA,SAASA,YAAY,QAAQ,WAAW;;AAExC;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5CC,OAAO,CAACC,GAAG,CAAC,oDAAoDF,OAAO,EAAE,CAAC;EAC1E,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EACtD;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAChD,IAAI;IACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,IAAI,CAACF,UAAU,IAAI,CAACD,OAAO,EAAE;MACzB,MAAM,IAAII,KAAK,CAAC,+BAA+B,IAC1C,CAACH,UAAU,GAAG,aAAa,GAAG,EAAE,CAAC,IACjC,CAACD,OAAO,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC;IACpC;IAEAN,OAAO,CAACC,GAAG,CAAC,oCAAoCK,OAAO,iBAAiBC,UAAU,EAAE,CAAC;IAErF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,YAAY,WAAWS,OAAO,gBAAgBC,UAAU,EAAE,EAAE;MACxFM,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE;QACL,QAAQ,EAAE;MACd;IACJ,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzDnB,OAAO,CAACoB,KAAK,CAAC,iBAAiB,EAAEH,SAAS,CAAC;MAC3C,MAAM,IAAIP,KAAK,CAACO,SAAS,CAACG,KAAK,IAAI,uCAAuCT,QAAQ,CAACU,MAAM,GAAG,CAAC;IACjG;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClClB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEqB,IAAI,CAAC;IAE5C,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACnC,MAAM,IAAIZ,KAAK,CAAC,qCAAqC,CAAC;IAC1D;IAEA,OAAOY,IAAI;EACf,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZpB,OAAO,CAACoB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}