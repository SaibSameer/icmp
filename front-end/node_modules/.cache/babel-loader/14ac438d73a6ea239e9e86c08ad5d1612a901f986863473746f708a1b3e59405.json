{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Paper, Typography, TextField, Button, Grid, Alert, Snackbar, Divider, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateEditor = ({\n  stage,\n  onSave,\n  onPreview\n}) => {\n  _s();\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fetch all available templates on component mount\n  useEffect(() => {\n    fetchAllTemplates();\n  }, []);\n\n  // Update selected templates when stage changes\n  useEffect(() => {\n    if (stage) {\n      // Set template IDs from stage\n      const templateIds = {\n        stage_selection: stage.stage_selection_template_id,\n        data_extraction: stage.data_extraction_template_id,\n        response_generation: stage.response_generation_template_id\n      };\n\n      // For each template ID, fetch the template content\n      Object.entries(templateIds).forEach(([type, id]) => {\n        if (id) {\n          fetchTemplate(id, type);\n        }\n      });\n    }\n  }, [stage, fetchTemplate]);\n  const fetchAllTemplates = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch all templates\n      const response = await fetch('/templates', {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch templates');\n      const data = await response.json();\n\n      // Organize templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: [],\n        default_stage_selection: [],\n        default_data_extraction: [],\n        default_response_generation: []\n      };\n      data.forEach(template => {\n        if (templatesByType[template.template_type]) {\n          templatesByType[template.template_type].push(template);\n        }\n      });\n      setAvailableTemplates(templatesByType);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch templates');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchTemplate = useCallback(async (templateId, type) => {\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\n      const data = await response.json();\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: data.template_id,\n          text: data.template_text,\n          type: data.template_type\n        }\n      }));\n\n      // Extract variables from template\n      setVariables(prev => ({\n        ...prev,\n        [type]: extractVariables(data.template_text)\n      }));\n    } catch (err) {\n      setError(err.message);\n    }\n  }, []);\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Fetch the selected template\n    await fetchTemplate(templateId, type);\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template to ${type}`);\n  };\n  const handleSave = async () => {\n    try {\n      // Prepare the updated stage with template text in each template\n      const updatedStage = {\n        ...stage,\n        // Keep the original template IDs, but update the templates with new text if modified\n        stage_selection_template_id: templates.stage_selection.id,\n        data_extraction_template_id: templates.data_extraction.id,\n        response_generation_template_id: templates.response_generation.id\n      };\n\n      // For each template that was modified, update it in the database\n      for (const [type, template] of Object.entries(templates)) {\n        if (template.id && template.text) {\n          try {\n            await fetch(`/templates/${template.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              credentials: 'include',\n              body: JSON.stringify({\n                template_text: template.text\n              })\n            });\n          } catch (err) {\n            setError(`Failed to update ${type} template: ${err.message}`);\n            return;\n          }\n        }\n      }\n\n      // Save the stage with updated template references\n      await onSave(updatedStage);\n      setSuccess('Templates saved successfully');\n    } catch (err) {\n      setError(err.message || 'Failed to save templates');\n    }\n  };\n  const handlePreview = async () => {\n    try {\n      const preview = await onPreview({\n        stage_selection: templates.stage_selection.text,\n        data_extraction: templates.data_extraction.text,\n        response_generation: templates.response_generation.text\n      });\n      setPreviewData(preview);\n      setShowPreview(true);\n    } catch (err) {\n      setError(err.message || 'Failed to generate preview');\n    }\n  };\n  const handleReset = () => {\n    if (stage) {\n      // Reset to original template IDs from stage\n      const templateIds = {\n        stage_selection: stage.stage_selection_template_id,\n        data_extraction: stage.data_extraction_template_id,\n        response_generation: stage.response_generation_template_id\n      };\n\n      // For each template ID, fetch the template content again\n      Object.entries(templateIds).forEach(([type, id]) => {\n        if (id) {\n          fetchTemplate(id, type);\n        }\n      });\n    }\n  };\n  const renderTemplateField = (type, label, description) => /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            flexGrow: 1\n          },\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: description,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        sx: {\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: `${type}-template-label`,\n          children: [label, \" Template\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: `${type}-template-label`,\n          value: templates[type].id || '',\n          label: `${label} Template`,\n          onChange: e => handleTemplateSelect(type, e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"None\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), availableTemplates[type].map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: template.template_id,\n            children: template.template_name\n          }, template.template_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        size: \"small\",\n        onClick: () => handleApplyDefaultTemplate(type),\n        sx: {\n          mb: 2\n        },\n        children: \"Apply Default Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        value: templates[type].text || '',\n        onChange: e => handleTemplateChange(type, e.target.value),\n        placeholder: `Enter ${label.toLowerCase()} template...`,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), variables[type].length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          children: [\"Available variables: \", variables[type].join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Template Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"text.secondary\",\n      paragraph: true,\n      children: [\"Edit the templates for each stage of the conversation. Use variables in curly braces (e.g., \", `{variable_name}`, \") to make templates dynamic.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [renderTemplateField('stage_selection', 'Stage Selection', 'Template for determining the current conversation stage. Use {stage_list} and {conversation_history} variables.'), renderTemplateField('data_extraction', 'Data Extraction', 'Template for extracting information from user messages. Use {message} and {context} variables.'), renderTemplateField('response_generation', 'Response Generation', 'Template for generating responses. Use {extracted_data} and {stage_context} variables.')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        display: 'flex',\n        gap: 2,\n        justifyContent: 'flex-end'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 22\n        }, this),\n        onClick: handleReset,\n        variant: \"outlined\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 22\n        }, this),\n        onClick: handlePreview,\n        variant: \"outlined\",\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 22\n        }, this),\n        onClick: handleSave,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Save Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(''),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        onClose: () => setError(''),\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!success,\n      autoHideDuration: 6000,\n      onClose: () => setSuccess(''),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        onClose: () => setSuccess(''),\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), showPreview && previewData && /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showPreview,\n      onClose: () => setShowPreview(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Template Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowPreview(false),\n          color: \"primary\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateEditor, \"qKDm/6iUvIsZbDMcioUBagLD4Os=\");\n_c = TemplateEditor;\nexport default TemplateEditor;\nvar _c;\n$RefreshReg$(_c, \"TemplateEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Paper","Typography","TextField","Button","Grid","Alert","Snackbar","Divider","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","Dialog","DialogTitle","DialogContent","DialogActions","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","jsxDEV","_jsxDEV","TemplateEditor","stage","onSave","onPreview","_s","templates","setTemplates","stage_selection","id","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","showPreview","setShowPreview","previewData","setPreviewData","isLoading","setIsLoading","fetchAllTemplates","templateIds","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","Object","entries","forEach","fetchTemplate","response","fetch","credentials","ok","Error","data","json","templatesByType","template","template_type","push","err","message","templateId","prev","template_id","template_text","extractVariables","matches","match","map","slice","handleTemplateChange","value","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","handleSave","updatedStage","method","headers","body","JSON","stringify","handlePreview","preview","handleReset","renderTemplateField","label","description","item","xs","children","sx","p","mb","display","alignItems","variant","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","title","size","fullWidth","labelId","onChange","e","target","template_name","onClick","multiline","rows","placeholder","toLowerCase","mt","color","join","gutterBottom","paragraph","container","spacing","gap","justifyContent","startIcon","open","autoHideDuration","onClose","severity","maxWidth","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  Divider,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\n\r\nconst TemplateEditor = ({ stage, onSave, onPreview }) => {\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Fetch all available templates on component mount\r\n  useEffect(() => {\r\n    fetchAllTemplates();\r\n  }, []);\r\n\r\n  // Update selected templates when stage changes\r\n  useEffect(() => {\r\n    if (stage) {\r\n      // Set template IDs from stage\r\n      const templateIds = {\r\n        stage_selection: stage.stage_selection_template_id,\r\n        data_extraction: stage.data_extraction_template_id,\r\n        response_generation: stage.response_generation_template_id\r\n      };\r\n\r\n      // For each template ID, fetch the template content\r\n      Object.entries(templateIds).forEach(([type, id]) => {\r\n        if (id) {\r\n          fetchTemplate(id, type);\r\n        }\r\n      });\r\n    }\r\n  }, [stage, fetchTemplate]);\r\n\r\n  const fetchAllTemplates = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch all templates\r\n      const response = await fetch('/templates', {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch templates');\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Organize templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: [],\r\n        default_stage_selection: [],\r\n        default_data_extraction: [],\r\n        default_response_generation: []\r\n      };\r\n      \r\n      data.forEach(template => {\r\n        if (templatesByType[template.template_type]) {\r\n          templatesByType[template.template_type].push(template);\r\n        }\r\n      });\r\n      \r\n      setAvailableTemplates(templatesByType);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch templates');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = useCallback(async (templateId, type) => {\r\n    try {\r\n      const response = await fetch(`/templates/${templateId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\r\n      \r\n      const data = await response.json();\r\n      \r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: {\r\n          id: data.template_id,\r\n          text: data.template_text,\r\n          type: data.template_type\r\n        }\r\n      }));\r\n      \r\n      // Extract variables from template\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: extractVariables(data.template_text)\r\n      }));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Fetch the selected template\r\n    await fetchTemplate(templateId, type);\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template to ${type}`);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      // Prepare the updated stage with template text in each template\r\n      const updatedStage = {\r\n        ...stage,\r\n        // Keep the original template IDs, but update the templates with new text if modified\r\n        stage_selection_template_id: templates.stage_selection.id,\r\n        data_extraction_template_id: templates.data_extraction.id,\r\n        response_generation_template_id: templates.response_generation.id\r\n      };\r\n\r\n      // For each template that was modified, update it in the database\r\n      for (const [type, template] of Object.entries(templates)) {\r\n        if (template.id && template.text) {\r\n          try {\r\n            await fetch(`/templates/${template.id}`, {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              credentials: 'include',\r\n              body: JSON.stringify({\r\n                template_text: template.text\r\n              }),\r\n            });\r\n          } catch (err) {\r\n            setError(`Failed to update ${type} template: ${err.message}`);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Save the stage with updated template references\r\n      await onSave(updatedStage);\r\n      setSuccess('Templates saved successfully');\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to save templates');\r\n    }\r\n  };\r\n\r\n  const handlePreview = async () => {\r\n    try {\r\n      const preview = await onPreview({\r\n        stage_selection: templates.stage_selection.text,\r\n        data_extraction: templates.data_extraction.text,\r\n        response_generation: templates.response_generation.text\r\n      });\r\n      setPreviewData(preview);\r\n      setShowPreview(true);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to generate preview');\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    if (stage) {\r\n      // Reset to original template IDs from stage\r\n      const templateIds = {\r\n        stage_selection: stage.stage_selection_template_id,\r\n        data_extraction: stage.data_extraction_template_id,\r\n        response_generation: stage.response_generation_template_id\r\n      };\r\n\r\n      // For each template ID, fetch the template content again\r\n      Object.entries(templateIds).forEach(([type, id]) => {\r\n        if (id) {\r\n          fetchTemplate(id, type);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const renderTemplateField = (type, label, description) => (\r\n    <Grid item xs={12}>\r\n      <Paper sx={{ p: 2, mb: 2 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n          <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\r\n            {label}\r\n          </Typography>\r\n          <Tooltip title={description}>\r\n            <IconButton size=\"small\">\r\n              <HelpOutlineIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Box>\r\n\r\n        {/* Template selector */}\r\n        <FormControl fullWidth sx={{ mb: 2 }}>\r\n          <InputLabel id={`${type}-template-label`}>{label} Template</InputLabel>\r\n          <Select\r\n            labelId={`${type}-template-label`}\r\n            value={templates[type].id || ''}\r\n            label={`${label} Template`}\r\n            onChange={(e) => handleTemplateSelect(type, e.target.value)}\r\n          >\r\n            <MenuItem value=\"\"><em>None</em></MenuItem>\r\n            {availableTemplates[type].map(template => (\r\n              <MenuItem key={template.template_id} value={template.template_id}>\r\n                {template.template_name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        {/* Apply default template button */}\r\n        <Button \r\n          variant=\"outlined\" \r\n          size=\"small\" \r\n          onClick={() => handleApplyDefaultTemplate(type)}\r\n          sx={{ mb: 2 }}\r\n        >\r\n          Apply Default Template\r\n        </Button>\r\n\r\n        {/* Template editor */}\r\n        <TextField\r\n          fullWidth\r\n          multiline\r\n          rows={4}\r\n          value={templates[type].text || ''}\r\n          onChange={(e) => handleTemplateChange(type, e.target.value)}\r\n          placeholder={`Enter ${label.toLowerCase()} template...`}\r\n          variant=\"outlined\"\r\n        />\r\n        {variables[type].length > 0 && (\r\n          <Box sx={{ mt: 1 }}>\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              Available variables: {variables[type].join(', ')}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Template Editor\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n        Edit the templates for each stage of the conversation. Use variables in curly braces (e.g., {`{variable_name}`}) to make templates dynamic.\r\n      </Typography>\r\n\r\n      <Grid container spacing={2}>\r\n        {renderTemplateField(\r\n          'stage_selection',\r\n          'Stage Selection',\r\n          'Template for determining the current conversation stage. Use {stage_list} and {conversation_history} variables.'\r\n        )}\r\n        {renderTemplateField(\r\n          'data_extraction',\r\n          'Data Extraction',\r\n          'Template for extracting information from user messages. Use {message} and {context} variables.'\r\n        )}\r\n        {renderTemplateField(\r\n          'response_generation',\r\n          'Response Generation',\r\n          'Template for generating responses. Use {extracted_data} and {stage_context} variables.'\r\n        )}\r\n      </Grid>\r\n\r\n      <Box sx={{ mt: 3, display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\r\n        <Button\r\n          startIcon={<RestartAltIcon />}\r\n          onClick={handleReset}\r\n          variant=\"outlined\"\r\n        >\r\n          Reset\r\n        </Button>\r\n        <Button\r\n          startIcon={<PreviewIcon />}\r\n          onClick={handlePreview}\r\n          variant=\"outlined\"\r\n        >\r\n          Preview\r\n        </Button>\r\n        <Button\r\n          startIcon={<SaveIcon />}\r\n          onClick={handleSave}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Save Templates\r\n        </Button>\r\n      </Box>\r\n\r\n      <Snackbar\r\n        open={!!error}\r\n        autoHideDuration={6000}\r\n        onClose={() => setError('')}\r\n      >\r\n        <Alert severity=\"error\" onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Snackbar\r\n        open={!!success}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSuccess('')}\r\n      >\r\n        <Alert severity=\"success\" onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      {/* Preview Dialog for future implementation */}\r\n      {showPreview && previewData && (\r\n        <Dialog\r\n          open={showPreview}\r\n          onClose={() => setShowPreview(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>Template Preview</DialogTitle>\r\n          <DialogContent>\r\n            {/* Render preview content here */}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setShowPreview(false)} color=\"primary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TemplateEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}