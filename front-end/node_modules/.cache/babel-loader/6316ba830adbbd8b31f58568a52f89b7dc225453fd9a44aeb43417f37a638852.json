{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Box, Paper, Typography, TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Grid, Alert, Divider, Chip, IconButton, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions, Snackbar } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateEditor = () => {\n  _s();\n  const {\n    templateId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Parse query parameters\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Get stored business ID and API key from localStorage\n  const storedBusinessId = localStorage.getItem('businessId');\n  const storedApiKey = localStorage.getItem('businessApiKey');\n  const storedAgentId = localStorage.getItem('agentId');\n\n  // State for template data\n  const [template, setTemplate] = useState({\n    template_id: templateId === 'new' ? '' : templateId,\n    template_name: '',\n    template_text: '',\n    template_type: 'stage_selection',\n    template_description: '',\n    variables: [],\n    agent_id: ''\n  });\n\n  // State for UI\n  const [businessId, setBusinessId] = useState(queryBusinessId || storedBusinessId || '');\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\n  const [agentId, setAgentId] = useState(queryAgentId || storedAgentId || '');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\n  const [showAgentIdInput, setShowAgentIdInput] = useState(!agentId);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [previewData, setPreviewData] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n\n  // Add state for template types array\n  const templateTypes = [{\n    value: 'stage_selection',\n    label: 'Stage Selection',\n    isDefault: false\n  }, {\n    value: 'data_extraction',\n    label: 'Data Extraction',\n    isDefault: false\n  }, {\n    value: 'response_generation',\n    label: 'Response Generation',\n    isDefault: false\n  }, {\n    value: 'default_stage_selection',\n    label: 'Default Stage Selection',\n    isDefault: true\n  }, {\n    value: 'default_data_extraction',\n    label: 'Default Data Extraction',\n    isDefault: true\n  }, {\n    value: 'default_response_generation',\n    label: 'Default Response Generation',\n    isDefault: true\n  }];\n\n  // Extract variables from template text\n  const extractVariables = text => {\n    if (!text) return [];\n    const matches = text.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n\n  // Update variables whenever template text changes\n  useEffect(() => {\n    const variables = extractVariables(template.template_text);\n    setTemplate(prev => ({\n      ...prev,\n      variables\n    }));\n  }, [template.template_text]);\n\n  // Update template's agent_id when agentId changes\n  useEffect(() => {\n    if (agentId) {\n      setTemplate(prev => ({\n        ...prev,\n        agent_id: agentId\n      }));\n    }\n  }, [agentId]);\n\n  // Fetch template data if editing an existing template\n  useEffect(() => {\n    const fetchTemplateData = async () => {\n      if (templateId === 'new') return;\n      if (!businessId) {\n        showSnackbar('Business ID is required to fetch template', 'error');\n        setShowBusinessIdInput(true);\n        return;\n      }\n      if (!businessApiKey) {\n        showSnackbar('Business API Key is required', 'error');\n        setShowBusinessIdInput(true);\n        return;\n      }\n      setIsLoading(true);\n      try {\n        var _data$template_type;\n        const response = await fetch(`/templates/${templateId}?business_id=${businessId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${businessApiKey}`\n          },\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          throw new Error(errorData.error || errorData.message || 'Failed to fetch template');\n        }\n        const data = await response.json();\n        console.log('Fetched template:', data);\n\n        // Check if this is a default template\n        const isDefaultTemplate = (_data$template_type = data.template_type) === null || _data$template_type === void 0 ? void 0 : _data$template_type.startsWith('default_');\n        setTemplate({\n          template_id: data.template_id,\n          template_name: data.template_name || '',\n          template_text: data.template_text || '',\n          template_type: isDefaultTemplate ? data.template_type.replace('default_', '') : data.template_type,\n          template_description: data.template_description || '',\n          variables: data.variables || extractVariables(data.template_text),\n          agent_id: data.agent_id || ''\n        });\n      } catch (err) {\n        console.error('Error fetching template:', err);\n        showSnackbar(err.message, 'error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTemplateData();\n  }, [templateId, businessId, businessApiKey]);\n\n  // Validate credentials\n  const validateCredentials = async () => {\n    if (!businessId || !businessApiKey) {\n      showSnackbar('Business ID and API Key are required', 'error');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n    try {\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Invalid business ID or API key');\n      }\n      return true;\n    } catch (err) {\n      console.error('Credential validation error:', err);\n      showSnackbar('Failed to validate credentials: ' + err.message, 'error');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n  };\n\n  // Save credentials\n  const saveCredentials = async () => {\n    if (!businessId || !businessApiKey) {\n      showSnackbar('Please enter both Business ID and API Key', 'error');\n      return;\n    }\n    const isValid = await validateCredentials();\n    if (isValid) {\n      // Save to both localStorage and cookies\n      localStorage.setItem('businessId', businessId);\n      localStorage.setItem('businessApiKey', businessApiKey);\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n      setShowBusinessIdInput(false);\n      showSnackbar('Business credentials validated and saved', 'success');\n    }\n  };\n\n  // Handle template preview\n  const handlePreview = async () => {\n    if (!template.template_text.trim()) {\n      showSnackbar('Template text is empty', 'error');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // Prepare preview request\n      const previewRequest = {\n        template_type: template.template_type,\n        template_text: template.template_text,\n        business_id: businessId,\n        agent_id: agentId,\n        context: {\n          conversation_history: [{\n            role: \"user\",\n            content: \"I'm interested in your products\"\n          }, {\n            role: \"assistant\",\n            content: \"I'd be happy to tell you about our products. What type are you interested in?\"\n          }],\n          extracted_data: {\n            customer_name: \"John Doe\",\n            product_interest: \"shoes\",\n            budget: \"$100\"\n          }\n        }\n      };\n      let previewSuccess = false;\n      let errorMessage = '';\n\n      // Try multiple possible endpoints (for compatibility)\n      const endpoints = ['/templates/preview', '/templates/render', '/render_template', '/api/templates/preview'];\n      let response = null;\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\n          response = await fetch(endpoint, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Authorization': `Bearer ${businessApiKey}`\n            },\n            credentials: 'include',\n            body: JSON.stringify(previewRequest)\n          });\n          if (response.ok) {\n            const data = await response.json();\n            console.log('Preview response:', data);\n            setPreviewData(data);\n            setShowPreview(true);\n            previewSuccess = true;\n            break;\n          } else {\n            const errData = await response.json().catch(() => ({}));\n            errorMessage = errData.message || errData.error || `Failed with status ${response.status}`;\n            console.warn(`Endpoint ${endpoint} failed: ${errorMessage}`);\n          }\n        } catch (endpointErr) {\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\n          errorMessage = endpointErr.message;\n        }\n      }\n\n      // If no endpoint worked, use fallback preview\n      if (!previewSuccess) {\n        console.log('All endpoint attempts failed, using local preview');\n\n        // Simple variable replacement for demonstration\n        let previewText = template.template_text;\n\n        // Replace variables with sample values\n        template.variables.forEach(variable => {\n          const sampleValue = `[Sample ${variable}]`;\n          previewText = previewText.replace(new RegExp(`{${variable}}`, 'g'), sampleValue);\n        });\n        setPreviewData({\n          rendered_text: previewText,\n          message: \"Using client-side preview (API endpoints not available)\",\n          is_fallback: true\n        });\n        setShowPreview(true);\n\n        // Show notification\n        showSnackbar(`Using fallback preview. Server error: ${errorMessage}`, 'warning');\n      }\n    } catch (err) {\n      console.error('Error generating preview:', err);\n      showSnackbar(`Failed to generate preview: ${err.message}`, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save template\n  const saveTemplate = async () => {\n    if (!template.template_name.trim()) {\n      showSnackbar('Template name is required', 'error');\n      return;\n    }\n    if (!template.template_text.trim()) {\n      showSnackbar('Template text is required', 'error');\n      return;\n    }\n    if (!businessId) {\n      showSnackbar('Business ID is required', 'error');\n      setShowBusinessIdInput(true);\n      return;\n    }\n    if (!agentId) {\n      showSnackbar('Agent ID is required', 'error');\n      setShowAgentIdInput(true);\n      return;\n    }\n    if (!businessApiKey) {\n      showSnackbar('Business API Key is required', 'error');\n      setShowBusinessIdInput(true);\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // Determine if we're creating a new template or updating an existing one\n      const isNewTemplate = !template.template_id || template.template_id === 'new';\n\n      // Prepare template data\n      const templateData = {\n        template_name: template.template_name,\n        template_text: template.template_text,\n        template_type: template.template_type,\n        business_id: businessId,\n        agent_id: agentId,\n        template_description: template.template_description || '',\n        variables: template.variables || []\n      };\n      console.log('Saving template data:', templateData);\n\n      // Construct URL and method\n      const method = isNewTemplate ? 'POST' : 'PUT';\n      const url = isNewTemplate ? '/templates' : `/templates/${template.template_id}`;\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(templateData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || 'Failed to save template');\n      }\n      const result = await response.json();\n      console.log('Template saved successfully:', result);\n\n      // Update template ID if this was a new template\n      if (isNewTemplate && result.template_id) {\n        setTemplate(prev => ({\n          ...prev,\n          template_id: result.template_id\n        }));\n\n        // Update URL without reloading\n        const newUrl = `/template-editor/${result.template_id}?business_id=${businessId}&agent_id=${agentId}`;\n        window.history.pushState({}, '', newUrl);\n      }\n      showSnackbar(`Template ${isNewTemplate ? 'created' : 'updated'} successfully. ID: ${result.template_id || template.template_id}`, 'success');\n\n      // Store a flag in localStorage to trigger refresh when returning to the templates list\n      localStorage.setItem('template_updated', 'true');\n\n      // Force a delay before navigating back to ensure the backend has time to process\n      setTimeout(() => {\n        // Navigate back to templates list with query params for both business and agent\n        navigate(`/templates?business_id=${businessId}&agent_id=${agentId}&refresh=${Date.now()}`);\n      }, 2000);\n    } catch (err) {\n      console.error('Error saving template:', err);\n      showSnackbar(err.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Navigate back to templates list\n  const handleCancel = () => {\n    navigate('/templates');\n  };\n\n  // Handle template type change\n  const handleTemplateTypeChange = e => {\n    const newType = e.target.value;\n    setTemplate(prev => ({\n      ...prev,\n      template_type: newType\n    }));\n  };\n\n  // Snackbar functions\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3,\n      maxWidth: 1200,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: template.template_id && template.template_id !== 'new' ? 'Edit Template' : 'Create New Template'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: saveTemplate,\n        disabled: isLoading || !template.template_name.trim() || !template.template_text.trim(),\n        startIcon: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 67\n        }, this),\n        children: \"Save Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), (showBusinessIdInput || !businessId || !businessApiKey) && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        border: '1px dashed',\n        borderColor: 'warning.main',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"warning.main\",\n        gutterBottom: true,\n        children: \"Business Credentials Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business ID\",\n            value: businessId,\n            onChange: e => setBusinessId(e.target.value),\n            placeholder: \"Enter your business ID\",\n            helperText: \"Required for saving templates\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business API Key\",\n            value: businessApiKey,\n            onChange: e => setBusinessApiKey(e.target.value),\n            placeholder: \"Enter your business API key\",\n            helperText: \"Required for authentication\",\n            type: \"password\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: saveCredentials,\n            fullWidth: true,\n            sx: {\n              height: '56px'\n            },\n            children: \"Validate & Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 9\n    }, this), (showAgentIdInput || !agentId) && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        border: '1px dashed',\n        borderColor: 'warning.main',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"warning.main\",\n        gutterBottom: true,\n        children: \"Agent ID Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Agent ID\",\n            value: agentId,\n            onChange: e => setAgentId(e.target.value),\n            placeholder: \"Enter your agent ID\",\n            helperText: \"Required for saving templates\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Template Name\",\n          value: template.template_name,\n          onChange: e => setTemplate(prev => ({\n            ...prev,\n            template_name: e.target.value\n          })),\n          required: true,\n          error: !template.template_name.trim(),\n          helperText: !template.template_name.trim() ? \"Template name is required\" : \"\",\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"template-type-label\",\n            children: \"Template Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"template-type-label\",\n            value: template.template_type,\n            label: \"Template Type\",\n            onChange: handleTemplateTypeChange,\n            children: templateTypes.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: type.value,\n              children: type.label\n            }, type.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Template Description\",\n          value: template.template_description,\n          onChange: e => setTemplate(prev => ({\n            ...prev,\n            template_description: e.target.value\n          })),\n          multiline: true,\n          rows: 2,\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            sx: {\n              mr: 2\n            },\n            children: \"Detected Variables:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1\n            },\n            children: template.variables.length > 0 ? template.variables.map((variable, index) => /*#__PURE__*/_jsxDEV(Chip, {\n              label: variable,\n              color: \"primary\",\n              variant: \"outlined\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"No variables detected. Use \", \"{variable_name}\", \" syntax.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: handlePreview,\n          disabled: !template.template_text.trim(),\n          startIcon: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 24\n          }, this),\n          sx: {\n            mt: 2\n          },\n          children: \"Preview Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: [\"Template Text\", /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Use {variable_name} syntax to create variables in your template\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 16,\n          value: template.template_text,\n          onChange: e => setTemplate(prev => ({\n            ...prev,\n            template_text: e.target.value\n          })),\n          placeholder: \"Enter your template text here. Use {variable_name} syntax for variables.\",\n          sx: {\n            mb: 2,\n            fontFamily: 'monospace',\n            '& .MuiInputBase-input': {\n              fontFamily: 'monospace'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showPreview,\n      onClose: () => setShowPreview(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Template Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: [\"Template: \", template.template_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle2\",\n          color: \"text.secondary\",\n          gutterBottom: true,\n          children: [\"Type: \", template.template_type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            bgcolor: 'background.paper',\n            p: 2,\n            borderRadius: 1,\n            border: '1px solid',\n            borderColor: 'divider',\n            maxHeight: '500px',\n            overflow: 'auto',\n            fontFamily: 'monospace',\n            whiteSpace: 'pre-wrap',\n            wordBreak: 'break-word'\n          },\n          children: (previewData === null || previewData === void 0 ? void 0 : previewData.rendered_text) || (previewData === null || previewData === void 0 ? void 0 : previewData.template_text) || 'No preview data available'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowPreview(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: snackbar.severity,\n        sx: {\n          width: '100%'\n        },\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 461,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateEditor, \"C4OPdullmbVb5yc9d3WSg6Y0Wvw=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = TemplateEditor;\nexport default TemplateEditor;\nvar _c;\n$RefreshReg$(_c, \"TemplateEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Box","Paper","Typography","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Grid","Alert","Divider","Chip","IconButton","Tooltip","Dialog","DialogTitle","DialogContent","DialogActions","Snackbar","SaveIcon","PreviewIcon","ArrowBackIcon","HelpOutlineIcon","VisibilityIcon","jsxDEV","_jsxDEV","TemplateEditor","_s","templateId","navigate","location","queryParams","URLSearchParams","search","queryBusinessId","get","queryAgentId","storedBusinessId","localStorage","getItem","storedApiKey","storedAgentId","template","setTemplate","template_id","template_name","template_text","template_type","template_description","variables","agent_id","businessId","setBusinessId","businessApiKey","setBusinessApiKey","agentId","setAgentId","showBusinessIdInput","setShowBusinessIdInput","showAgentIdInput","setShowAgentIdInput","isLoading","setIsLoading","error","setError","success","setSuccess","previewData","setPreviewData","showPreview","setShowPreview","snackbar","setSnackbar","open","message","severity","templateTypes","value","label","isDefault","extractVariables","text","matches","match","map","slice","prev","fetchTemplateData","showSnackbar","_data$template_type","response","fetch","method","headers","credentials","ok","errorData","json","catch","Error","data","console","log","isDefaultTemplate","startsWith","replace","err","validateCredentials","saveCredentials","isValid","setItem","document","cookie","handlePreview","trim","previewRequest","business_id","context","conversation_history","role","content","extracted_data","customer_name","product_interest","budget","previewSuccess","errorMessage","endpoints","endpoint","body","JSON","stringify","errData","status","warn","endpointErr","previewText","forEach","variable","sampleValue","RegExp","rendered_text","is_fallback","saveTemplate","isNewTemplate","templateData","url","result","newUrl","window","history","pushState","setTimeout","Date","now","handleCancel","handleTemplateTypeChange","e","newType","target","handleCloseSnackbar","sx","p","mb","maxWidth","mx","children","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","flexGrow","color","disabled","startIcon","size","border","borderColor","borderRadius","gutterBottom","container","spacing","item","xs","md","fullWidth","onChange","placeholder","helperText","required","type","height","id","labelId","multiline","rows","flexWrap","gap","length","index","mt","title","fontSize","fontFamily","onClose","my","bgcolor","maxHeight","overflow","whiteSpace","wordBreak","autoHideDuration","anchorOrigin","vertical","horizontal","width","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Grid,\r\n  Alert,\r\n  Divider,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nconst TemplateEditor = () => {\r\n  const { templateId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Parse query parameters\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  const queryAgentId = queryParams.get('agent_id');\r\n  \r\n  // Get stored business ID and API key from localStorage\r\n  const storedBusinessId = localStorage.getItem('businessId');\r\n  const storedApiKey = localStorage.getItem('businessApiKey');\r\n  const storedAgentId = localStorage.getItem('agentId');\r\n  \r\n  // State for template data\r\n  const [template, setTemplate] = useState({\r\n    template_id: templateId === 'new' ? '' : templateId,\r\n    template_name: '',\r\n    template_text: '',\r\n    template_type: 'stage_selection',\r\n    template_description: '',\r\n    variables: [],\r\n    agent_id: ''\r\n  });\r\n  \r\n  // State for UI\r\n  const [businessId, setBusinessId] = useState(queryBusinessId || storedBusinessId || '');\r\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\r\n  const [agentId, setAgentId] = useState(queryAgentId || storedAgentId || '');\r\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\r\n  const [showAgentIdInput, setShowAgentIdInput] = useState(!agentId);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  \r\n  // Add state for template types array\r\n  const templateTypes = [\r\n    { value: 'stage_selection', label: 'Stage Selection', isDefault: false },\r\n    { value: 'data_extraction', label: 'Data Extraction', isDefault: false },\r\n    { value: 'response_generation', label: 'Response Generation', isDefault: false },\r\n    { value: 'default_stage_selection', label: 'Default Stage Selection', isDefault: true },\r\n    { value: 'default_data_extraction', label: 'Default Data Extraction', isDefault: true },\r\n    { value: 'default_response_generation', label: 'Default Response Generation', isDefault: true }\r\n  ];\r\n  \r\n  // Extract variables from template text\r\n  const extractVariables = (text) => {\r\n    if (!text) return [];\r\n    const matches = text.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n  \r\n  // Update variables whenever template text changes\r\n  useEffect(() => {\r\n    const variables = extractVariables(template.template_text);\r\n    setTemplate(prev => ({\r\n      ...prev,\r\n      variables\r\n    }));\r\n  }, [template.template_text]);\r\n  \r\n  // Update template's agent_id when agentId changes\r\n  useEffect(() => {\r\n    if (agentId) {\r\n      setTemplate(prev => ({\r\n        ...prev,\r\n        agent_id: agentId\r\n      }));\r\n    }\r\n  }, [agentId]);\r\n  \r\n  // Fetch template data if editing an existing template\r\n  useEffect(() => {\r\n    const fetchTemplateData = async () => {\r\n      if (templateId === 'new') return;\r\n      \r\n      if (!businessId) {\r\n        showSnackbar('Business ID is required to fetch template', 'error');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n      \r\n      if (!businessApiKey) {\r\n        showSnackbar('Business API Key is required', 'error');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n      \r\n      setIsLoading(true);\r\n      try {\r\n        const response = await fetch(`/templates/${templateId}?business_id=${businessId}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': `Bearer ${businessApiKey}`\r\n          },\r\n          credentials: 'include'\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json().catch(() => ({}));\r\n          throw new Error(errorData.error || errorData.message || 'Failed to fetch template');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Fetched template:', data);\r\n        \r\n        // Check if this is a default template\r\n        const isDefaultTemplate = data.template_type?.startsWith('default_');\r\n        \r\n        setTemplate({\r\n          template_id: data.template_id,\r\n          template_name: data.template_name || '',\r\n          template_text: data.template_text || '',\r\n          template_type: isDefaultTemplate \r\n            ? data.template_type.replace('default_', '') \r\n            : data.template_type,\r\n          template_description: data.template_description || '',\r\n          variables: data.variables || extractVariables(data.template_text),\r\n          agent_id: data.agent_id || ''\r\n        });\r\n      } catch (err) {\r\n        console.error('Error fetching template:', err);\r\n        showSnackbar(err.message, 'error');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchTemplateData();\r\n  }, [templateId, businessId, businessApiKey]);\r\n  \r\n  // Validate credentials\r\n  const validateCredentials = async () => {\r\n    if (!businessId || !businessApiKey) {\r\n      showSnackbar('Business ID and API Key are required', 'error');\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Invalid business ID or API key');\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Credential validation error:', err);\r\n      showSnackbar('Failed to validate credentials: ' + err.message, 'error');\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Save credentials\r\n  const saveCredentials = async () => {\r\n    if (!businessId || !businessApiKey) {\r\n      showSnackbar('Please enter both Business ID and API Key', 'error');\r\n      return;\r\n    }\r\n    \r\n    const isValid = await validateCredentials();\r\n    if (isValid) {\r\n      // Save to both localStorage and cookies\r\n      localStorage.setItem('businessId', businessId);\r\n      localStorage.setItem('businessApiKey', businessApiKey);\r\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n      \r\n      setShowBusinessIdInput(false);\r\n      showSnackbar('Business credentials validated and saved', 'success');\r\n    }\r\n  };\r\n  \r\n  // Handle template preview\r\n  const handlePreview = async () => {\r\n    if (!template.template_text.trim()) {\r\n      showSnackbar('Template text is empty', 'error');\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      // Prepare preview request\r\n      const previewRequest = {\r\n        template_type: template.template_type,\r\n        template_text: template.template_text,\r\n        business_id: businessId,\r\n        agent_id: agentId,\r\n        context: {\r\n          conversation_history: [\r\n            { role: \"user\", content: \"I'm interested in your products\" },\r\n            { role: \"assistant\", content: \"I'd be happy to tell you about our products. What type are you interested in?\" }\r\n          ],\r\n          extracted_data: {\r\n            customer_name: \"John Doe\",\r\n            product_interest: \"shoes\",\r\n            budget: \"$100\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      let previewSuccess = false;\r\n      let errorMessage = '';\r\n      \r\n      // Try multiple possible endpoints (for compatibility)\r\n      const endpoints = [\r\n        '/templates/preview',\r\n        '/templates/render',\r\n        '/render_template',\r\n        '/api/templates/preview'\r\n      ];\r\n      \r\n      let response = null;\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\r\n          \r\n          response = await fetch(endpoint, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json',\r\n              'Authorization': `Bearer ${businessApiKey}`\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify(previewRequest),\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            console.log('Preview response:', data);\r\n            setPreviewData(data);\r\n            setShowPreview(true);\r\n            previewSuccess = true;\r\n            break;\r\n          } else {\r\n            const errData = await response.json().catch(() => ({}));\r\n            errorMessage = errData.message || errData.error || `Failed with status ${response.status}`;\r\n            console.warn(`Endpoint ${endpoint} failed: ${errorMessage}`);\r\n          }\r\n        } catch (endpointErr) {\r\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\r\n          errorMessage = endpointErr.message;\r\n        }\r\n      }\r\n      \r\n      // If no endpoint worked, use fallback preview\r\n      if (!previewSuccess) {\r\n        console.log('All endpoint attempts failed, using local preview');\r\n        \r\n        // Simple variable replacement for demonstration\r\n        let previewText = template.template_text;\r\n        \r\n        // Replace variables with sample values\r\n        template.variables.forEach(variable => {\r\n          const sampleValue = `[Sample ${variable}]`;\r\n          previewText = previewText.replace(new RegExp(`{${variable}}`, 'g'), sampleValue);\r\n        });\r\n        \r\n        setPreviewData({ \r\n          rendered_text: previewText,\r\n          message: \"Using client-side preview (API endpoints not available)\",\r\n          is_fallback: true\r\n        });\r\n        setShowPreview(true);\r\n        \r\n        // Show notification\r\n        showSnackbar(`Using fallback preview. Server error: ${errorMessage}`, 'warning');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating preview:', err);\r\n      showSnackbar(`Failed to generate preview: ${err.message}`, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Save template\r\n  const saveTemplate = async () => {\r\n    if (!template.template_name.trim()) {\r\n      showSnackbar('Template name is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (!template.template_text.trim()) {\r\n      showSnackbar('Template text is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (!businessId) {\r\n      showSnackbar('Business ID is required', 'error');\r\n      setShowBusinessIdInput(true);\r\n      return;\r\n    }\r\n    \r\n    if (!agentId) {\r\n      showSnackbar('Agent ID is required', 'error');\r\n      setShowAgentIdInput(true);\r\n      return;\r\n    }\r\n    \r\n    if (!businessApiKey) {\r\n      showSnackbar('Business API Key is required', 'error');\r\n      setShowBusinessIdInput(true);\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      // Determine if we're creating a new template or updating an existing one\r\n      const isNewTemplate = !template.template_id || template.template_id === 'new';\r\n      \r\n      // Prepare template data\r\n      const templateData = {\r\n        template_name: template.template_name,\r\n        template_text: template.template_text,\r\n        template_type: template.template_type,\r\n        business_id: businessId,\r\n        agent_id: agentId,\r\n        template_description: template.template_description || '',\r\n        variables: template.variables || []\r\n      };\r\n      \r\n      console.log('Saving template data:', templateData);\r\n      \r\n      // Construct URL and method\r\n      const method = isNewTemplate ? 'POST' : 'PUT';\r\n      const url = isNewTemplate ? '/templates' : `/templates/${template.template_id}`;\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(templateData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || errorData.message || 'Failed to save template');\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Template saved successfully:', result);\r\n      \r\n      // Update template ID if this was a new template\r\n      if (isNewTemplate && result.template_id) {\r\n        setTemplate(prev => ({\r\n          ...prev,\r\n          template_id: result.template_id\r\n        }));\r\n        \r\n        // Update URL without reloading\r\n        const newUrl = `/template-editor/${result.template_id}?business_id=${businessId}&agent_id=${agentId}`;\r\n        window.history.pushState({}, '', newUrl);\r\n      }\r\n      \r\n      showSnackbar(`Template ${isNewTemplate ? 'created' : 'updated'} successfully. ID: ${result.template_id || template.template_id}`, 'success');\r\n      \r\n      // Store a flag in localStorage to trigger refresh when returning to the templates list\r\n      localStorage.setItem('template_updated', 'true');\r\n      \r\n      // Force a delay before navigating back to ensure the backend has time to process\r\n      setTimeout(() => {\r\n        // Navigate back to templates list with query params for both business and agent\r\n        navigate(`/templates?business_id=${businessId}&agent_id=${agentId}&refresh=${Date.now()}`);\r\n      }, 2000);\r\n    } catch (err) {\r\n      console.error('Error saving template:', err);\r\n      showSnackbar(err.message, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Navigate back to templates list\r\n  const handleCancel = () => {\r\n    navigate('/templates');\r\n  };\r\n  \r\n  // Handle template type change\r\n  const handleTemplateTypeChange = (e) => {\r\n    const newType = e.target.value;\r\n    setTemplate(prev => ({ \r\n      ...prev, \r\n      template_type: newType\r\n    }));\r\n  };\r\n  \r\n  // Snackbar functions\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n  \r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar(prev => ({\r\n      ...prev,\r\n      open: false\r\n    }));\r\n  };\r\n  \r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={handleCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {template.template_id && template.template_id !== 'new' ? 'Edit Template' : 'Create New Template'}\r\n        </Typography>\r\n        <Box sx={{ flexGrow: 1 }} />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={saveTemplate}\r\n          disabled={isLoading || !template.template_name.trim() || !template.template_text.trim()}\r\n          startIcon={isLoading ? <CircularProgress size={24} /> : <SaveIcon />}\r\n        >\r\n          Save Template\r\n        </Button>\r\n      </Box>\r\n      \r\n      {/* Business ID input section */}\r\n      {(showBusinessIdInput || !businessId || !businessApiKey) && (\r\n        <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n            Business Credentials Required\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={5}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business ID\"\r\n                value={businessId}\r\n                onChange={(e) => setBusinessId(e.target.value)}\r\n                placeholder=\"Enter your business ID\"\r\n                helperText=\"Required for saving templates\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={5}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business API Key\"\r\n                value={businessApiKey}\r\n                onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                placeholder=\"Enter your business API key\"\r\n                helperText=\"Required for authentication\"\r\n                type=\"password\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"\r\n                onClick={saveCredentials}\r\n                fullWidth\r\n                sx={{ height: '56px' }}\r\n              >\r\n                Validate & Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n      \r\n      {/* Agent ID input section */}\r\n      {(showAgentIdInput || !agentId) && (\r\n        <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n            Agent ID Required\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={5}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Agent ID\"\r\n                value={agentId}\r\n                onChange={(e) => setAgentId(e.target.value)}\r\n                placeholder=\"Enter your agent ID\"\r\n                helperText=\"Required for saving templates\"\r\n                required\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n      \r\n      {/* Template information section */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Template Name\"\r\n            value={template.template_name}\r\n            onChange={(e) => setTemplate(prev => ({ ...prev, template_name: e.target.value }))}\r\n            required\r\n            error={!template.template_name.trim()}\r\n            helperText={!template.template_name.trim() ? \"Template name is required\" : \"\"}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          \r\n          <FormControl fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"template-type-label\">Template Type</InputLabel>\r\n            <Select\r\n              labelId=\"template-type-label\"\r\n              value={template.template_type}\r\n              label=\"Template Type\"\r\n              onChange={handleTemplateTypeChange}\r\n            >\r\n              {templateTypes.map((type) => (\r\n                <MenuItem key={type.value} value={type.value}>\r\n                  {type.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          <TextField\r\n            fullWidth\r\n            label=\"Template Description\"\r\n            value={template.template_description}\r\n            onChange={(e) => setTemplate(prev => ({ ...prev, template_description: e.target.value }))}\r\n            multiline\r\n            rows={2}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          \r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"subtitle1\" sx={{ mr: 2 }}>\r\n              Detected Variables:\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n              {template.variables.length > 0 ? (\r\n                template.variables.map((variable, index) => (\r\n                  <Chip \r\n                    key={index} \r\n                    label={variable} \r\n                    color=\"primary\" \r\n                    variant=\"outlined\" \r\n                  />\r\n                ))\r\n              ) : (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  No variables detected. Use {\"{variable_name}\"} syntax.\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={handlePreview}\r\n            disabled={!template.template_text.trim()}\r\n            startIcon={<VisibilityIcon />}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Preview Template\r\n          </Button>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={6}>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Template Text\r\n            <Tooltip title=\"Use {variable_name} syntax to create variables in your template\">\r\n              <IconButton size=\"small\">\r\n                <HelpOutlineIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={16}\r\n            value={template.template_text}\r\n            onChange={(e) => setTemplate(prev => ({ ...prev, template_text: e.target.value }))}\r\n            placeholder=\"Enter your template text here. Use {variable_name} syntax for variables.\"\r\n            sx={{ \r\n              mb: 2, \r\n              fontFamily: 'monospace',\r\n              '& .MuiInputBase-input': {\r\n                fontFamily: 'monospace',\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      \r\n      {/* Preview Dialog */}\r\n      <Dialog \r\n        open={showPreview} \r\n        onClose={() => setShowPreview(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Template Preview</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Template: {template.template_name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n            Type: {template.template_type}\r\n          </Typography>\r\n          <Divider sx={{ my: 2 }} />\r\n          <Box sx={{ \r\n            bgcolor: 'background.paper', \r\n            p: 2, \r\n            borderRadius: 1,\r\n            border: '1px solid',\r\n            borderColor: 'divider',\r\n            maxHeight: '500px',\r\n            overflow: 'auto',\r\n            fontFamily: 'monospace',\r\n            whiteSpace: 'pre-wrap',\r\n            wordBreak: 'break-word'\r\n          }}>\r\n            {previewData?.rendered_text || previewData?.template_text || 'No preview data available'}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowPreview(false)}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TemplateEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}