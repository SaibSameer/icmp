{"ast":null,"code":"// Debug service for message handling diagnostics\nconst API_BASE_URL = '/api';\nasync function request(endpoint, options = {}) {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    credentials: 'include' // Ensure cookies are sent\n  };\n  const response = await fetch(url, {\n    ...defaultOptions,\n    ...options\n  });\n  if (!response.ok) {\n    var _errorData;\n    let errorData;\n    try {\n      errorData = await response.json();\n    } catch (e) {\n      throw new Error(`HTTP error ${response.status}`);\n    }\n    const error = new Error(((_errorData = errorData) === null || _errorData === void 0 ? void 0 : _errorData.message) || `HTTP error ${response.status}`);\n    error.status = response.status;\n    error.data = errorData;\n    throw error;\n  }\n  return response.status === 204 ? null : response.json();\n}\nexport const debugService = {\n  // Get debug information for a specific conversation\n  getConversationDebug: conversationId => {\n    return request(`/debug/conversation/${conversationId}`);\n  },\n  // Get real-time message processing debug info\n  getMessageProcessingDebug: messageId => {\n    return request(`/debug/message/${messageId}`);\n  },\n  // Get stage navigation history\n  getStageNavigationDebug: conversationId => {\n    return request(`/debug/stages/${conversationId}`);\n  },\n  // Get prompt generation details\n  getPromptGenerationDebug: messageId => {\n    return request(`/debug/prompts/${messageId}`);\n  },\n  // Get data extraction results\n  getDataExtractionDebug: messageId => {\n    return request(`/debug/extraction/${messageId}`);\n  },\n  // Subscribe to real-time debug events for a conversation\n  subscribeToDebugEvents: (conversationId, callback) => {\n    const eventSource = new EventSource(`${API_BASE_URL}/debug/events/${conversationId}`);\n    eventSource.onmessage = event => {\n      const data = JSON.parse(event.data);\n      callback(data);\n    };\n    return () => eventSource.close(); // Return cleanup function\n  }\n};","map":{"version":3,"names":["API_BASE_URL","request","endpoint","options","url","defaultOptions","headers","credentials","response","fetch","ok","_errorData","errorData","json","e","Error","status","error","message","data","debugService","getConversationDebug","conversationId","getMessageProcessingDebug","messageId","getStageNavigationDebug","getPromptGenerationDebug","getDataExtractionDebug","subscribeToDebugEvents","callback","eventSource","EventSource","onmessage","event","JSON","parse","close"],"sources":["C:/icmp_events_api/front-end/src/services/debugService.js"],"sourcesContent":["// Debug service for message handling diagnostics\r\nconst API_BASE_URL = '/api';\r\n\r\nasync function request(endpoint, options = {}) {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const defaultOptions = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        credentials: 'include', // Ensure cookies are sent\r\n    };\r\n\r\n    const response = await fetch(url, { ...defaultOptions, ...options });\r\n\r\n    if (!response.ok) {\r\n        let errorData;\r\n        try {\r\n            errorData = await response.json();\r\n        } catch (e) {\r\n            throw new Error(`HTTP error ${response.status}`);\r\n        }\r\n        const error = new Error(errorData?.message || `HTTP error ${response.status}`);\r\n        error.status = response.status;\r\n        error.data = errorData;\r\n        throw error;\r\n    }\r\n\r\n    return response.status === 204 ? null : response.json();\r\n}\r\n\r\nexport const debugService = {\r\n    // Get debug information for a specific conversation\r\n    getConversationDebug: (conversationId) => {\r\n        return request(`/debug/conversation/${conversationId}`);\r\n    },\r\n\r\n    // Get real-time message processing debug info\r\n    getMessageProcessingDebug: (messageId) => {\r\n        return request(`/debug/message/${messageId}`);\r\n    },\r\n\r\n    // Get stage navigation history\r\n    getStageNavigationDebug: (conversationId) => {\r\n        return request(`/debug/stages/${conversationId}`);\r\n    },\r\n\r\n    // Get prompt generation details\r\n    getPromptGenerationDebug: (messageId) => {\r\n        return request(`/debug/prompts/${messageId}`);\r\n    },\r\n\r\n    // Get data extraction results\r\n    getDataExtractionDebug: (messageId) => {\r\n        return request(`/debug/extraction/${messageId}`);\r\n    },\r\n\r\n    // Subscribe to real-time debug events for a conversation\r\n    subscribeToDebugEvents: (conversationId, callback) => {\r\n        const eventSource = new EventSource(`${API_BASE_URL}/debug/events/${conversationId}`);\r\n        \r\n        eventSource.onmessage = (event) => {\r\n            const data = JSON.parse(event.data);\r\n            callback(data);\r\n        };\r\n\r\n        return () => eventSource.close(); // Return cleanup function\r\n    }\r\n}; "],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,MAAM;AAE3B,eAAeC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3C,MAAMC,GAAG,GAAG,GAAGJ,YAAY,GAAGE,QAAQ,EAAE;EACxC,MAAMG,cAAc,GAAG;IACnBC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACd,CAAC;IACDC,WAAW,EAAE,SAAS,CAAE;EAC5B,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;IAAE,GAAGC,cAAc;IAAE,GAAGF;EAAQ,CAAC,CAAC;EAEpE,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;IAAA,IAAAC,UAAA;IACd,IAAIC,SAAS;IACb,IAAI;MACAA,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOC,CAAC,EAAE;MACR,MAAM,IAAIC,KAAK,CAAC,cAAcP,QAAQ,CAACQ,MAAM,EAAE,CAAC;IACpD;IACA,MAAMC,KAAK,GAAG,IAAIF,KAAK,CAAC,EAAAJ,UAAA,GAAAC,SAAS,cAAAD,UAAA,uBAATA,UAAA,CAAWO,OAAO,KAAI,cAAcV,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC9EC,KAAK,CAACD,MAAM,GAAGR,QAAQ,CAACQ,MAAM;IAC9BC,KAAK,CAACE,IAAI,GAAGP,SAAS;IACtB,MAAMK,KAAK;EACf;EAEA,OAAOT,QAAQ,CAACQ,MAAM,KAAK,GAAG,GAAG,IAAI,GAAGR,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC3D;AAEA,OAAO,MAAMO,YAAY,GAAG;EACxB;EACAC,oBAAoB,EAAGC,cAAc,IAAK;IACtC,OAAOrB,OAAO,CAAC,uBAAuBqB,cAAc,EAAE,CAAC;EAC3D,CAAC;EAED;EACAC,yBAAyB,EAAGC,SAAS,IAAK;IACtC,OAAOvB,OAAO,CAAC,kBAAkBuB,SAAS,EAAE,CAAC;EACjD,CAAC;EAED;EACAC,uBAAuB,EAAGH,cAAc,IAAK;IACzC,OAAOrB,OAAO,CAAC,iBAAiBqB,cAAc,EAAE,CAAC;EACrD,CAAC;EAED;EACAI,wBAAwB,EAAGF,SAAS,IAAK;IACrC,OAAOvB,OAAO,CAAC,kBAAkBuB,SAAS,EAAE,CAAC;EACjD,CAAC;EAED;EACAG,sBAAsB,EAAGH,SAAS,IAAK;IACnC,OAAOvB,OAAO,CAAC,qBAAqBuB,SAAS,EAAE,CAAC;EACpD,CAAC;EAED;EACAI,sBAAsB,EAAEA,CAACN,cAAc,EAAEO,QAAQ,KAAK;IAClD,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,GAAG/B,YAAY,iBAAiBsB,cAAc,EAAE,CAAC;IAErFQ,WAAW,CAACE,SAAS,GAAIC,KAAK,IAAK;MAC/B,MAAMd,IAAI,GAAGe,IAAI,CAACC,KAAK,CAACF,KAAK,CAACd,IAAI,CAAC;MACnCU,QAAQ,CAACV,IAAI,CAAC;IAClB,CAAC;IAED,OAAO,MAAMW,WAAW,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;EACtC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}