{"ast":null,"code":"// Authentication service for handling login, logout, and session management\nimport { API_CONFIG, AUTH_CONFIG } from '../config';\n\n/**\r\n * Handles API responses and throws errors for non-OK responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\nconst handleApiResponse = async response => {\n  console.log('API Response Status:', response.status, response.statusText);\n  console.log('Response Headers:', Object.fromEntries(response.headers.entries()));\n\n  // Clone the response so we can try both JSON and text parsing if needed\n  const responseClone = response.clone();\n\n  // Handle non-OK responses\n  if (!response.ok) {\n    // Try to get detailed error from response\n    try {\n      const errorData = await response.json();\n      console.error('Error response data:', errorData);\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\n    } catch (jsonError) {\n      // If response isn't valid JSON, use status text\n      console.error('Error parsing response:', jsonError);\n      try {\n        const errorText = await responseClone.text();\n        console.error('Response text:', errorText);\n        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorText}`);\n      } catch (textError) {\n        // If both JSON and text parsing fail, just use the status\n        throw new Error(`API error: ${response.status} ${response.statusText}`);\n      }\n    }\n  }\n\n  // For successful responses, parse JSON or return empty object\n  try {\n    const data = await response.json();\n    console.log('API Response Data:', data);\n    return data;\n  } catch (error) {\n    // Some successful responses may not have a body (e.g., 204 No Content)\n    console.log('No JSON in successful response');\n    return {};\n  }\n};\n\n/**\r\n * Login with business and user credentials\r\n * @param {string} userId - User ID\r\n * @param {string} businessId - Business ID\r\n * @param {string} businessApiKey - Business API Key\r\n * @returns {Promise<Object>} - Login response data\r\n */\nexport const login = async (userId, businessId, businessApiKey) => {\n  try {\n    // Trim whitespace from all inputs\n    const trimmedUserId = userId.trim();\n    const trimmedBusinessId = businessId.trim();\n    const trimmedBusinessApiKey = businessApiKey.trim();\n    console.log('Login attempt with:', {\n      userId: trimmedUserId,\n      businessId: trimmedBusinessId,\n      businessApiKey: '***'\n    });\n    console.log('Login URL:', `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        userId: trimmedUserId,\n        businessId: trimmedBusinessId,\n        businessApiKey: trimmedBusinessApiKey\n      })\n    });\n    const data = await handleApiResponse(response);\n\n    // Check if the response indicates success\n    if (data.success || data.message === 'Configuration saved successfully') {\n      console.log('Login successful, storing credentials');\n      // Store credentials in localStorage for persistent login\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID, trimmedUserId);\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID, trimmedBusinessId);\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY, trimmedBusinessApiKey);\n\n      // Return a standardized success response\n      return {\n        success: true,\n        message: 'Login successful'\n      };\n    } else {\n      console.error('Login response indicates failure:', data);\n      return {\n        success: false,\n        message: data.error || 'Login failed'\n      };\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    return {\n      success: false,\n      message: error.message || 'Login failed'\n    };\n  }\n};\n\n/**\r\n * Logout and clear stored credentials\r\n */\nexport const logout = () => {\n  // Clear stored credentials\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\n  return {\n    success: true,\n    message: 'Logged out successfully'\n  };\n};\n\n/**\r\n * Check if user is logged in\r\n * @returns {boolean} - True if user is logged in\r\n */\nexport const isLoggedIn = () => {\n  const userId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\n  const businessId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\n  return !!(userId && businessId && businessApiKey);\n};\n\n/**\r\n * Get stored credentials\r\n * @returns {Object} - Stored credentials\r\n */\nexport const getStoredCredentials = () => {\n  return {\n    userId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID) || '',\n    businessId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID) || '',\n    businessApiKey: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY) || ''\n  };\n};\n\n/**\r\n * Get authentication headers for API requests\r\n * @returns {Object} - Headers object with authentication\r\n */\nexport const getAuthHeaders = () => {\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\n  if (!businessApiKey) {\n    throw new Error('No API key found. Please log in first.');\n  }\n  return {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'businessapikey': businessApiKey\n  };\n};\n\n// Create a named export object\nconst authService = {\n  login,\n  logout,\n  isLoggedIn,\n  getStoredCredentials,\n  getAuthHeaders\n};\nexport default authService;","map":{"version":3,"names":["API_CONFIG","AUTH_CONFIG","handleApiResponse","response","console","log","status","statusText","Object","fromEntries","headers","entries","responseClone","clone","ok","errorData","json","error","Error","message","jsonError","errorText","text","textError","data","login","userId","businessId","businessApiKey","trimmedUserId","trim","trimmedBusinessId","trimmedBusinessApiKey","BASE_URL","ENDPOINTS","LOGIN","fetch","method","credentials","body","JSON","stringify","success","localStorage","setItem","STORAGE_KEYS","USER_ID","BUSINESS_ID","BUSINESS_API_KEY","logout","removeItem","isLoggedIn","getItem","getStoredCredentials","getAuthHeaders","authService"],"sources":["C:/icmp_events_api/front-end/src/services/authService.js"],"sourcesContent":["// Authentication service for handling login, logout, and session management\r\nimport { API_CONFIG, AUTH_CONFIG } from '../config';\r\n\r\n/**\r\n * Handles API responses and throws errors for non-OK responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\r\nconst handleApiResponse = async (response) => {\r\n  console.log('API Response Status:', response.status, response.statusText);\r\n  console.log('Response Headers:', Object.fromEntries(response.headers.entries()));\r\n  \r\n  // Clone the response so we can try both JSON and text parsing if needed\r\n  const responseClone = response.clone();\r\n  \r\n  // Handle non-OK responses\r\n  if (!response.ok) {\r\n    // Try to get detailed error from response\r\n    try {\r\n      const errorData = await response.json();\r\n      console.error('Error response data:', errorData);\r\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\r\n    } catch (jsonError) {\r\n      // If response isn't valid JSON, use status text\r\n      console.error('Error parsing response:', jsonError);\r\n      try {\r\n        const errorText = await responseClone.text();\r\n        console.error('Response text:', errorText);\r\n        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n      } catch (textError) {\r\n        // If both JSON and text parsing fail, just use the status\r\n        throw new Error(`API error: ${response.status} ${response.statusText}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // For successful responses, parse JSON or return empty object\r\n  try {\r\n    const data = await response.json();\r\n    console.log('API Response Data:', data);\r\n    return data;\r\n  } catch (error) {\r\n    // Some successful responses may not have a body (e.g., 204 No Content)\r\n    console.log('No JSON in successful response');\r\n    return {};\r\n  }\r\n};\r\n\r\n/**\r\n * Login with business and user credentials\r\n * @param {string} userId - User ID\r\n * @param {string} businessId - Business ID\r\n * @param {string} businessApiKey - Business API Key\r\n * @returns {Promise<Object>} - Login response data\r\n */\r\nexport const login = async (userId, businessId, businessApiKey) => {\r\n  try {\r\n    // Trim whitespace from all inputs\r\n    const trimmedUserId = userId.trim();\r\n    const trimmedBusinessId = businessId.trim();\r\n    const trimmedBusinessApiKey = businessApiKey.trim();\r\n    \r\n    console.log('Login attempt with:', { \r\n      userId: trimmedUserId, \r\n      businessId: trimmedBusinessId, \r\n      businessApiKey: '***' \r\n    });\r\n    console.log('Login URL:', `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`);\r\n    \r\n    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({\r\n        userId: trimmedUserId,\r\n        businessId: trimmedBusinessId,\r\n        businessApiKey: trimmedBusinessApiKey\r\n      })\r\n    });\r\n\r\n    const data = await handleApiResponse(response);\r\n    \r\n    // Check if the response indicates success\r\n    if (data.success || data.message === 'Configuration saved successfully') {\r\n      console.log('Login successful, storing credentials');\r\n      // Store credentials in localStorage for persistent login\r\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID, trimmedUserId);\r\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID, trimmedBusinessId);\r\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY, trimmedBusinessApiKey);\r\n      \r\n      // Return a standardized success response\r\n      return { success: true, message: 'Login successful' };\r\n    } else {\r\n      console.error('Login response indicates failure:', data);\r\n      return { success: false, message: data.error || 'Login failed' };\r\n    }\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return { success: false, message: error.message || 'Login failed' };\r\n  }\r\n};\r\n\r\n/**\r\n * Logout and clear stored credentials\r\n */\r\nexport const logout = () => {\r\n  // Clear stored credentials\r\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\r\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\r\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\r\n  \r\n  return { success: true, message: 'Logged out successfully' };\r\n};\r\n\r\n/**\r\n * Check if user is logged in\r\n * @returns {boolean} - True if user is logged in\r\n */\r\nexport const isLoggedIn = () => {\r\n  const userId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\r\n  const businessId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\r\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\r\n  \r\n  return !!(userId && businessId && businessApiKey);\r\n};\r\n\r\n/**\r\n * Get stored credentials\r\n * @returns {Object} - Stored credentials\r\n */\r\nexport const getStoredCredentials = () => {\r\n  return {\r\n    userId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID) || '',\r\n    businessId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID) || '',\r\n    businessApiKey: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY) || ''\r\n  };\r\n};\r\n\r\n/**\r\n * Get authentication headers for API requests\r\n * @returns {Object} - Headers object with authentication\r\n */\r\nexport const getAuthHeaders = () => {\r\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\r\n  \r\n  if (!businessApiKey) {\r\n    throw new Error('No API key found. Please log in first.');\r\n  }\r\n  \r\n  return {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'businessapikey': businessApiKey\r\n  };\r\n};\r\n\r\n// Create a named export object\r\nconst authService = {\r\n  login,\r\n  logout,\r\n  isLoggedIn,\r\n  getStoredCredentials,\r\n  getAuthHeaders\r\n};\r\n\r\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}