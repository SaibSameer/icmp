{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from '@mui/material/core';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { Box } from '@mui/material';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TemplateManagement() {\n  _s();\n  const [templateName, setTemplateName] = useState('');\n  const [templateText, setTemplateText] = useState('');\n  const [templateOutput, setTemplateOutput] = useState('');\n  const handleCreateTemplate = () => {\n    // Create template logic here (replace with your actual logic)\n    setTemplateOutput(`Template Created (Dummy):\\nName: ${templateName}\\nText: ${templateText}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Template Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          '& > :not(style)': {\n            m: 1,\n            width: '25ch'\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Template Name\",\n          variant: \"outlined\",\n          value: templateName,\n          onChange: e => setTemplateName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n          minRows: 3,\n          placeholder: \"Template Text\",\n          style: {\n            width: 200,\n            margin: 8,\n            padding: 8\n          },\n          value: templateText,\n          onChange: e => setTemplateText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleCreateTemplate,\n          children: \"Create Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: templateOutput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(TemplateManagement, \"ghVHQPmc0Rcv6a1GsJCy4tFGoFY=\");\n_c = TemplateManagement;\nexport default TemplateManagement;\nvar _c;\n$RefreshReg$(_c, \"TemplateManagement\");","map":{"version":3,"names":["React","useState","TextField","Button","Typography","Card","CardContent","Box","TextareaAutosize","jsxDEV","_jsxDEV","TemplateManagement","_s","templateName","setTemplateName","templateText","setTemplateText","templateOutput","setTemplateOutput","handleCreateTemplate","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","sx","m","width","label","value","onChange","e","target","minRows","placeholder","style","margin","padding","onClick","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateManagement.js"],"sourcesContent":["import React, { useState } from '@mui/material/core';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { Box } from '@mui/material';\r\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\r\n\r\nfunction TemplateManagement() {\r\n    const [templateName, setTemplateName] = useState('');\r\n    const [templateText, setTemplateText] = useState('');\r\n    const [templateOutput, setTemplateOutput] = useState('');\r\n\r\n    const handleCreateTemplate = () => {\r\n        // Create template logic here (replace with your actual logic)\r\n        setTemplateOutput(`Template Created (Dummy):\\nName: ${templateName}\\nText: ${templateText}`);\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>Template Management</Typography>\r\n                <Box sx={{ '& > :not(style)': { m: 1, width: '25ch' } }}>\r\n                    <TextField label=\"Template Name\" variant=\"outlined\" value={templateName} onChange={(e) => setTemplateName(e.target.value)} />\r\n                    <TextareaAutosize\r\n                        minRows={3}\r\n                        placeholder=\"Template Text\"\r\n                        style={{ width: 200, margin: 8, padding: 8 }}\r\n                        value={templateText}\r\n                        onChange={(e) => setTemplateText(e.target.value)}\r\n                    />\r\n                    <Button variant=\"contained\" onClick={handleCreateTemplate}>Create Template</Button>\r\n                    <Typography variant=\"body1\">{templateOutput}</Typography>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default TemplateManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}