{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Typography, MenuItem, Select } from '@mui/material';\nimport { createTemplateApi, fetchTemplatesApi } from '../services/testService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateManagement = ({\n  businessId,\n  businessApiKey,\n  handleSnackbarOpen\n}) => {\n  _s();\n  const [templateName, setTemplateName] = useState('');\n  const [templateText, setTemplateText] = useState('');\n  const [templatesOutput, setTemplatesOutput] = useState('');\n  const handleCreateTemplate = async () => {\n    if (!templateName || !templateText) {\n      handleSnackbarOpen(\"Please fill in all template fields.\", \"warning\");\n      return;\n    }\n    try {\n      const templateData = {\n        template_name: templateName,\n        template_text: templateText\n      };\n      const response = await createTemplateApi(businessId, templateData, businessApiKey);\n      setTemplatesOutput(JSON.stringify(response, null, 2));\n      handleSnackbarOpen(\"Template created!\", \"success\");\n    } catch (error) {\n      setTemplatesOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  const fetchTemplates = async () => {\n    try {\n      const response = await fetchTemplatesApi(businessId);\n      setTemplatesOutput(JSON.stringify(response, null, 2));\n      handleSnackbarOpen(\"Templates fetched!\", \"success\");\n    } catch (error) {\n      setTemplatesOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Template Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Template Name\",\n      variant: \"outlined\",\n      value: templateName,\n      onChange: e => setTemplateName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Template Text\",\n      variant: \"outlined\",\n      value: templateText,\n      onChange: e => setTemplateText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleCreateTemplate,\n      children: \"Create Template\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: fetchTemplates,\n      children: \"Fetch Templates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: templatesOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateManagement, \"CMfA1VWIjgChrhfNKUF0WxKcbXI=\");\n_c = TemplateManagement;\nexport default TemplateManagement;\nvar _c;\n$RefreshReg$(_c, \"TemplateManagement\");","map":{"version":3,"names":["React","useState","TextField","Button","Typography","MenuItem","Select","createTemplateApi","fetchTemplatesApi","jsxDEV","_jsxDEV","TemplateManagement","businessId","businessApiKey","handleSnackbarOpen","_s","templateName","setTemplateName","templateText","setTemplateText","templatesOutput","setTemplatesOutput","handleCreateTemplate","templateData","template_name","template_text","response","JSON","stringify","error","message","fetchTemplates","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","label","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateManagement.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Button, Typography, MenuItem, Select } from '@mui/material';\r\nimport { createTemplateApi, fetchTemplatesApi } from '../services/testService';\r\n\r\nconst TemplateManagement = ({ businessId, businessApiKey, handleSnackbarOpen }) => {\r\n  const [templateName, setTemplateName] = useState('');\r\n  const [templateText, setTemplateText] = useState('');\r\n  const [templatesOutput, setTemplatesOutput] = useState('');\r\n\r\n  const handleCreateTemplate = async () => {\r\n    if (!templateName || !templateText) {\r\n      handleSnackbarOpen(\"Please fill in all template fields.\", \"warning\");\r\n      return;\r\n    }\r\n    try {\r\n      const templateData = { template_name: templateName, template_text: templateText };\r\n      const response = await createTemplateApi(businessId, templateData, businessApiKey);\r\n      setTemplatesOutput(JSON.stringify(response, null, 2));\r\n      handleSnackbarOpen(\"Template created!\", \"success\");\r\n    } catch (error) {\r\n      setTemplatesOutput(`Error: ${error.message}`);\r\n      handleSnackbarOpen(error.message, \"error\");\r\n    }\r\n  };\r\n\r\n  const fetchTemplates = async () => {\r\n    try {\r\n      const response = await fetchTemplatesApi(businessId);\r\n      setTemplatesOutput(JSON.stringify(response, null, 2));\r\n      handleSnackbarOpen(\"Templates fetched!\", \"success\");\r\n    } catch (error) {\r\n      setTemplatesOutput(`Error: ${error.message}`);\r\n      handleSnackbarOpen(error.message, \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h6\">Template Management</Typography>\r\n      <TextField\r\n        label=\"Template Name\"\r\n        variant=\"outlined\"\r\n        value={templateName}\r\n        onChange={(e) => setTemplateName(e.target.value)}\r\n      />\r\n      <TextField\r\n        label=\"Template Text\"\r\n        variant=\"outlined\"\r\n        value={templateText}\r\n        onChange={(e) => setTemplateText(e.target.value)}\r\n      />\r\n      <Button variant=\"contained\" onClick={handleCreateTemplate}>\r\n        Create Template\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={fetchTemplates}>\r\n        Fetch Templates\r\n      </Button>\r\n      <pre>{templatesOutput}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}