{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Box, Paper, Typography, TextField, Button, Tabs, Tab, Grid, Alert, Snackbar, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, CircularProgress, Divider, Chip } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// TabPanel component for the tabs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `tabpanel-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      padding: '20px 0'\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nconst StageEditor = () => {\n  _s();\n  const {\n    stageId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Get businessId and agentId from location state or URL query parameters\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Location state values as fallback\n  const {\n    businessId: locationBusinessId,\n    agentId: locationAgentId,\n    isNewStage\n  } = location.state || {};\n\n  // Use query parameters first, fall back to location state\n  const businessId = queryBusinessId || locationBusinessId;\n  const agentId = queryAgentId || locationAgentId;\n  const [stage, setStage] = useState(null);\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [tabValue, setTabValue] = useState(0);\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n\n  // Fetch stage data when the component mounts\n  useEffect(() => {\n    if (stageId && stageId !== 'new') {\n      fetchStage(stageId);\n    } else if (isNewStage) {\n      // For new stage, set up defaults but don't fetch\n      setStage({\n        stage_name: '',\n        stage_description: '',\n        business_id: businessId,\n        agent_id: agentId,\n        stage_selection_template_id: null,\n        data_extraction_template_id: null,\n        response_generation_template_id: null,\n        stage_config: {\n          order: 0\n        }\n      });\n    }\n\n    // Always fetch available templates\n    fetchAllTemplates();\n  }, [stageId, businessId, agentId, isNewStage]);\n\n  // Fetch specific stage data\n  const fetchStage = async id => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/stages/${id}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch stage');\n      const data = await response.json();\n      setStage(data);\n      setStageName(data.stage_name || '');\n      setStageDescription(data.stage_description || '');\n\n      // For each template ID in the stage, fetch the template content\n      if (data.stage_selection_template_id) {\n        fetchTemplate(data.stage_selection_template_id, 'stage_selection');\n      }\n      if (data.data_extraction_template_id) {\n        fetchTemplate(data.data_extraction_template_id, 'data_extraction');\n      }\n      if (data.response_generation_template_id) {\n        fetchTemplate(data.response_generation_template_id, 'response_generation');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all available templates on component mount\n  const fetchAllTemplates = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch all templates\n      const response = await fetch('/templates', {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch templates');\n      const data = await response.json();\n\n      // Organize templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: [],\n        default_stage_selection: [],\n        default_data_extraction: [],\n        default_response_generation: []\n      };\n      data.forEach(template => {\n        if (templatesByType[template.template_type]) {\n          templatesByType[template.template_type].push(template);\n        }\n      });\n      setAvailableTemplates(templatesByType);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch templates');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchTemplate = useCallback(async (templateId, type) => {\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\n      const data = await response.json();\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: data.template_id,\n          text: data.template_text,\n          type: data.template_type\n        }\n      }));\n\n      // Extract variables from template\n      setVariables(prev => ({\n        ...prev,\n        [type]: extractVariables(data.template_text)\n      }));\n    } catch (err) {\n      setError(err.message);\n    }\n  }, []);\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Fetch the selected template\n    await fetchTemplate(templateId, type);\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text,\n        type: type // Keep the original type, not the default type\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template for ${type}`);\n  };\n  const handlePreview = async type => {\n    try {\n      // Get the current template text for preview\n      const templateText = templates[type].text;\n      if (!templateText.trim()) {\n        setError('Template is empty. Nothing to preview.');\n        return;\n      }\n\n      // Prepare the preview request\n      const previewRequest = {\n        templates: {\n          [type]: templateText\n        },\n        context: {\n          conversation_history: [\"User: Hello, I need help.\", \"AI: How can I assist you today?\"],\n          message: \"I want to book a flight\",\n          stage_list: [\"Greeting\", \"Flight Booking\", \"Confirmation\"],\n          extracted_data: {\n            intent: \"flight_booking\"\n          }\n        }\n      };\n      const response = await fetch('/templates/preview', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(previewRequest)\n      });\n      if (!response.ok) throw new Error('Failed to generate preview');\n      const data = await response.json();\n      setPreviewData({\n        type,\n        result: data[type] || data.result || \"Preview not available\"\n      });\n\n      // Show success message with preview data\n      setSuccess(`Preview generated for ${type}`);\n      return data;\n    } catch (err) {\n      setError(err.message);\n      return null;\n    }\n  };\n  const handleSave = async () => {\n    if (!stage) return;\n    try {\n      // Validate stage name\n      if (!stageName.trim()) {\n        setError('Stage name is required');\n        return;\n      }\n\n      // Prepare updated stage data\n      const updatedStage = {\n        ...stage,\n        stage_name: stageName,\n        stage_description: stageDescription,\n        business_id: businessId || stage.business_id,\n        agent_id: agentId || stage.agent_id,\n        stage_selection_template_id: templates.stage_selection.id || null,\n        data_extraction_template_id: templates.data_extraction.id || null,\n        response_generation_template_id: templates.response_generation.id || null\n      };\n      let response;\n      let method;\n      let url;\n\n      // Determine if this is a create or update operation\n      if (stageId === 'new' || isNewStage) {\n        method = 'POST';\n        url = '/stages';\n      } else {\n        method = 'PUT';\n        url = `/stages/${stageId}`;\n      }\n      console.log('Saving stage with data:', updatedStage);\n\n      // Call the API\n      response = await fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(updatedStage)\n      });\n      if (!response.ok) throw new Error(stageId === 'new' ? 'Failed to create stage' : 'Failed to update stage');\n      setSuccess(stageId === 'new' ? 'Stage created successfully' : 'Stage updated successfully');\n\n      // Navigate back to stage manager after a short delay\n      setTimeout(() => {\n        let backUrl;\n        if (businessId && agentId) {\n          backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n        } else if (businessId) {\n          backUrl = `/stage-management/business_id=${businessId}`;\n        } else {\n          backUrl = '/stage-management';\n        }\n        navigate(backUrl);\n      }, 1500);\n    } catch (err) {\n      setError(err.message || 'Failed to save stage');\n    }\n  };\n  const handleCancel = () => {\n    // Navigate back to stage manager\n    let backUrl;\n    if (businessId && agentId) {\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n    } else if (businessId) {\n      backUrl = `/stage-management/business_id=${businessId}`;\n    } else {\n      backUrl = '/stage-management';\n    }\n    navigate(backUrl);\n  };\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setError(''),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setSuccess(''),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Stage Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: stageName,\n              onChange: e => setStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value),\n              multiline: true,\n              rows: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          my: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tabValue,\n          onChange: handleTabChange,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Stage Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Data Extraction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Response Generation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 0,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"stage-selection-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"stage-selection-template-label\",\n                value: templates.stage_selection.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('stage_selection', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 514,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 513,\n                  columnNumber: 21\n                }, this), availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('stage_selection'),\n                disabled: availableTemplates.default_stage_selection.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('stage_selection'),\n                disabled: !templates.stage_selection.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 543,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'stage_selection' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.stage_selection.text || '',\n              onChange: e => handleTemplateChange('stage_selection', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 17\n            }, this), variables.stage_selection.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.stage_selection.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 1,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"data-extraction-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 584,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"data-extraction-template-label\",\n                value: templates.data_extraction.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('data_extraction', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 592,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 21\n                }, this), availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('data_extraction'),\n                disabled: availableTemplates.default_data_extraction.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('data_extraction'),\n                disabled: !templates.data_extraction.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 621,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 620,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'data_extraction' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.data_extraction.text || '',\n              onChange: e => handleTemplateChange('data_extraction', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 17\n            }, this), variables.data_extraction.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.data_extraction.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"response-generation-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"response-generation-template-label\",\n                value: templates.response_generation.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('response_generation', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 670,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 669,\n                  columnNumber: 21\n                }, this), availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 673,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 663,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 683,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('response_generation'),\n                disabled: availableTemplates.default_response_generation.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 681,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('response_generation'),\n                disabled: !templates.response_generation.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 699,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 698,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'response_generation' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.response_generation.text || '',\n              onChange: e => handleTemplateChange('response_generation', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 17\n            }, this), variables.response_generation.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.response_generation.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 728,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3,\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 26\n          }, this),\n          onClick: handleSave,\n          disabled: isLoading,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 28\n          }, this) : stageId === 'new' ? 'Create Stage' : 'Save Stage'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n};\n_s(StageEditor, \"huEsV6AaZaBUEwGq7g2W6J1F8wA=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c2 = StageEditor;\nexport default StageEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"StageEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Box","Paper","Typography","TextField","Button","Tabs","Tab","Grid","Alert","Snackbar","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","CircularProgress","Divider","Chip","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","ArrowBackIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","TabPanel","props","children","value","index","other","role","hidden","id","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","StageEditor","_s","stageId","navigate","location","queryParams","URLSearchParams","search","queryBusinessId","get","queryAgentId","businessId","locationBusinessId","agentId","locationAgentId","isNewStage","state","stage","setStage","stageName","setStageName","stageDescription","setStageDescription","tabValue","setTabValue","templates","setTemplates","stage_selection","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","isLoading","setIsLoading","previewData","setPreviewData","fetchStage","stage_name","stage_description","business_id","agent_id","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","stage_config","order","fetchAllTemplates","response","fetch","credentials","ok","Error","data","json","fetchTemplate","err","message","templatesByType","forEach","template","template_type","push","templateId","prev","template_id","template_text","extractVariables","matches","match","map","slice","handleTemplateChange","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","handlePreview","templateText","trim","previewRequest","context","conversation_history","stage_list","extracted_data","intent","method","headers","body","JSON","stringify","result","handleSave","updatedStage","url","console","log","setTimeout","backUrl","handleCancel","handleTabChange","event","newValue","sx","p","mb","display","alignItems","onClick","mr","variant","severity","onClose","justifyContent","gutterBottom","container","spacing","item","xs","fullWidth","label","onChange","e","target","required","multiline","rows","my","labelId","template_name","gap","startIcon","disabled","title","whiteSpace","placeholder","mt","flexWrap","variable","size","_c2","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Divider,\r\n  Chip\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// TabPanel component for the tabs\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n      style={{ padding: '20px 0' }}\r\n    >\r\n      {value === index && (\r\n        <Box>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StageEditor = () => {\r\n  const { stageId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Get businessId and agentId from location state or URL query parameters\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  const queryAgentId = queryParams.get('agent_id');\r\n  \r\n  // Location state values as fallback\r\n  const { businessId: locationBusinessId, agentId: locationAgentId, isNewStage } = location.state || {};\r\n  \r\n  // Use query parameters first, fall back to location state\r\n  const businessId = queryBusinessId || locationBusinessId;\r\n  const agentId = queryAgentId || locationAgentId;\r\n  \r\n  const [stage, setStage] = useState(null);\r\n  const [stageName, setStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  \r\n  // Fetch stage data when the component mounts\r\n  useEffect(() => {\r\n    if (stageId && stageId !== 'new') {\r\n      fetchStage(stageId);\r\n    } else if (isNewStage) {\r\n      // For new stage, set up defaults but don't fetch\r\n      setStage({\r\n        stage_name: '',\r\n        stage_description: '',\r\n        business_id: businessId,\r\n        agent_id: agentId,\r\n        stage_selection_template_id: null,\r\n        data_extraction_template_id: null,\r\n        response_generation_template_id: null,\r\n        stage_config: { order: 0 }\r\n      });\r\n    }\r\n    \r\n    // Always fetch available templates\r\n    fetchAllTemplates();\r\n  }, [stageId, businessId, agentId, isNewStage]);\r\n\r\n  // Fetch specific stage data\r\n  const fetchStage = async (id) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`/stages/${id}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch stage');\r\n      \r\n      const data = await response.json();\r\n      setStage(data);\r\n      setStageName(data.stage_name || '');\r\n      setStageDescription(data.stage_description || '');\r\n      \r\n      // For each template ID in the stage, fetch the template content\r\n      if (data.stage_selection_template_id) {\r\n        fetchTemplate(data.stage_selection_template_id, 'stage_selection');\r\n      }\r\n      if (data.data_extraction_template_id) {\r\n        fetchTemplate(data.data_extraction_template_id, 'data_extraction');\r\n      }\r\n      if (data.response_generation_template_id) {\r\n        fetchTemplate(data.response_generation_template_id, 'response_generation');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch all available templates on component mount\r\n  const fetchAllTemplates = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch all templates\r\n      const response = await fetch('/templates', {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch templates');\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Organize templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: [],\r\n        default_stage_selection: [],\r\n        default_data_extraction: [],\r\n        default_response_generation: []\r\n      };\r\n      \r\n      data.forEach(template => {\r\n        if (templatesByType[template.template_type]) {\r\n          templatesByType[template.template_type].push(template);\r\n        }\r\n      });\r\n      \r\n      setAvailableTemplates(templatesByType);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch templates');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = useCallback(async (templateId, type) => {\r\n    try {\r\n      const response = await fetch(`/templates/${templateId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\r\n      \r\n      const data = await response.json();\r\n      \r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: {\r\n          id: data.template_id,\r\n          text: data.template_text,\r\n          type: data.template_type\r\n        }\r\n      }));\r\n      \r\n      // Extract variables from template\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: extractVariables(data.template_text)\r\n      }));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Fetch the selected template\r\n    await fetchTemplate(templateId, type);\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text,\r\n        type: type // Keep the original type, not the default type\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template for ${type}`);\r\n  };\r\n\r\n  const handlePreview = async (type) => {\r\n    try {\r\n      // Get the current template text for preview\r\n      const templateText = templates[type].text;\r\n      \r\n      if (!templateText.trim()) {\r\n        setError('Template is empty. Nothing to preview.');\r\n        return;\r\n      }\r\n      \r\n      // Prepare the preview request\r\n      const previewRequest = {\r\n        templates: {\r\n          [type]: templateText\r\n        },\r\n        context: {\r\n          conversation_history: [\"User: Hello, I need help.\", \"AI: How can I assist you today?\"],\r\n          message: \"I want to book a flight\",\r\n          stage_list: [\"Greeting\", \"Flight Booking\", \"Confirmation\"],\r\n          extracted_data: { intent: \"flight_booking\" }\r\n        }\r\n      };\r\n      \r\n      const response = await fetch('/templates/preview', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(previewRequest),\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to generate preview');\r\n      \r\n      const data = await response.json();\r\n      setPreviewData({\r\n        type,\r\n        result: data[type] || data.result || \"Preview not available\"\r\n      });\r\n      \r\n      // Show success message with preview data\r\n      setSuccess(`Preview generated for ${type}`);\r\n      \r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!stage) return;\r\n    \r\n    try {\r\n      // Validate stage name\r\n      if (!stageName.trim()) {\r\n        setError('Stage name is required');\r\n        return;\r\n      }\r\n      \r\n      // Prepare updated stage data\r\n      const updatedStage = {\r\n        ...stage,\r\n        stage_name: stageName,\r\n        stage_description: stageDescription,\r\n        business_id: businessId || stage.business_id,\r\n        agent_id: agentId || stage.agent_id,\r\n        stage_selection_template_id: templates.stage_selection.id || null,\r\n        data_extraction_template_id: templates.data_extraction.id || null,\r\n        response_generation_template_id: templates.response_generation.id || null\r\n      };\r\n      \r\n      let response;\r\n      let method;\r\n      let url;\r\n      \r\n      // Determine if this is a create or update operation\r\n      if (stageId === 'new' || isNewStage) {\r\n        method = 'POST';\r\n        url = '/stages';\r\n      } else {\r\n        method = 'PUT';\r\n        url = `/stages/${stageId}`;\r\n      }\r\n      \r\n      console.log('Saving stage with data:', updatedStage);\r\n      \r\n      // Call the API\r\n      response = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(updatedStage),\r\n      });\r\n      \r\n      if (!response.ok) throw new Error(stageId === 'new' ? 'Failed to create stage' : 'Failed to update stage');\r\n      \r\n      setSuccess(stageId === 'new' ? 'Stage created successfully' : 'Stage updated successfully');\r\n      \r\n      // Navigate back to stage manager after a short delay\r\n      setTimeout(() => {\r\n        let backUrl;\r\n        if (businessId && agentId) {\r\n          backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n        } else if (businessId) {\r\n          backUrl = `/stage-management/business_id=${businessId}`;\r\n        } else {\r\n          backUrl = '/stage-management';\r\n        }\r\n        navigate(backUrl);\r\n      }, 1500);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to save stage');\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Navigate back to stage manager\r\n    let backUrl;\r\n    if (businessId && agentId) {\r\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n    } else if (businessId) {\r\n      backUrl = `/stage-management/business_id=${businessId}`;\r\n    } else {\r\n      backUrl = '/stage-management';\r\n    }\r\n    navigate(backUrl);\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3 }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={handleCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {isLoading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {/* Basic stage information */}\r\n          <Box sx={{ mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Stage Information\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Name\"\r\n                  value={stageName}\r\n                  onChange={(e) => setStageName(e.target.value)}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Description\"\r\n                  value={stageDescription}\r\n                  onChange={(e) => setStageDescription(e.target.value)}\r\n                  multiline\r\n                  rows={2}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          \r\n          <Divider sx={{ my: 3 }} />\r\n          \r\n          {/* Template editing section */}\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Templates\r\n            </Typography>\r\n            \r\n            <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n              <Tab label=\"Stage Selection\" />\r\n              <Tab label=\"Data Extraction\" />\r\n              <Tab label=\"Response Generation\" />\r\n            </Tabs>\r\n            \r\n            {/* Stage Selection Template */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"stage-selection-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"stage-selection-template-label\"\r\n                    value={templates.stage_selection.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('stage_selection', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.stage_selection.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('stage_selection')}\r\n                    disabled={availableTemplates.default_stage_selection.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('stage_selection')}\r\n                    disabled={!templates.stage_selection.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'stage_selection' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.stage_selection.text || ''}\r\n                  onChange={(e) => handleTemplateChange('stage_selection', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.stage_selection.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.stage_selection.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Data Extraction Template */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"data-extraction-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"data-extraction-template-label\"\r\n                    value={templates.data_extraction.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('data_extraction', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.data_extraction.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('data_extraction')}\r\n                    disabled={availableTemplates.default_data_extraction.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('data_extraction')}\r\n                    disabled={!templates.data_extraction.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'data_extraction' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.data_extraction.text || ''}\r\n                  onChange={(e) => handleTemplateChange('data_extraction', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.data_extraction.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.data_extraction.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Response Generation Template */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"response-generation-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"response-generation-template-label\"\r\n                    value={templates.response_generation.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('response_generation', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.response_generation.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('response_generation')}\r\n                    disabled={availableTemplates.default_response_generation.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('response_generation')}\r\n                    disabled={!templates.response_generation.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'response_generation' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.response_generation.text || ''}\r\n                  onChange={(e) => handleTemplateChange('response_generation', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.response_generation.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.response_generation.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n          </Box>\r\n          \r\n          {/* Save button */}\r\n          <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleSave}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? <CircularProgress size={24} /> : (stageId === 'new' ? 'Create Stage' : 'Save Stage')}\r\n            </Button>\r\n          </Box>\r\n        </>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StageEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}