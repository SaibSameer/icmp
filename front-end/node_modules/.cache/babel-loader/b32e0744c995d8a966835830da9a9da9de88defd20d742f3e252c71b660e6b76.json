{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Container, Typography, Paper, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, CircularProgress, Grid, Box, IconButton, Divider, Alert, Snackbar, List, ListItem, ListItemText, ListItemSecondaryAction, Tooltip, FormControl, InputLabel, MenuItem, Select, Card, CardContent, FormHelperText, ListSubheader } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport SaveIcon from '@mui/icons-material/Save';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport StarIcon from '@mui/icons-material/Star';\nimport { fetchStages, createStage, updateStage, deleteStage } from '../services/stageService';\nimport { getAuthHeaders } from '../services/authService';\nimport useAgents from '../hooks/useAgents';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StageManager = () => {\n  _s();\n  // Get parameters from URL and location\n  const {\n    businessId: paramBusinessId,\n    agentId: paramAgentId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract query parameters if not using path params\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Use params or query params, then fallback to localStorage\n  const businessId = paramBusinessId || queryBusinessId || localStorage.getItem('businessId');\n  const agentId = paramAgentId || queryAgentId || localStorage.getItem('agentId');\n\n  // States for stages and templates\n  const [stages, setStages] = useState([]);\n  const [selectedStage, setSelectedStage] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [openDialog, setOpenDialog] = useState(false);\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\n  const [stageToDelete, setStageToDelete] = useState(null);\n  const [newStageName, setNewStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [stageType, setStageType] = useState('conversation');\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [selectedTemplates, setSelectedTemplates] = useState({\n    stage_selection: '',\n    data_extraction: '',\n    response_generation: ''\n  });\n  const [defaultTemplates, setDefaultTemplates] = useState({\n    stage_selection: '',\n    data_extraction: '',\n    response_generation: ''\n  });\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  const [agentName, setAgentName] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const {\n    agents,\n    isLoading: agentsLoading,\n    error: agentsError,\n    refreshAgents\n  } = useAgents();\n  const [selectedAgentId, setSelectedAgentId] = useState('');\n\n  // Store current values in localStorage for persistence\n  useEffect(() => {\n    if (businessId) {\n      localStorage.setItem('businessId', businessId);\n    }\n    if (agentId) {\n      localStorage.setItem('agentId', agentId);\n    }\n  }, [businessId, agentId]);\n\n  // Logging for debugging\n  useEffect(() => {\n    console.log(\"StageManager - Current params:\", {\n      paramBusinessId,\n      paramAgentId,\n      queryBusinessId,\n      queryAgentId,\n      resolvedBusinessId: businessId,\n      resolvedAgentId: agentId\n    });\n  }, [paramBusinessId, paramAgentId, queryBusinessId, queryAgentId, businessId, agentId]);\n\n  // Fetch templates for this business\n  const fetchTemplates = async () => {\n    try {\n      const headers = getAuthHeaders();\n\n      // Add business_id to the URL as a query parameter\n      const response = await fetch(`/api/templates/?business_id=${businessId}`, {\n        headers,\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        console.error('Template fetch error:', response.status, response.statusText);\n        throw new Error('Failed to fetch templates');\n      }\n      const templates = await response.json();\n      console.log('Fetched templates:', templates);\n\n      // Initialize template categories\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: []\n      };\n\n      // Process and categorize templates\n      templates.forEach(template => {\n        // Add isDefault flag to identify default templates\n        const normalizedTemplate = {\n          ...template,\n          isDefault: template.template_type.startsWith('default_')\n        };\n\n        // Map template types to categories\n        const typeMapping = {\n          'stage_selection': 'stage_selection',\n          'default_stage_selection': 'stage_selection',\n          'data_extraction': 'data_extraction',\n          'default_data_extraction': 'data_extraction',\n          'response_generation': 'response_generation',\n          'default_response_generation': 'response_generation'\n        };\n        const category = typeMapping[template.template_type];\n        if (category) {\n          templatesByType[category].push(normalizedTemplate);\n        }\n      });\n\n      // Sort templates within each category\n      Object.keys(templatesByType).forEach(category => {\n        templatesByType[category].sort((a, b) => {\n          // Sort by isDefault first (default templates first)\n          if (a.isDefault !== b.isDefault) {\n            return a.isDefault ? -1 : 1;\n          }\n          // Then sort by name\n          return a.template_name.localeCompare(b.template_name);\n        });\n      });\n      setAvailableTemplates(templatesByType);\n\n      // Set default templates if available\n      const defaultTemplates = {\n        stage_selection: '',\n        data_extraction: '',\n        response_generation: ''\n      };\n\n      // Find default templates in each category\n      Object.keys(templatesByType).forEach(category => {\n        const defaultTemplate = templatesByType[category].find(t => t.isDefault);\n        if (defaultTemplate) {\n          defaultTemplates[category] = defaultTemplate.template_id;\n        }\n      });\n      setDefaultTemplates(defaultTemplates);\n\n      // If we're opening the dialog, pre-select default templates\n      if (openDialog) {\n        setSelectedTemplates(defaultTemplates);\n      }\n    } catch (error) {\n      console.error('Error fetching templates:', error);\n      setError('Failed to load templates. Please try again.');\n    }\n  };\n\n  // Handle template selection change\n  const handleTemplateChange = (event, templateType) => {\n    const templateId = event.target.value;\n    console.log(`Template changed for ${templateType}: ${templateId}`);\n    setSelectedTemplates(prev => ({\n      ...prev,\n      [templateType]: templateId\n    }));\n  };\n\n  // Fetch stages based on business ID and agent ID\n  const fetchStagesData = useCallback(async () => {\n    if (!businessId) {\n      console.error(\"No business ID available for fetching stages\");\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log(\"Fetching stages for business:\", businessId);\n      const stagesData = await fetchStages(businessId);\n      console.log(\"Fetched stages:\", stagesData);\n      setStages(stagesData);\n    } catch (err) {\n      console.error(\"Error fetching stages:\", err);\n      showSnackbar(err.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [businessId]);\n\n  // Fetch agent details\n  const fetchAgentDetails = useCallback(async () => {\n    if (!businessId || !agentId) {\n      return;\n    }\n    try {\n      const response = await fetch(`/agents/${agentId}?business_id=${businessId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch agent details');\n      }\n      const agentData = await response.json();\n      setAgentName(agentData.agent_name || `Agent ${agentId}`);\n    } catch (err) {\n      console.error(\"Error fetching agent details:\", err);\n      setAgentName(`Agent ${agentId}`); // Fallback\n    }\n  }, [businessId, agentId]);\n\n  // Initial data fetch\n  useEffect(() => {\n    if (businessId) {\n      const loadData = async () => {\n        setIsLoading(true);\n        setError('');\n        try {\n          // Load templates first\n          await fetchTemplates();\n          // Then load stages\n          await fetchStagesData();\n\n          // Set the selected agent ID if it exists in the stage data\n          if (selectedStage && selectedStage.agent_id) {\n            setSelectedAgentId(selectedStage.agent_id);\n          } else {\n            setSelectedAgentId('');\n          }\n        } catch (err) {\n          console.error(\"Error in initial data load:\", err);\n          showSnackbar(\"Failed to load initial data: \" + err.message, 'error');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      loadData();\n    }\n  }, [businessId]);\n\n  // Update useEffect to fetch agent details\n  useEffect(() => {\n    if (agentId) {\n      fetchAgentDetails();\n    }\n  }, [agentId, fetchAgentDetails]);\n\n  // Helper function for showing snackbar messages\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar({\n      ...snackbar,\n      open: false\n    });\n  };\n  const handleNavigateToHome = () => {\n    navigate('/business');\n  };\n  const handleOpenNewStageDialog = () => {\n    setNewStageName('');\n    setStageDescription('');\n    setStageType('conversation');\n\n    // Set default templates if available\n    setSelectedTemplates(defaultTemplates);\n    setSelectedAgentId(agentId || ''); // Set the selected agent ID to the current agent ID\n    setOpenDialog(true);\n  };\n  const handleCreateStage = async () => {\n    if (!newStageName.trim()) {\n      setError('Stage name is required');\n      return;\n    }\n    setIsSubmitting(true);\n    setError('');\n    try {\n      const stageData = {\n        business_id: businessId,\n        agent_id: selectedAgentId,\n        // Include the selected agent ID\n        stage_name: newStageName.trim(),\n        stage_description: stageDescription.trim(),\n        stage_type: stageType,\n        stage_selection_template_id: selectedTemplates.stage_selection || null,\n        data_extraction_template_id: selectedTemplates.data_extraction || null,\n        response_generation_template_id: selectedTemplates.response_generation || null\n      };\n      console.log('Creating stage with data:', stageData);\n\n      // Create the stage\n      const response = await fetch('/stages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('businessApiKey')}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(stageData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create stage');\n      }\n      const result = await response.json();\n      console.log('Stage created successfully:', result);\n      showSnackbar('Stage created successfully', 'success');\n\n      // Reset form\n      setNewStageName('');\n\n      // Refresh stages\n      fetchStagesData();\n\n      // Close dialog\n      setOpenDialog(false);\n    } catch (error) {\n      console.error('Error creating stage:', error);\n      showSnackbar(error.message, 'error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const navigateToStageView = stageId => {\n    // Construct the URL with query parameters\n    let url = `/stages/${stageId}?business_id=${businessId}`;\n    if (agentId) {\n      url += `&agent_id=${agentId}`;\n    }\n    navigate(url);\n  };\n  const handleDeleteStage = async () => {\n    if (!stageToDelete || !businessId) return;\n    try {\n      await deleteStage(stageToDelete.stage_id, businessId);\n      await fetchStagesData();\n      setOpenDeleteDialog(false);\n      showSnackbar('Stage deleted successfully', 'success');\n    } catch (err) {\n      console.error(\"Error deleting stage:\", err);\n      showSnackbar(err.message, 'error');\n    }\n  };\n  const handleMoveStage = async (stageId, direction) => {\n    try {\n      const currentIndex = stages.findIndex(s => s.stage_id === stageId);\n      if (currentIndex === -1) return;\n\n      // If trying to move first item up or last item down, do nothing\n      if (currentIndex === 0 && direction === 'up' || currentIndex === stages.length - 1 && direction === 'down') {\n        return;\n      }\n      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\n\n      // Swap the order values in the stage_config\n      const updatedStages = [...stages];\n      const currentStage = {\n        ...updatedStages[currentIndex]\n      };\n      const targetStage = {\n        ...updatedStages[targetIndex]\n      };\n\n      // Update stage_config.order values\n      currentStage.stage_config = {\n        ...currentStage.stage_config,\n        order: targetIndex + 1\n      };\n      targetStage.stage_config = {\n        ...targetStage.stage_config,\n        order: currentIndex + 1\n      };\n\n      // Update both stages in the database\n      const currentUpdate = fetch(`/stages/${currentStage.stage_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(currentStage)\n      });\n      const targetUpdate = fetch(`/stages/${targetStage.stage_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(targetStage)\n      });\n      await Promise.all([currentUpdate, targetUpdate]);\n\n      // Refresh stages\n      await fetchStagesData();\n      showSnackbar('Stage order updated', 'success');\n    } catch (err) {\n      showSnackbar(err.message, 'error');\n    }\n  };\n\n  // Add a handler for agent selection\n  const handleAgentChange = event => {\n    setSelectedAgentId(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleNavigateToHome,\n          sx: {\n            mr: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h1\",\n          gutterBottom: true,\n          sx: {\n            flexGrow: 1\n          },\n          children: [\"Stage Manager\", businessId && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            component: \"span\",\n            color: \"text.secondary\",\n            children: [` - Business ID: ${businessId}`, agentId && ` - Agent: ${agentName || agentId}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 24\n          }, this),\n          onClick: handleOpenNewStageDialog,\n          sx: {\n            mr: 1\n          },\n          children: \"Create Stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 24\n          }, this),\n          onClick: () => navigate('/templates'),\n          children: \"Manage Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        onClose: () => setError(''),\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mb: 2\n        },\n        onClose: () => setSuccess(''),\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 11\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          p: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: stages.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"No stages found. Create your first stage to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(List, {\n          sx: {\n            bgcolor: 'background.paper'\n          },\n          children: [...stages].sort((a, b) => {\n            var _a$stage_config, _b$stage_config;\n            return (((_a$stage_config = a.stage_config) === null || _a$stage_config === void 0 ? void 0 : _a$stage_config.order) || Infinity) - (((_b$stage_config = b.stage_config) === null || _b$stage_config === void 0 ? void 0 : _b$stage_config.order) || Infinity);\n          }).map(stage => /*#__PURE__*/_jsxDEV(ListItem, {\n            sx: {\n              mb: 1,\n              bgcolor: 'background.paper'\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: stage.stage_name,\n              secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"span\",\n                  variant: \"body2\",\n                  color: \"text.primary\",\n                  children: stage.stage_description || 'No description'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 27\n                }, this), stage.stage_config && stage.stage_config.order && ` • Order: ${stage.stage_config.order}`]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Move Up\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"move-up\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleMoveStage(stage.stage_id, 'up');\n                  },\n                  disabled: stages.indexOf(stage) === 0,\n                  children: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 569,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Move Down\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"move-down\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleMoveStage(stage.stage_id, 'down');\n                  },\n                  disabled: stages.indexOf(stage) === stages.length - 1,\n                  children: /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 591,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 581,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"View Stage\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"view\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    navigateToStageView(stage.stage_id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 603,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Delete Stage\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"delete\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    setStageToDelete(stage);\n                    setOpenDeleteDialog(true);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 616,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 21\n            }, this)]\n          }, stage.stage_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: () => !isSubmitting && setOpenDialog(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: selectedStage ? 'Edit Stage' : 'Create New Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [console.log(\"Dialog rendering with state:\", {\n            selectedTemplates,\n            availableTemplates,\n            defaultTemplates,\n            templatesInfo: {\n              stageSelectionCount: availableTemplates.stage_selection.length,\n              dataExtractionCount: availableTemplates.data_extraction.length,\n              responseGenerationCount: availableTemplates.response_generation.length\n            }\n          }), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: newStageName,\n              onChange: e => setNewStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              multiline: true,\n              rows: 2,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Stage Selection Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                fullWidth: true,\n                value: selectedTemplates.stage_selection,\n                onChange: e => handleTemplateChange(e, 'stage_selection'),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 685,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 684,\n                  columnNumber: 19\n                }, this), availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  sx: template.isDefault ? {\n                    backgroundColor: 'rgba(245, 0, 87, 0.04)',\n                    '&:hover': {\n                      backgroundColor: 'rgba(245, 0, 87, 0.08)'\n                    }\n                  } : {},\n                  children: template.isDefault ? /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(StarIcon, {\n                      sx: {\n                        mr: 1,\n                        color: 'secondary.main',\n                        fontSize: '1rem'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 700,\n                      columnNumber: 27\n                    }, this), template.template_name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 699,\n                    columnNumber: 25\n                  }, this) : template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 688,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                children: \"Template for determining if this stage should handle the message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Data Extraction Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                fullWidth: true,\n                value: selectedTemplates.data_extraction,\n                onChange: e => handleTemplateChange(e, 'data_extraction'),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 721,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 19\n                }, this), availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  sx: template.isDefault ? {\n                    backgroundColor: 'rgba(245, 0, 87, 0.04)',\n                    '&:hover': {\n                      backgroundColor: 'rgba(245, 0, 87, 0.08)'\n                    }\n                  } : {},\n                  children: template.isDefault ? /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(StarIcon, {\n                      sx: {\n                        mr: 1,\n                        color: 'secondary.main',\n                        fontSize: '1rem'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 736,\n                      columnNumber: 27\n                    }, this), template.template_name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 735,\n                    columnNumber: 25\n                  }, this) : template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 724,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                children: \"Template for extracting data from the message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Response Generation Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                fullWidth: true,\n                value: selectedTemplates.response_generation,\n                onChange: e => handleTemplateChange(e, 'response_generation'),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 757,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 756,\n                  columnNumber: 19\n                }, this), availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  sx: template.isDefault ? {\n                    backgroundColor: 'rgba(245, 0, 87, 0.04)',\n                    '&:hover': {\n                      backgroundColor: 'rgba(245, 0, 87, 0.08)'\n                    }\n                  } : {},\n                  children: template.isDefault ? /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(StarIcon, {\n                      sx: {\n                        mr: 1,\n                        color: 'secondary.main',\n                        fontSize: '1rem'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 772,\n                      columnNumber: 27\n                    }, this), template.template_name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 771,\n                    columnNumber: 25\n                  }, this) : template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 760,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 751,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                children: \"Template for generating responses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            margin: \"normal\",\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"agent-select-label\",\n              children: \"Agent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 785,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"agent-select-label\",\n              id: \"agent-select\",\n              value: selectedAgentId,\n              label: \"Agent\",\n              onChange: handleAgentChange,\n              disabled: isSubmitting,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 795,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 17\n              }, this), agents.map(agent => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: agent.agent_id,\n                children: agent.agent_name\n              }, agent.agent_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 798,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Select an agent to associate with this stage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => !isSubmitting && setOpenDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCreateStage,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !newStageName.trim(),\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 24\n          }, this),\n          children: \"Create & Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 809,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDeleteDialog,\n      onClose: () => setOpenDeleteDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Confirm Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Are you sure you want to delete the stage \\\"\", stageToDelete === null || stageToDelete === void 0 ? void 0 : stageToDelete.stage_name, \"\\\"? This action cannot be undone.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDeleteDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDeleteStage,\n          variant: \"contained\",\n          color: \"error\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: snackbar.severity,\n        onClose: handleCloseSnackbar,\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 848,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 487,\n    columnNumber: 5\n  }, this);\n};\n_s(StageManager, \"A+ZsUnHxJ0Q8+zv/n5hhyZXSdBc=\", false, function () {\n  return [useParams, useLocation, useNavigate, useAgents];\n});\n_c = StageManager;\nexport default StageManager;\nvar _c;\n$RefreshReg$(_c, \"StageManager\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Container","Typography","Paper","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","CircularProgress","Grid","Box","IconButton","Divider","Alert","Snackbar","List","ListItem","ListItemText","ListItemSecondaryAction","Tooltip","FormControl","InputLabel","MenuItem","Select","Card","CardContent","FormHelperText","ListSubheader","AddIcon","DeleteIcon","ArrowUpwardIcon","ArrowDownwardIcon","ArrowBackIcon","SaveIcon","DescriptionIcon","VisibilityIcon","StarIcon","fetchStages","createStage","updateStage","deleteStage","getAuthHeaders","useAgents","jsxDEV","_jsxDEV","Fragment","_Fragment","StageManager","_s","businessId","paramBusinessId","agentId","paramAgentId","location","navigate","queryParams","URLSearchParams","search","queryBusinessId","get","queryAgentId","localStorage","getItem","stages","setStages","selectedStage","setSelectedStage","isLoading","setIsLoading","error","setError","success","setSuccess","openDialog","setOpenDialog","openDeleteDialog","setOpenDeleteDialog","stageToDelete","setStageToDelete","newStageName","setNewStageName","stageDescription","setStageDescription","stageType","setStageType","availableTemplates","setAvailableTemplates","stage_selection","data_extraction","response_generation","selectedTemplates","setSelectedTemplates","defaultTemplates","setDefaultTemplates","snackbar","setSnackbar","open","message","severity","agentName","setAgentName","isSubmitting","setIsSubmitting","agents","agentsLoading","agentsError","refreshAgents","selectedAgentId","setSelectedAgentId","setItem","console","log","resolvedBusinessId","resolvedAgentId","fetchTemplates","headers","response","fetch","credentials","ok","status","statusText","Error","templates","json","templatesByType","forEach","template","normalizedTemplate","isDefault","template_type","startsWith","typeMapping","category","push","Object","keys","sort","a","b","template_name","localeCompare","defaultTemplate","find","t","template_id","handleTemplateChange","event","templateType","templateId","target","value","prev","fetchStagesData","stagesData","err","showSnackbar","fetchAgentDetails","agentData","agent_name","loadData","agent_id","handleCloseSnackbar","handleNavigateToHome","handleOpenNewStageDialog","handleCreateStage","trim","stageData","business_id","stage_name","stage_description","stage_type","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","method","body","JSON","stringify","errorData","result","navigateToStageView","stageId","url","handleDeleteStage","stage_id","handleMoveStage","direction","currentIndex","findIndex","s","length","targetIndex","updatedStages","currentStage","targetStage","stage_config","order","currentUpdate","targetUpdate","Promise","all","handleAgentChange","maxWidth","sx","mt","mb","children","p","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","gutterBottom","flexGrow","color","startIcon","onClose","justifyContent","bgcolor","_a$stage_config","_b$stage_config","Infinity","map","stage","primary","secondary","title","edge","e","stopPropagation","disabled","indexOf","fullWidth","container","spacing","templatesInfo","stageSelectionCount","dataExtractionCount","responseGenerationCount","item","xs","label","onChange","required","multiline","rows","backgroundColor","fontSize","margin","id","labelId","agent","autoHideDuration","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageManager.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  CircularProgress,\r\n  Grid,\r\n  Box,\r\n  IconButton,\r\n  Divider,\r\n  Alert,\r\n  Snackbar,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n  FormHelperText,\r\n  ListSubheader\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport { fetchStages, createStage, updateStage, deleteStage } from '../services/stageService';\r\nimport { getAuthHeaders } from '../services/authService';\r\nimport useAgents from '../hooks/useAgents';\r\n\r\nconst StageManager = () => {\r\n  // Get parameters from URL and location\r\n  const { businessId: paramBusinessId, agentId: paramAgentId } = useParams();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  \r\n  // Extract query parameters if not using path params\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  const queryAgentId = queryParams.get('agent_id');\r\n  \r\n  // Use params or query params, then fallback to localStorage\r\n  const businessId = paramBusinessId || queryBusinessId || localStorage.getItem('businessId');\r\n  const agentId = paramAgentId || queryAgentId || localStorage.getItem('agentId');\r\n  \r\n  // States for stages and templates\r\n  const [stages, setStages] = useState([]);\r\n  const [selectedStage, setSelectedStage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n  const [stageToDelete, setStageToDelete] = useState(null);\r\n  const [newStageName, setNewStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [stageType, setStageType] = useState('conversation');\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [selectedTemplates, setSelectedTemplates] = useState({\r\n    stage_selection: '',\r\n    data_extraction: '',\r\n    response_generation: ''\r\n  });\r\n  const [defaultTemplates, setDefaultTemplates] = useState({\r\n    stage_selection: '',\r\n    data_extraction: '',\r\n    response_generation: ''\r\n  });\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  const [agentName, setAgentName] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const { agents, isLoading: agentsLoading, error: agentsError, refreshAgents } = useAgents();\r\n  const [selectedAgentId, setSelectedAgentId] = useState('');\r\n\r\n  // Store current values in localStorage for persistence\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      localStorage.setItem('businessId', businessId);\r\n    }\r\n    if (agentId) {\r\n      localStorage.setItem('agentId', agentId);\r\n    }\r\n  }, [businessId, agentId]);\r\n\r\n  // Logging for debugging\r\n  useEffect(() => {\r\n    console.log(\"StageManager - Current params:\", { \r\n      paramBusinessId, \r\n      paramAgentId,\r\n      queryBusinessId,\r\n      queryAgentId,\r\n      resolvedBusinessId: businessId,\r\n      resolvedAgentId: agentId\r\n    });\r\n  }, [\r\n    paramBusinessId, \r\n    paramAgentId, \r\n    queryBusinessId, \r\n    queryAgentId, \r\n    businessId, \r\n    agentId\r\n  ]);\r\n\r\n  // Fetch templates for this business\r\n  const fetchTemplates = async () => {\r\n    try {\r\n      const headers = getAuthHeaders();\r\n      \r\n      // Add business_id to the URL as a query parameter\r\n      const response = await fetch(`/api/templates/?business_id=${businessId}`, { \r\n        headers,\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.error('Template fetch error:', response.status, response.statusText);\r\n        throw new Error('Failed to fetch templates');\r\n      }\r\n      \r\n      const templates = await response.json();\r\n      console.log('Fetched templates:', templates);\r\n      \r\n      // Initialize template categories\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: []\r\n      };\r\n\r\n      // Process and categorize templates\r\n      templates.forEach(template => {\r\n        // Add isDefault flag to identify default templates\r\n        const normalizedTemplate = {\r\n          ...template,\r\n          isDefault: template.template_type.startsWith('default_')\r\n        };\r\n\r\n        // Map template types to categories\r\n        const typeMapping = {\r\n          'stage_selection': 'stage_selection',\r\n          'default_stage_selection': 'stage_selection',\r\n          'data_extraction': 'data_extraction',\r\n          'default_data_extraction': 'data_extraction',\r\n          'response_generation': 'response_generation',\r\n          'default_response_generation': 'response_generation'\r\n        };\r\n\r\n        const category = typeMapping[template.template_type];\r\n        if (category) {\r\n          templatesByType[category].push(normalizedTemplate);\r\n        }\r\n      });\r\n\r\n      // Sort templates within each category\r\n      Object.keys(templatesByType).forEach(category => {\r\n        templatesByType[category].sort((a, b) => {\r\n          // Sort by isDefault first (default templates first)\r\n          if (a.isDefault !== b.isDefault) {\r\n            return a.isDefault ? -1 : 1;\r\n          }\r\n          // Then sort by name\r\n          return a.template_name.localeCompare(b.template_name);\r\n        });\r\n      });\r\n\r\n      setAvailableTemplates(templatesByType);\r\n      \r\n      // Set default templates if available\r\n      const defaultTemplates = {\r\n        stage_selection: '',\r\n        data_extraction: '',\r\n        response_generation: ''\r\n      };\r\n      \r\n      // Find default templates in each category\r\n      Object.keys(templatesByType).forEach(category => {\r\n        const defaultTemplate = templatesByType[category].find(t => t.isDefault);\r\n        if (defaultTemplate) {\r\n          defaultTemplates[category] = defaultTemplate.template_id;\r\n        }\r\n      });\r\n      \r\n      setDefaultTemplates(defaultTemplates);\r\n      \r\n      // If we're opening the dialog, pre-select default templates\r\n      if (openDialog) {\r\n        setSelectedTemplates(defaultTemplates);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching templates:', error);\r\n      setError('Failed to load templates. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Handle template selection change\r\n  const handleTemplateChange = (event, templateType) => {\r\n    const templateId = event.target.value;\r\n    console.log(`Template changed for ${templateType}: ${templateId}`);\r\n    \r\n    setSelectedTemplates(prev => ({\r\n      ...prev,\r\n      [templateType]: templateId\r\n    }));\r\n  };\r\n\r\n  // Fetch stages based on business ID and agent ID\r\n  const fetchStagesData = useCallback(async () => {\r\n    if (!businessId) {\r\n      console.error(\"No business ID available for fetching stages\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      console.log(\"Fetching stages for business:\", businessId);\r\n      const stagesData = await fetchStages(businessId);\r\n      console.log(\"Fetched stages:\", stagesData);\r\n      setStages(stagesData);\r\n    } catch (err) {\r\n      console.error(\"Error fetching stages:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [businessId]);\r\n\r\n  // Fetch agent details\r\n  const fetchAgentDetails = useCallback(async () => {\r\n    if (!businessId || !agentId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/agents/${agentId}?business_id=${businessId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch agent details');\r\n      }\r\n      \r\n      const agentData = await response.json();\r\n      setAgentName(agentData.agent_name || `Agent ${agentId}`);\r\n    } catch (err) {\r\n      console.error(\"Error fetching agent details:\", err);\r\n      setAgentName(`Agent ${agentId}`); // Fallback\r\n    }\r\n  }, [businessId, agentId]);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      const loadData = async () => {\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        try {\r\n          // Load templates first\r\n          await fetchTemplates();\r\n          // Then load stages\r\n          await fetchStagesData();\r\n          \r\n          // Set the selected agent ID if it exists in the stage data\r\n          if (selectedStage && selectedStage.agent_id) {\r\n            setSelectedAgentId(selectedStage.agent_id);\r\n          } else {\r\n            setSelectedAgentId('');\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error in initial data load:\", err);\r\n          showSnackbar(\"Failed to load initial data: \" + err.message, 'error');\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n      \r\n      loadData();\r\n    }\r\n  }, [businessId]);\r\n\r\n  // Update useEffect to fetch agent details\r\n  useEffect(() => {\r\n    if (agentId) {\r\n      fetchAgentDetails();\r\n    }\r\n  }, [agentId, fetchAgentDetails]);\r\n\r\n  // Helper function for showing snackbar messages\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({\r\n      ...snackbar,\r\n      open: false\r\n    });\r\n  };\r\n\r\n  const handleNavigateToHome = () => {\r\n    navigate('/business');\r\n  };\r\n\r\n  const handleOpenNewStageDialog = () => {\r\n    setNewStageName('');\r\n    setStageDescription('');\r\n    setStageType('conversation');\r\n    \r\n    // Set default templates if available\r\n    setSelectedTemplates(defaultTemplates);\r\n    \r\n    setSelectedAgentId(agentId || ''); // Set the selected agent ID to the current agent ID\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCreateStage = async () => {\r\n    if (!newStageName.trim()) {\r\n      setError('Stage name is required');\r\n      return;\r\n    }\r\n    \r\n    setIsSubmitting(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const stageData = {\r\n        business_id: businessId,\r\n        agent_id: selectedAgentId, // Include the selected agent ID\r\n        stage_name: newStageName.trim(),\r\n        stage_description: stageDescription.trim(),\r\n        stage_type: stageType,\r\n        stage_selection_template_id: selectedTemplates.stage_selection || null,\r\n        data_extraction_template_id: selectedTemplates.data_extraction || null,\r\n        response_generation_template_id: selectedTemplates.response_generation || null\r\n      };\r\n      \r\n      console.log('Creating stage with data:', stageData);\r\n\r\n      // Create the stage\r\n      const response = await fetch('/stages', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('businessApiKey')}`\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(stageData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to create stage');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Stage created successfully:', result);\r\n      \r\n      showSnackbar('Stage created successfully', 'success');\r\n      \r\n      // Reset form\r\n      setNewStageName('');\r\n      \r\n      // Refresh stages\r\n      fetchStagesData();\r\n      \r\n      // Close dialog\r\n      setOpenDialog(false);\r\n    } catch (error) {\r\n      console.error('Error creating stage:', error);\r\n      showSnackbar(error.message, 'error');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const navigateToStageView = (stageId) => {\r\n    // Construct the URL with query parameters\r\n    let url = `/stages/${stageId}?business_id=${businessId}`;\r\n    if (agentId) {\r\n      url += `&agent_id=${agentId}`;\r\n    }\r\n    navigate(url);\r\n  };\r\n\r\n  const handleDeleteStage = async () => {\r\n    if (!stageToDelete || !businessId) return;\r\n\r\n    try {\r\n      await deleteStage(stageToDelete.stage_id, businessId);\r\n      await fetchStagesData();\r\n      setOpenDeleteDialog(false);\r\n      showSnackbar('Stage deleted successfully', 'success');\r\n    } catch (err) {\r\n      console.error(\"Error deleting stage:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  const handleMoveStage = async (stageId, direction) => {\r\n    try {\r\n      const currentIndex = stages.findIndex(s => s.stage_id === stageId);\r\n      if (currentIndex === -1) return;\r\n      \r\n      // If trying to move first item up or last item down, do nothing\r\n      if ((currentIndex === 0 && direction === 'up') || \r\n          (currentIndex === stages.length - 1 && direction === 'down')) {\r\n        return;\r\n      }\r\n      \r\n      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\r\n      \r\n      // Swap the order values in the stage_config\r\n      const updatedStages = [...stages];\r\n      const currentStage = { ...updatedStages[currentIndex] };\r\n      const targetStage = { ...updatedStages[targetIndex] };\r\n      \r\n      // Update stage_config.order values\r\n      currentStage.stage_config = { ...currentStage.stage_config, order: targetIndex + 1 };\r\n      targetStage.stage_config = { ...targetStage.stage_config, order: currentIndex + 1 };\r\n      \r\n      // Update both stages in the database\r\n      const currentUpdate = fetch(`/stages/${currentStage.stage_id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(currentStage),\r\n      });\r\n      \r\n      const targetUpdate = fetch(`/stages/${targetStage.stage_id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(targetStage),\r\n      });\r\n      \r\n      await Promise.all([currentUpdate, targetUpdate]);\r\n      \r\n      // Refresh stages\r\n      await fetchStagesData();\r\n      showSnackbar('Stage order updated', 'success');\r\n    } catch (err) {\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  // Add a handler for agent selection\r\n  const handleAgentChange = (event) => {\r\n    setSelectedAgentId(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n          <IconButton onClick={handleNavigateToHome} sx={{ mr: 1 }}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" component=\"h1\" gutterBottom sx={{ flexGrow: 1 }}>\r\n            Stage Manager\r\n            {businessId && <Typography variant=\"subtitle1\" component=\"span\" color=\"text.secondary\">\r\n              {` - Business ID: ${businessId}`}\r\n              {agentId && ` - Agent: ${agentName || agentId}`}\r\n            </Typography>}\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleOpenNewStageDialog}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            Create Stage\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            startIcon={<DescriptionIcon />}\r\n            onClick={() => navigate('/templates')}\r\n          >\r\n            Manage Templates\r\n          </Button>\r\n        </Box>\r\n        \r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n        \r\n        {isLoading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            {stages.length === 0 ? (\r\n              <Alert severity=\"info\">\r\n                No stages found. Create your first stage to get started.\r\n              </Alert>\r\n            ) : (\r\n              <List sx={{ bgcolor: 'background.paper' }}>\r\n                {[...stages].sort((a, b) => \r\n                  (a.stage_config?.order || Infinity) - (b.stage_config?.order || Infinity)\r\n                ).map((stage) => (\r\n                  <ListItem \r\n                    key={stage.stage_id}\r\n                    sx={{ \r\n                      mb: 1,\r\n                      bgcolor: 'background.paper'\r\n                    }}\r\n                  >\r\n                    <ListItemText\r\n                      primary={stage.stage_name}\r\n                      secondary={\r\n                        <>\r\n                          <Typography component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                            {stage.stage_description || 'No description'}\r\n                          </Typography>\r\n                          {stage.stage_config && stage.stage_config.order && \r\n                            ` • Order: ${stage.stage_config.order}`}\r\n                        </>\r\n                      }\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Tooltip title=\"Move Up\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"move-up\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleMoveStage(stage.stage_id, 'up');\r\n                          }}\r\n                          disabled={stages.indexOf(stage) === 0}\r\n                        >\r\n                          <ArrowUpwardIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Move Down\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"move-down\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleMoveStage(stage.stage_id, 'down');\r\n                          }}\r\n                          disabled={stages.indexOf(stage) === stages.length - 1}\r\n                        >\r\n                          <ArrowDownwardIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"View Stage\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"view\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            navigateToStageView(stage.stage_id);\r\n                          }}\r\n                        >\r\n                          <VisibilityIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Delete Stage\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"delete\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            setStageToDelete(stage);\r\n                            setOpenDeleteDialog(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            )}\r\n          </>\r\n        )}\r\n      </Paper>\r\n      \r\n      {/* Create Stage Dialog */}\r\n      <Dialog \r\n        open={openDialog} \r\n        onClose={() => !isSubmitting && setOpenDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {selectedStage ? 'Edit Stage' : 'Create New Stage'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            {/* Add console logs to help debug */}\r\n            {console.log(\"Dialog rendering with state:\", {\r\n              selectedTemplates,\r\n              availableTemplates,\r\n              defaultTemplates,\r\n              templatesInfo: {\r\n                stageSelectionCount: availableTemplates.stage_selection.length,\r\n                dataExtractionCount: availableTemplates.data_extraction.length,\r\n                responseGenerationCount: availableTemplates.response_generation.length,\r\n              }\r\n            })}\r\n            \r\n            {/* Stage Name */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Stage Name\"\r\n                value={newStageName}\r\n                onChange={(e) => setNewStageName(e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Stage Description */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={2}\r\n                label=\"Stage Description\"\r\n                value={stageDescription}\r\n                onChange={(e) => setStageDescription(e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Stage Selection */}\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Stage Selection Template</InputLabel>\r\n                <Select\r\n                  fullWidth\r\n                  value={selectedTemplates.stage_selection}\r\n                  onChange={(e) => handleTemplateChange(e, 'stage_selection')}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {availableTemplates.stage_selection.map((template) => (\r\n                    <MenuItem \r\n                      key={template.template_id} \r\n                      value={template.template_id}\r\n                      sx={template.isDefault ? { \r\n                        backgroundColor: 'rgba(245, 0, 87, 0.04)',\r\n                        '&:hover': {\r\n                          backgroundColor: 'rgba(245, 0, 87, 0.08)'\r\n                        }\r\n                      } : {}}\r\n                    >\r\n                      {template.isDefault ? (\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <StarIcon sx={{ mr: 1, color: 'secondary.main', fontSize: '1rem' }} />\r\n                          {template.template_name}\r\n                        </Box>\r\n                      ) : template.template_name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText>Template for determining if this stage should handle the message</FormHelperText>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Data Extraction */}\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Data Extraction Template</InputLabel>\r\n                <Select\r\n                  fullWidth\r\n                  value={selectedTemplates.data_extraction}\r\n                  onChange={(e) => handleTemplateChange(e, 'data_extraction')}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {availableTemplates.data_extraction.map((template) => (\r\n                    <MenuItem \r\n                      key={template.template_id} \r\n                      value={template.template_id}\r\n                      sx={template.isDefault ? { \r\n                        backgroundColor: 'rgba(245, 0, 87, 0.04)',\r\n                        '&:hover': {\r\n                          backgroundColor: 'rgba(245, 0, 87, 0.08)'\r\n                        }\r\n                      } : {}}\r\n                    >\r\n                      {template.isDefault ? (\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <StarIcon sx={{ mr: 1, color: 'secondary.main', fontSize: '1rem' }} />\r\n                          {template.template_name}\r\n                        </Box>\r\n                      ) : template.template_name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText>Template for extracting data from the message</FormHelperText>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Response Generation */}\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Response Generation Template</InputLabel>\r\n                <Select\r\n                  fullWidth\r\n                  value={selectedTemplates.response_generation}\r\n                  onChange={(e) => handleTemplateChange(e, 'response_generation')}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {availableTemplates.response_generation.map((template) => (\r\n                    <MenuItem \r\n                      key={template.template_id} \r\n                      value={template.template_id}\r\n                      sx={template.isDefault ? { \r\n                        backgroundColor: 'rgba(245, 0, 87, 0.04)',\r\n                        '&:hover': {\r\n                          backgroundColor: 'rgba(245, 0, 87, 0.08)'\r\n                        }\r\n                      } : {}}\r\n                    >\r\n                      {template.isDefault ? (\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <StarIcon sx={{ mr: 1, color: 'secondary.main', fontSize: '1rem' }} />\r\n                          {template.template_name}\r\n                        </Box>\r\n                      ) : template.template_name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText>Template for generating responses</FormHelperText>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {/* Add Agent Selection Dropdown */}\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel id=\"agent-select-label\">Agent</InputLabel>\r\n              <Select\r\n                labelId=\"agent-select-label\"\r\n                id=\"agent-select\"\r\n                value={selectedAgentId}\r\n                label=\"Agent\"\r\n                onChange={handleAgentChange}\r\n                disabled={isSubmitting}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {agents.map((agent) => (\r\n                  <MenuItem key={agent.agent_id} value={agent.agent_id}>\r\n                    {agent.agent_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                Select an agent to associate with this stage\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => !isSubmitting && setOpenDialog(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleCreateStage} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!newStageName.trim()}\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Create & Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={openDeleteDialog}\r\n        onClose={() => setOpenDeleteDialog(false)}\r\n      >\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete the stage \"{stageToDelete?.stage_name}\"?\r\n            This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteDialog(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleDeleteStage} \r\n            variant=\"contained\" \r\n            color=\"error\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert severity={snackbar.severity} onClose={handleCloseSnackbar}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StageManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}