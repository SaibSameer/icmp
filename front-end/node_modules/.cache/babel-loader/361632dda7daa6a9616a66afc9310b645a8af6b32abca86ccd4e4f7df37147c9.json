{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\Configuration.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Card, CardContent, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Configuration({\n  apiKey,\n  setApiKey,\n  userId,\n  setUserId,\n  businessId,\n  setBusinessId,\n  handleSnackbarOpen\n}) {\n  _s();\n  const [validationError, setValidationError] = useState('');\n  const [configOutput, setConfigOutput] = useState('');\n  const [businessApiKey, setBusinessApiKey] = useState(''); // New State\n\n  useEffect(() => {\n    // Load API Key from localStorage on component mount\n    const storedApiKey = localStorage.getItem('icmpApiKey');\n    if (storedApiKey) {\n      setApiKey(storedApiKey);\n    }\n  }, []);\n  const saveConfig = async () => {\n    console.log(\"ICMP API Key being sent:\", apiKey); // Added Log Statement\n\n    try {\n      // Validate configuration with the backend\n      const validationResponse = await fetch('http://localhost:5000/validate_config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          apiKey,\n          // ICMP API Key\n          userId,\n          businessId,\n          businessApiKey // Business API Key\n        })\n      });\n      const validationData = await validationResponse.json();\n      if (validationData.isValid) {\n        setConfigOutput(`Configuration Saved:\\nUser ID: ${userId}\\nBusiness ID: ${businessId}\\nICMP API Key: ${apiKey}\\nBusiness API Key: ${businessApiKey}`);\n        handleSnackbarOpen(\"Configuration Saved!\", \"success\");\n        setValidationError(''); // Clear any previous error\n      } else {\n        setValidationError(validationData.error || 'Invalid configuration');\n        setConfigOutput(`Error: ${validationData.error || 'Invalid configuration'}`);\n        handleSnackbarOpen(validationData.error || \"Invalid configuration\", \"error\");\n      }\n    } catch (error) {\n      setValidationError(error.message);\n      setConfigOutput(`Error: ${error.message}`);\n      handleSnackbarOpen(error.message, \"error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mt: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"DISCLAIMER:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), \" Storing the ICMP API Key in local storage is NOT SECURE and should never be done in a production environment. This is for demonstration purposes only!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"ICMP API Key\" // Changed Label\n          ,\n          variant: \"outlined\",\n          value: apiKey,\n          onChange: e => {\n            setApiKey(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"User ID\",\n          variant: \"outlined\",\n          value: userId,\n          onChange: e => setUserId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Business ID\",\n          variant: \"outlined\",\n          value: businessId,\n          onChange: e => setBusinessId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Business API Key\",\n          variant: \"outlined\",\n          value: businessApiKey,\n          onChange: e => setBusinessApiKey(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: saveConfig,\n          children: \"Save Config\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), validationError && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"error\",\n          children: validationError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: configOutput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Configuration, \"zMqsPkvyJE40S02mQmEOPiJNtT0=\");\n_c = Configuration;\nexport default Configuration;\nvar _c;\n$RefreshReg$(_c, \"Configuration\");","map":{"version":3,"names":["React","useState","useEffect","TextField","Button","Typography","Card","CardContent","Box","jsxDEV","_jsxDEV","Configuration","apiKey","setApiKey","userId","setUserId","businessId","setBusinessId","handleSnackbarOpen","_s","validationError","setValidationError","configOutput","setConfigOutput","businessApiKey","setBusinessApiKey","storedApiKey","localStorage","getItem","saveConfig","console","log","validationResponse","fetch","method","headers","body","JSON","stringify","validationData","json","isValid","error","message","sx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","display","flexDirection","gap","label","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/Configuration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Card, CardContent, Box } from '@mui/material';\r\n\r\nfunction Configuration({\r\n    apiKey,\r\n    setApiKey,\r\n    userId,\r\n    setUserId,\r\n    businessId,\r\n    setBusinessId,\r\n    handleSnackbarOpen\r\n}) {\r\n    const [validationError, setValidationError] = useState('');\r\n    const [configOutput, setConfigOutput] = useState('');\r\n    const [businessApiKey, setBusinessApiKey] = useState('');  // New State\r\n\r\n    useEffect(() => {\r\n        // Load API Key from localStorage on component mount\r\n        const storedApiKey = localStorage.getItem('icmpApiKey');\r\n        if (storedApiKey) {\r\n            setApiKey(storedApiKey);\r\n        }\r\n    }, []);\r\n\r\n    const saveConfig = async () => {\r\n        console.log(\"ICMP API Key being sent:\", apiKey); // Added Log Statement\r\n\r\n        try {\r\n            // Validate configuration with the backend\r\n            const validationResponse = await fetch('http://localhost:5000/validate_config', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${apiKey}`\r\n                },\r\n                body: JSON.stringify({\r\n                    apiKey,  // ICMP API Key\r\n                    userId,\r\n                    businessId,\r\n                    businessApiKey  // Business API Key\r\n                })\r\n            });\r\n\r\n            const validationData = await validationResponse.json();\r\n\r\n            if (validationData.isValid) {\r\n                setConfigOutput(`Configuration Saved:\\nUser ID: ${userId}\\nBusiness ID: ${businessId}\\nICMP API Key: ${apiKey}\\nBusiness API Key: ${businessApiKey}`);\r\n                handleSnackbarOpen(\"Configuration Saved!\", \"success\");\r\n                setValidationError(''); // Clear any previous error\r\n            } else {\r\n                setValidationError(validationData.error || 'Invalid configuration');\r\n                setConfigOutput(`Error: ${validationData.error || 'Invalid configuration'}`);\r\n                handleSnackbarOpen(validationData.error || \"Invalid configuration\", \"error\");\r\n            }\r\n        } catch (error) {\r\n            setValidationError(error.message);\r\n            setConfigOutput(`Error: ${error.message}`);\r\n            handleSnackbarOpen(error.message, \"error\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card sx={{ mt: 2 }}>\r\n            <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>Configuration</Typography>\r\n                <Typography variant=\"body2\" color=\"error\">\r\n                    <b>DISCLAIMER:</b> Storing the ICMP API Key in local storage is NOT SECURE and should never be done in a\r\n                    production environment. This is for demonstration purposes only!\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n                    <TextField\r\n                        label=\"ICMP API Key\"  // Changed Label\r\n                        variant=\"outlined\"\r\n                        value={apiKey}\r\n                        onChange={(e) => {\r\n                            setApiKey(e.target.value);\r\n                        }}\r\n                    />\r\n                    <TextField label=\"User ID\" variant=\"outlined\" value={userId}\r\n                        onChange={(e) => setUserId(e.target.value)} />\r\n                    <TextField label=\"Business ID\" variant=\"outlined\" value={businessId}\r\n                        onChange={(e) => setBusinessId(e.target.value)} />\r\n                    <TextField\r\n                        label=\"Business API Key\"\r\n                        variant=\"outlined\"\r\n                        value={businessApiKey}\r\n                        onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                    />\r\n                    <Button variant=\"contained\" onClick={saveConfig}>Save Config</Button>\r\n                    {validationError && (\r\n                        <Typography variant=\"body1\" color=\"error\">{validationError}</Typography>\r\n                    )}\r\n                    <Typography variant=\"body1\">{configOutput}</Typography>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Configuration;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}