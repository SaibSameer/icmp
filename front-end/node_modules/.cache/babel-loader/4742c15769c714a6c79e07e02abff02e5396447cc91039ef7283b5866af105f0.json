{"ast":null,"code":"// Authentication service for handling login, logout, and session management\nimport { API_CONFIG, AUTH_CONFIG } from '../config';\n\n/**\r\n * Handles API responses and throws errors for non-OK responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\nconst handleApiResponse = async response => {\n  // Handle non-OK responses\n  if (!response.ok) {\n    // Try to get detailed error from response\n    try {\n      const errorData = await response.json();\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\n    } catch (jsonError) {\n      // If response isn't valid JSON, use status text\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  // For successful responses, parse JSON or return empty object\n  try {\n    return await response.json();\n  } catch (error) {\n    // Some successful responses may not have a body (e.g., 204 No Content)\n    return {};\n  }\n};\n\n/**\r\n * Login with business and user credentials\r\n * @param {string} userId - User ID\r\n * @param {string} businessId - Business ID\r\n * @param {string} businessApiKey - Business API Key\r\n * @returns {Promise<Object>} - Login response data\r\n */\nexport const login = async (userId, businessId, businessApiKey) => {\n  try {\n    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      credentials: 'include',\n      // Important for cookie\n      body: JSON.stringify({\n        userId,\n        businessId,\n        businessApiKey\n      })\n    });\n    const data = await handleApiResponse(response);\n    if (data.success) {\n      // Store credentials in localStorage for persistent login\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID, userId);\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID, businessId);\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY, businessApiKey);\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Logout and clear stored credentials\r\n */\nexport const logout = () => {\n  // Clear stored credentials\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\n  return {\n    success: true,\n    message: 'Logged out successfully'\n  };\n};\n\n/**\r\n * Check if user is logged in\r\n * @returns {boolean} - True if user is logged in\r\n */\nexport const isLoggedIn = () => {\n  const userId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\n  const businessId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\n  return !!(userId && businessId && businessApiKey);\n};\n\n/**\r\n * Get stored credentials\r\n * @returns {Object} - Stored credentials\r\n */\nexport const getStoredCredentials = () => {\n  return {\n    userId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID) || '',\n    businessId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID) || '',\n    businessApiKey: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY) || ''\n  };\n};\n\n/**\r\n * Get authentication headers for API requests\r\n * @returns {Object} - Headers object with authentication\r\n */\nexport const getAuthHeaders = () => {\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\n  return {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'businessApiKey': businessApiKey || API_CONFIG.DEFAULTS.API_KEY\n  };\n};\nexport default {\n  login,\n  logout,\n  isLoggedIn,\n  getStoredCredentials,\n  getAuthHeaders\n};","map":{"version":3,"names":["API_CONFIG","AUTH_CONFIG","handleApiResponse","response","ok","errorData","json","Error","message","error","status","jsonError","statusText","login","userId","businessId","businessApiKey","fetch","BASE_URL","ENDPOINTS","LOGIN","method","headers","credentials","body","JSON","stringify","data","success","localStorage","setItem","STORAGE_KEYS","USER_ID","BUSINESS_ID","BUSINESS_API_KEY","console","logout","removeItem","isLoggedIn","getItem","getStoredCredentials","getAuthHeaders","DEFAULTS","API_KEY"],"sources":["C:/icmp_events_api/front-end/src/services/authService.js"],"sourcesContent":["// Authentication service for handling login, logout, and session management\r\nimport { API_CONFIG, AUTH_CONFIG } from '../config';\r\n\r\n/**\r\n * Handles API responses and throws errors for non-OK responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\r\nconst handleApiResponse = async (response) => {\r\n  // Handle non-OK responses\r\n  if (!response.ok) {\r\n    // Try to get detailed error from response\r\n    try {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\r\n    } catch (jsonError) {\r\n      // If response isn't valid JSON, use status text\r\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\r\n    }\r\n  }\r\n  \r\n  // For successful responses, parse JSON or return empty object\r\n  try {\r\n    return await response.json();\r\n  } catch (error) {\r\n    // Some successful responses may not have a body (e.g., 204 No Content)\r\n    return {};\r\n  }\r\n};\r\n\r\n/**\r\n * Login with business and user credentials\r\n * @param {string} userId - User ID\r\n * @param {string} businessId - Business ID\r\n * @param {string} businessApiKey - Business API Key\r\n * @returns {Promise<Object>} - Login response data\r\n */\r\nexport const login = async (userId, businessId, businessApiKey) => {\r\n  try {\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      credentials: 'include', // Important for cookie\r\n      body: JSON.stringify({\r\n        userId,\r\n        businessId,\r\n        businessApiKey\r\n      })\r\n    });\r\n\r\n    const data = await handleApiResponse(response);\r\n    \r\n    if (data.success) {\r\n      // Store credentials in localStorage for persistent login\r\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID, userId);\r\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID, businessId);\r\n      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY, businessApiKey);\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Logout and clear stored credentials\r\n */\r\nexport const logout = () => {\r\n  // Clear stored credentials\r\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\r\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\r\n  localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\r\n  \r\n  return { success: true, message: 'Logged out successfully' };\r\n};\r\n\r\n/**\r\n * Check if user is logged in\r\n * @returns {boolean} - True if user is logged in\r\n */\r\nexport const isLoggedIn = () => {\r\n  const userId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);\r\n  const businessId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID);\r\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\r\n  \r\n  return !!(userId && businessId && businessApiKey);\r\n};\r\n\r\n/**\r\n * Get stored credentials\r\n * @returns {Object} - Stored credentials\r\n */\r\nexport const getStoredCredentials = () => {\r\n  return {\r\n    userId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID) || '',\r\n    businessId: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_ID) || '',\r\n    businessApiKey: localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY) || ''\r\n  };\r\n};\r\n\r\n/**\r\n * Get authentication headers for API requests\r\n * @returns {Object} - Headers object with authentication\r\n */\r\nexport const getAuthHeaders = () => {\r\n  const businessApiKey = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.BUSINESS_API_KEY);\r\n  \r\n  return {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'businessApiKey': businessApiKey || API_CONFIG.DEFAULTS.API_KEY\r\n  };\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isLoggedIn,\r\n  getStoredCredentials,\r\n  getAuthHeaders\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}