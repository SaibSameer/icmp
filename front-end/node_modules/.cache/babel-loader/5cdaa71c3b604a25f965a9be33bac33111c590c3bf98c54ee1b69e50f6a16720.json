{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Box, Paper, Typography, TextField, Button, Tabs, Tab, Grid, Alert, Snackbar, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, CircularProgress, Divider, Chip, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// TabPanel component for the tabs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `tabpanel-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      padding: '20px 0'\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nconst StageEditor = () => {\n  _s();\n  var _templates$templateTo, _templates$templateTo2;\n  const {\n    stageId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check local storage and cookies for business ID and API key\n  const getStoredValue = key => {\n    var _document$cookie$spli;\n    // Try localStorage first\n    const localStorageValue = localStorage.getItem(key);\n    if (localStorageValue) return localStorageValue;\n\n    // Then try cookies\n    return (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith(`${key}=`))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n  };\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n\n  // Location state values as fallback\n  const {\n    businessId: locationBusinessId,\n    agentId: locationAgentId,\n    isNewStage\n  } = location.state || {};\n\n  // Get stored values\n  const storedBusinessId = getStoredValue('businessId');\n  const storedApiKey = getStoredValue('businessApiKey');\n\n  // Use query parameters first, then location state, then stored values\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || storedBusinessId || '');\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\n  const agentId = queryParams.get('agent_id') || locationAgentId;\n  const [stage, setStage] = useState(null);\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [tabValue, setTabValue] = useState(0);\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n\n  // Add template saving loading states\n  const [savingTemplates, setSavingTemplates] = useState({\n    stage_selection: false,\n    data_extraction: false,\n    response_generation: false\n  });\n\n  // Add template save confirmation dialog\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [templateToSave, setTemplateToSave] = useState('');\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\n\n  // Function to open the confirmation dialog\n  const confirmSaveTemplate = (type, asDefault = false) => {\n    setTemplateToSave(type);\n    setSaveAsDefault(asDefault);\n    setShowConfirmDialog(true);\n  };\n\n  // Function to handle dialog confirm\n  const handleConfirmSave = async () => {\n    setShowConfirmDialog(false);\n    if (templateToSave) {\n      await saveTemplate(templateToSave, saveAsDefault);\n    }\n  };\n\n  // Fetch stage data when the component mounts\n  useEffect(() => {\n    if (businessId) {\n      // Store businessId in both localStorage and cookie for future use\n      localStorage.setItem('businessId', businessId);\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n    }\n    if (businessApiKey) {\n      // Store businessApiKey in both localStorage and cookie for future use\n      localStorage.setItem('businessApiKey', businessApiKey);\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n    }\n    if (stageId && stageId !== 'new') {\n      fetchStage(stageId);\n    } else if (isNewStage) {\n      // For new stage, set up defaults but don't fetch\n      setStage({\n        stage_name: '',\n        stage_description: '',\n        business_id: businessId,\n        agent_id: agentId,\n        stage_selection_template_id: null,\n        data_extraction_template_id: null,\n        response_generation_template_id: null,\n        stage_config: {\n          order: 0\n        }\n      });\n    }\n\n    // Only fetch available templates if we have a business ID\n    if (businessId) {\n      fetchAllTemplates();\n    }\n  }, [stageId, businessId, businessApiKey, agentId, isNewStage]);\n\n  // Fetch specific stage data\n  const fetchStage = async id => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/stages/${id}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch stage');\n      const data = await response.json();\n      setStage(data);\n      setStageName(data.stage_name || '');\n      setStageDescription(data.stage_description || '');\n\n      // For each template ID in the stage, fetch the template content\n      if (data.stage_selection_template_id) {\n        fetchTemplate(data.stage_selection_template_id, 'stage_selection');\n      }\n      if (data.data_extraction_template_id) {\n        fetchTemplate(data.data_extraction_template_id, 'data_extraction');\n      }\n      if (data.response_generation_template_id) {\n        fetchTemplate(data.response_generation_template_id, 'response_generation');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all available templates on component mount\n  const fetchAllTemplates = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch all templates\n      const response = await fetch('/templates', {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch templates');\n      const data = await response.json();\n\n      // Organize templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: [],\n        default_stage_selection: [],\n        default_data_extraction: [],\n        default_response_generation: []\n      };\n      data.forEach(template => {\n        if (templatesByType[template.template_type]) {\n          templatesByType[template.template_type].push(template);\n        }\n      });\n      setAvailableTemplates(templatesByType);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch templates');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchTemplate = useCallback(async (templateId, type) => {\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\n      const data = await response.json();\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: data.template_id,\n          text: data.template_text,\n          type: data.template_type\n        }\n      }));\n\n      // Extract variables from template\n      setVariables(prev => ({\n        ...prev,\n        [type]: extractVariables(data.template_text)\n      }));\n    } catch (err) {\n      setError(err.message);\n    }\n  }, []);\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Fetch the selected template\n    await fetchTemplate(templateId, type);\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text,\n        type: type // Keep the original type, not the default type\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template for ${type}`);\n  };\n  const handlePreview = async templateType => {\n    try {\n      setPreviewLoading(true);\n      setPreviewError('');\n      const templateText = templates[templateType].text;\n      if (!templateText.trim()) {\n        setPreviewError('Template text is empty');\n        return;\n      }\n      if (!businessApiKey) {\n        setPreviewError('Business API key is required but was not found');\n        setShowBusinessIdInput(true);\n        return;\n      }\n\n      // Prepare preview request\n      const previewRequest = {\n        template_type: templateType,\n        template_text: templateText,\n        context: {\n          conversation_history: [{\n            role: \"user\",\n            content: \"I'm interested in your products\"\n          }, {\n            role: \"assistant\",\n            content: \"I'd be happy to tell you about our products. What type are you interested in?\"\n          }],\n          extracted_data: {\n            customer_name: \"John Doe\",\n            product_interest: \"shoes\",\n            budget: \"$100\"\n          }\n        }\n      };\n\n      // Try multiple possible endpoints (for compatibility)\n      const endpoints = ['/templates/render', '/render_template', '/api/templates/preview'];\n      let response = null;\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\n          response = await fetch(`${endpoint}?business_id=${businessId}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${businessApiKey}` // Use value from state\n            },\n            body: JSON.stringify(previewRequest)\n          });\n          if (response.ok) break;\n        } catch (endpointErr) {\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\n        }\n      }\n\n      // If we got a successful response from any endpoint\n      if (response && response.ok) {\n        const data = await response.json();\n        console.log('Preview response:', data);\n        setPreviewData(data);\n        setShowPreview(true);\n      } else {\n        // Local fallback preview if no endpoint worked\n        console.log('All endpoint attempts failed, using local preview');\n\n        // Simple variable replacement for demonstration\n        let previewText = templateText;\n        const variables = extractVariables(templateText);\n\n        // Replace variables with sample values\n        variables.forEach(variable => {\n          const sampleValue = `[Sample ${variable}]`;\n          previewText = previewText.replace(new RegExp(`{{\\\\s*${variable}\\\\s*}}`, 'g'), sampleValue);\n        });\n        setPreviewData({\n          rendered_text: previewText\n        });\n        setShowPreview(true);\n      }\n    } catch (err) {\n      console.error('Error generating preview:', err);\n      setPreviewError(`Failed to generate preview: ${err.message}`);\n    } finally {\n      setPreviewLoading(false);\n    }\n  };\n\n  // Update saveTemplate function to use businessApiKey from state\n  const saveTemplate = async (type, asDefault = false) => {\n    try {\n      setSavingTemplates(prev => ({\n        ...prev,\n        [type]: true\n      }));\n      if (!businessId) {\n        setError('Business ID is required to save template');\n        return;\n      }\n      const template = templates[type];\n      if (!template.text.trim()) {\n        setError(`Template text is required for ${type}`);\n        return;\n      }\n      if (!businessApiKey) {\n        setError('Business API key is required but was not found');\n        setShowBusinessIdInput(true);\n        return;\n      }\n\n      // If there's an ID, update existing template, otherwise create new\n      const url = template.id && !asDefault ? `/templates/${template.id}` : '/templates';\n      const method = template.id && !asDefault ? 'PUT' : 'POST';\n\n      // Add query parameter with business_id as fallback\n      const urlWithParams = `${url}?business_id=${businessId}`;\n\n      // Map regular types to their default counterparts if saving as default\n      const templateType = asDefault ? `default_${type}` : type;\n      const templateData = {\n        template_name: `${stageName || 'New Stage'} - ${asDefault ? 'Default ' : ''}${type.replace(/_/g, ' ')}`,\n        template_text: template.text,\n        template_type: templateType,\n        business_id: businessId // Important: Include business_id\n      };\n      console.log(`Saving ${asDefault ? 'default ' : ''}${type} template:`, templateData);\n      const response = await fetch(urlWithParams, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}` // Use value from state\n        },\n        credentials: 'include',\n        body: JSON.stringify(templateData)\n      });\n      if (!response.ok) throw new Error(`Failed to save ${asDefault ? 'default ' : ''}${type} template`);\n      const data = await response.json();\n      console.log(`Template ${asDefault ? 'default ' : ''}${type} saved successfully:`, data);\n\n      // Only update the current template ID if not saving as default\n      if (!asDefault && !template.id) {\n        setTemplates(prev => ({\n          ...prev,\n          [type]: {\n            ...prev[type],\n            id: data.template_id\n          }\n        }));\n      }\n      setSuccess(`${asDefault ? 'Default ' : ''}${type} template saved successfully`);\n\n      // After successful save, refresh the available templates\n      fetchAllTemplates();\n    } catch (err) {\n      console.error(`Error saving ${type} template:`, err);\n      setError(`Error saving template: ${err.message}`);\n    } finally {\n      setSavingTemplates(prev => ({\n        ...prev,\n        [type]: false\n      }));\n    }\n  };\n\n  // Then modify the handleSave function to include the business API key\n  const handleSave = async () => {\n    if (!stage) return;\n    try {\n      var _document$cookie$spli2;\n      // Validate stage name\n      if (!stageName.trim()) {\n        setError('Stage name is required');\n        return;\n      }\n\n      // Ensure businessId is available\n      if (!businessId) {\n        setError('Business ID is required but was not found');\n        console.error('Business ID is missing', {\n          businessId,\n          locationBusinessId,\n          queryBusinessId\n        });\n        return;\n      }\n\n      // Get business API key from cookies\n      const businessApiKey = (_document$cookie$spli2 = document.cookie.split('; ').find(row => row.startsWith('businessApiKey='))) === null || _document$cookie$spli2 === void 0 ? void 0 : _document$cookie$spli2.split('=')[1];\n      if (!businessApiKey) {\n        setError('Business API key is required but was not found in cookies');\n        return;\n      }\n\n      // Check if we need to save any templates first\n      const templatesSavingNeeded = [];\n      if (templates.stage_selection.text && !templates.stage_selection.id) {\n        templatesSavingNeeded.push('stage_selection');\n      }\n      if (templates.data_extraction.text && !templates.data_extraction.id) {\n        templatesSavingNeeded.push('data_extraction');\n      }\n      if (templates.response_generation.text && !templates.response_generation.id) {\n        templatesSavingNeeded.push('response_generation');\n      }\n\n      // If any templates need saving, save them first\n      if (templatesSavingNeeded.length > 0) {\n        setSuccess(`Saving ${templatesSavingNeeded.length} template(s) first...`);\n\n        // Save templates in sequence\n        for (const type of templatesSavingNeeded) {\n          await saveTemplate(type);\n        }\n      }\n\n      // Prepare updated stage data\n      const updatedStage = {\n        ...stage,\n        stage_name: stageName,\n        stage_description: stageDescription,\n        business_id: businessId,\n        agent_id: agentId || null,\n        stage_type: 'conversation',\n        // Required field\n        stage_selection_template_id: templates.stage_selection.id || null,\n        data_extraction_template_id: templates.data_extraction.id || null,\n        response_generation_template_id: templates.response_generation.id || null\n      };\n      let response;\n      let method;\n      let url;\n\n      // Determine if this is a create or update operation\n      if (stageId === 'new' || isNewStage) {\n        method = 'POST';\n        url = '/stages';\n      } else {\n        method = 'PUT';\n        url = `/stages/${stageId}`;\n      }\n\n      // Add query parameter with business_id as fallback\n      url = `${url}?business_id=${businessId}`;\n      console.log('Saving stage with data:', JSON.stringify(updatedStage, null, 2));\n\n      // Call the API\n      response = await fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}` // Add Authorization header as backup\n        },\n        credentials: 'include',\n        // This sends cookies\n        body: JSON.stringify(updatedStage)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || (stageId === 'new' ? 'Failed to create stage' : 'Failed to update stage'));\n      }\n      const result = await response.json();\n      console.log('Stage saved successfully:', result);\n      setSuccess(stageId === 'new' ? 'Stage created successfully' : 'Stage updated successfully');\n\n      // Navigate back to stage manager after a short delay\n      setTimeout(() => {\n        let backUrl;\n        if (businessId && agentId) {\n          backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n        } else if (businessId) {\n          backUrl = `/stage-management/business_id=${businessId}`;\n        } else {\n          backUrl = '/stage-management';\n        }\n        navigate(backUrl);\n      }, 1500);\n    } catch (err) {\n      console.error('Error saving stage:', err);\n      setError(err.message || 'Failed to save stage');\n    }\n  };\n  const handleCancel = () => {\n    // Navigate back to stage manager\n    let backUrl;\n    if (businessId && agentId) {\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n    } else if (businessId) {\n      backUrl = `/stage-management/business_id=${businessId}`;\n    } else {\n      backUrl = '/stage-management';\n    }\n    navigate(backUrl);\n  };\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setError(''),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setSuccess(''),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 9\n    }, this), (showBusinessIdInput || !businessId || !businessApiKey) && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        border: '1px dashed',\n        borderColor: 'warning.main',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"warning.main\",\n        gutterBottom: true,\n        children: \"Business Credentials Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business ID\",\n            value: businessId,\n            onChange: e => setBusinessId(e.target.value),\n            placeholder: \"Enter your business ID\",\n            helperText: \"Required for saving templates and stages\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business API Key\",\n            value: businessApiKey,\n            onChange: e => setBusinessApiKey(e.target.value),\n            placeholder: \"Enter your business API key\",\n            helperText: \"Required for authentication\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              if (businessId && businessApiKey) {\n                // Save to both localStorage and cookies\n                localStorage.setItem('businessId', businessId);\n                localStorage.setItem('businessApiKey', businessApiKey);\n                document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n                document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n                setShowBusinessIdInput(false);\n                setSuccess('Business credentials saved');\n                fetchAllTemplates();\n              } else {\n                setError('Please enter both Business ID and API Key');\n              }\n            },\n            children: \"Save Credentials\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Stage Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: stageName,\n              onChange: e => setStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value),\n              multiline: true,\n              rows: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          my: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tabValue,\n          onChange: handleTabChange,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Stage Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Data Extraction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Response Generation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 0,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"stage-selection-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"stage-selection-template-label\",\n                value: templates.stage_selection.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('stage_selection', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 808,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 807,\n                  columnNumber: 21\n                }, this), availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.stage_selection.id ? `Template ID: ${templates.stage_selection.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 819,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  onClick: () => confirmSaveTemplate('stage_selection'),\n                  disabled: !templates.stage_selection.text || savingTemplates.stage_selection,\n                  startIcon: savingTemplates.stage_selection ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 830,\n                    columnNumber: 68\n                  }, this) : null,\n                  children: savingTemplates.stage_selection ? 'Saving...' : 'Save Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 825,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => confirmSaveTemplate('stage_selection', true),\n                  disabled: !templates.stage_selection.text || savingTemplates.stage_selection,\n                  children: \"Save as Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 834,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 818,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 848,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('stage_selection'),\n                disabled: availableTemplates.default_stage_selection.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 846,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 856,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('stage_selection'),\n                disabled: !templates.stage_selection.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 854,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 864,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 863,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 862,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 845,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'stage_selection' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 872,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 870,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.stage_selection.text || '',\n              onChange: e => handleTemplateChange('stage_selection', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 17\n            }, this), variables.stage_selection.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 890,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.stage_selection.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 893,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 889,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 1,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"data-extraction-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"data-extraction-template-label\",\n                value: templates.data_extraction.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('data_extraction', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 913,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 912,\n                  columnNumber: 21\n                }, this), availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 906,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.data_extraction.id ? `Template ID: ${templates.data_extraction.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  onClick: () => confirmSaveTemplate('data_extraction'),\n                  disabled: !templates.data_extraction.text || savingTemplates.data_extraction,\n                  startIcon: savingTemplates.data_extraction ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 935,\n                    columnNumber: 68\n                  }, this) : null,\n                  children: savingTemplates.data_extraction ? 'Saving...' : 'Save Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 930,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => confirmSaveTemplate('data_extraction', true),\n                  disabled: !templates.data_extraction.text || savingTemplates.data_extraction,\n                  children: \"Save as Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 939,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 953,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('data_extraction'),\n                disabled: availableTemplates.default_data_extraction.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 961,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('data_extraction'),\n                disabled: !templates.data_extraction.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 959,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 969,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 968,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'data_extraction' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 976,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 977,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 975,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.data_extraction.text || '',\n              onChange: e => handleTemplateChange('data_extraction', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 983,\n              columnNumber: 17\n            }, this), variables.data_extraction.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 995,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.data_extraction.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 998,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 996,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 994,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"response-generation-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1010,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"response-generation-template-label\",\n                value: templates.response_generation.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('response_generation', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1018,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1017,\n                  columnNumber: 21\n                }, this), availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1021,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1011,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1009,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.response_generation.id ? `Template ID: ${templates.response_generation.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1029,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  onClick: () => confirmSaveTemplate('response_generation'),\n                  disabled: !templates.response_generation.text || savingTemplates.response_generation,\n                  startIcon: savingTemplates.response_generation ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1040,\n                    columnNumber: 72\n                  }, this) : null,\n                  children: savingTemplates.response_generation ? 'Saving...' : 'Save Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1035,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => confirmSaveTemplate('response_generation', true),\n                  disabled: !templates.response_generation.text || savingTemplates.response_generation,\n                  children: \"Save as Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1044,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1034,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1058,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('response_generation'),\n                disabled: availableTemplates.default_response_generation.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1056,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1066,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('response_generation'),\n                disabled: !templates.response_generation.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1064,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1074,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1073,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1072,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1055,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'response_generation' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1080,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.response_generation.text || '',\n              onChange: e => handleTemplateChange('response_generation', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 17\n            }, this), variables.response_generation.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1100,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.response_generation.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1103,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1099,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1008,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3,\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1122,\n            columnNumber: 26\n          }, this),\n          onClick: handleSave,\n          disabled: isLoading,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1126,\n            columnNumber: 28\n          }, this) : stageId === 'new' ? 'Create Stage' : 'Save Stage'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showConfirmDialog,\n      onClose: () => setShowConfirmDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Save Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: saveAsDefault ? `Are you sure you want to save this as a default ${templateToSave === null || templateToSave === void 0 ? void 0 : templateToSave.replace(/_/g, ' ')} template?` : (_templates$templateTo = templates[templateToSave]) !== null && _templates$templateTo !== void 0 && _templates$templateTo.id ? `Are you sure you want to update this ${templateToSave === null || templateToSave === void 0 ? void 0 : templateToSave.replace(/_/g, ' ')} template?` : `Are you sure you want to create a new ${templateToSave === null || templateToSave === void 0 ? void 0 : templateToSave.replace(/_/g, ' ')} template?`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1136,\n          columnNumber: 11\n        }, this), saveAsDefault && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"This will create a new default template that can be applied to any stage.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1144,\n          columnNumber: 13\n        }, this), !((_templates$templateTo2 = templates[templateToSave]) !== null && _templates$templateTo2 !== void 0 && _templates$templateTo2.id) && !saveAsDefault && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"A new template will be created in the database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowConfirmDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirmSave,\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 669,\n    columnNumber: 5\n  }, this);\n};\n_s(StageEditor, \"sbj5R/D9LmAdfezxsdgnVhsNbrg=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c2 = StageEditor;\nexport default StageEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"StageEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Box","Paper","Typography","TextField","Button","Tabs","Tab","Grid","Alert","Snackbar","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","CircularProgress","Divider","Chip","Dialog","DialogTitle","DialogContent","DialogActions","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","ArrowBackIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","TabPanel","props","children","value","index","other","role","hidden","id","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","StageEditor","_s","_templates$templateTo","_templates$templateTo2","stageId","navigate","location","getStoredValue","key","_document$cookie$spli","localStorageValue","localStorage","getItem","document","cookie","split","find","row","startsWith","queryParams","URLSearchParams","search","queryBusinessId","get","businessId","locationBusinessId","agentId","locationAgentId","isNewStage","state","storedBusinessId","storedApiKey","setBusinessId","businessApiKey","setBusinessApiKey","showBusinessIdInput","setShowBusinessIdInput","stage","setStage","stageName","setStageName","stageDescription","setStageDescription","tabValue","setTabValue","templates","setTemplates","stage_selection","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","isLoading","setIsLoading","previewData","setPreviewData","savingTemplates","setSavingTemplates","showConfirmDialog","setShowConfirmDialog","templateToSave","setTemplateToSave","saveAsDefault","setSaveAsDefault","confirmSaveTemplate","asDefault","handleConfirmSave","saveTemplate","setItem","fetchStage","stage_name","stage_description","business_id","agent_id","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","stage_config","order","fetchAllTemplates","response","fetch","credentials","ok","Error","data","json","fetchTemplate","err","message","templatesByType","forEach","template","template_type","push","templateId","prev","template_id","template_text","extractVariables","matches","match","map","slice","handleTemplateChange","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","handlePreview","templateType","setPreviewLoading","setPreviewError","templateText","trim","previewRequest","context","conversation_history","content","extracted_data","customer_name","product_interest","budget","endpoints","endpoint","console","log","method","headers","body","JSON","stringify","endpointErr","warn","setShowPreview","previewText","variable","sampleValue","replace","RegExp","rendered_text","url","urlWithParams","templateData","template_name","handleSave","_document$cookie$spli2","templatesSavingNeeded","updatedStage","stage_type","errorData","catch","result","setTimeout","backUrl","handleCancel","handleTabChange","event","newValue","sx","p","mb","display","alignItems","onClick","mr","variant","severity","onClose","border","borderColor","borderRadius","color","gutterBottom","container","spacing","item","xs","md","fullWidth","label","onChange","e","target","placeholder","helperText","required","justifyContent","multiline","rows","my","labelId","gap","disabled","startIcon","size","title","whiteSpace","mt","flexWrap","open","_c2","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Divider,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// TabPanel component for the tabs\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n      style={{ padding: '20px 0' }}\r\n    >\r\n      {value === index && (\r\n        <Box>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StageEditor = () => {\r\n  const { stageId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Check local storage and cookies for business ID and API key\r\n  const getStoredValue = (key) => {\r\n    // Try localStorage first\r\n    const localStorageValue = localStorage.getItem(key);\r\n    if (localStorageValue) return localStorageValue;\r\n    \r\n    // Then try cookies\r\n    return document.cookie\r\n      .split('; ')\r\n      .find(row => row.startsWith(`${key}=`))\r\n      ?.split('=')[1];\r\n  };\r\n  \r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  \r\n  // Location state values as fallback\r\n  const { businessId: locationBusinessId, agentId: locationAgentId, isNewStage } = location.state || {};\r\n  \r\n  // Get stored values\r\n  const storedBusinessId = getStoredValue('businessId');\r\n  const storedApiKey = getStoredValue('businessApiKey');\r\n  \r\n  // Use query parameters first, then location state, then stored values\r\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || storedBusinessId || '');\r\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\r\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\r\n  \r\n  const agentId = queryParams.get('agent_id') || locationAgentId;\r\n  \r\n  const [stage, setStage] = useState(null);\r\n  const [stageName, setStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  \r\n  // Add template saving loading states\r\n  const [savingTemplates, setSavingTemplates] = useState({\r\n    stage_selection: false,\r\n    data_extraction: false,\r\n    response_generation: false\r\n  });\r\n\r\n  // Add template save confirmation dialog\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [templateToSave, setTemplateToSave] = useState('');\r\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\r\n\r\n  // Function to open the confirmation dialog\r\n  const confirmSaveTemplate = (type, asDefault = false) => {\r\n    setTemplateToSave(type);\r\n    setSaveAsDefault(asDefault);\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  // Function to handle dialog confirm\r\n  const handleConfirmSave = async () => {\r\n    setShowConfirmDialog(false);\r\n    if (templateToSave) {\r\n      await saveTemplate(templateToSave, saveAsDefault);\r\n    }\r\n  };\r\n\r\n  // Fetch stage data when the component mounts\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      // Store businessId in both localStorage and cookie for future use\r\n      localStorage.setItem('businessId', businessId);\r\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n    }\r\n    \r\n    if (businessApiKey) {\r\n      // Store businessApiKey in both localStorage and cookie for future use\r\n      localStorage.setItem('businessApiKey', businessApiKey);\r\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n    }\r\n\r\n    if (stageId && stageId !== 'new') {\r\n      fetchStage(stageId);\r\n    } else if (isNewStage) {\r\n      // For new stage, set up defaults but don't fetch\r\n      setStage({\r\n        stage_name: '',\r\n        stage_description: '',\r\n        business_id: businessId,\r\n        agent_id: agentId,\r\n        stage_selection_template_id: null,\r\n        data_extraction_template_id: null,\r\n        response_generation_template_id: null,\r\n        stage_config: { order: 0 }\r\n      });\r\n    }\r\n    \r\n    // Only fetch available templates if we have a business ID\r\n    if (businessId) {\r\n      fetchAllTemplates();\r\n    }\r\n  }, [stageId, businessId, businessApiKey, agentId, isNewStage]);\r\n\r\n  // Fetch specific stage data\r\n  const fetchStage = async (id) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`/stages/${id}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch stage');\r\n      \r\n      const data = await response.json();\r\n      setStage(data);\r\n      setStageName(data.stage_name || '');\r\n      setStageDescription(data.stage_description || '');\r\n      \r\n      // For each template ID in the stage, fetch the template content\r\n      if (data.stage_selection_template_id) {\r\n        fetchTemplate(data.stage_selection_template_id, 'stage_selection');\r\n      }\r\n      if (data.data_extraction_template_id) {\r\n        fetchTemplate(data.data_extraction_template_id, 'data_extraction');\r\n      }\r\n      if (data.response_generation_template_id) {\r\n        fetchTemplate(data.response_generation_template_id, 'response_generation');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch all available templates on component mount\r\n  const fetchAllTemplates = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch all templates\r\n      const response = await fetch('/templates', {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch templates');\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Organize templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: [],\r\n        default_stage_selection: [],\r\n        default_data_extraction: [],\r\n        default_response_generation: []\r\n      };\r\n      \r\n      data.forEach(template => {\r\n        if (templatesByType[template.template_type]) {\r\n          templatesByType[template.template_type].push(template);\r\n        }\r\n      });\r\n      \r\n      setAvailableTemplates(templatesByType);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch templates');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = useCallback(async (templateId, type) => {\r\n    try {\r\n      const response = await fetch(`/templates/${templateId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\r\n      \r\n      const data = await response.json();\r\n      \r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: {\r\n          id: data.template_id,\r\n          text: data.template_text,\r\n          type: data.template_type\r\n        }\r\n      }));\r\n      \r\n      // Extract variables from template\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: extractVariables(data.template_text)\r\n      }));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Fetch the selected template\r\n    await fetchTemplate(templateId, type);\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text,\r\n        type: type // Keep the original type, not the default type\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template for ${type}`);\r\n  };\r\n\r\n  const handlePreview = async (templateType) => {\r\n    try {\r\n      setPreviewLoading(true);\r\n      setPreviewError('');\r\n      \r\n      const templateText = templates[templateType].text;\r\n      if (!templateText.trim()) {\r\n        setPreviewError('Template text is empty');\r\n        return;\r\n      }\r\n      \r\n      if (!businessApiKey) {\r\n        setPreviewError('Business API key is required but was not found');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n      \r\n      // Prepare preview request\r\n      const previewRequest = {\r\n        template_type: templateType,\r\n        template_text: templateText,\r\n        context: {\r\n          conversation_history: [\r\n            { role: \"user\", content: \"I'm interested in your products\" },\r\n            { role: \"assistant\", content: \"I'd be happy to tell you about our products. What type are you interested in?\" }\r\n          ],\r\n          extracted_data: {\r\n            customer_name: \"John Doe\",\r\n            product_interest: \"shoes\",\r\n            budget: \"$100\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Try multiple possible endpoints (for compatibility)\r\n      const endpoints = [\r\n        '/templates/render',\r\n        '/render_template',\r\n        '/api/templates/preview'\r\n      ];\r\n      \r\n      let response = null;\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\r\n          \r\n          response = await fetch(`${endpoint}?business_id=${businessId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${businessApiKey}` // Use value from state\r\n            },\r\n            body: JSON.stringify(previewRequest)\r\n          });\r\n          \r\n          if (response.ok) break;\r\n        } catch (endpointErr) {\r\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\r\n        }\r\n      }\r\n      \r\n      // If we got a successful response from any endpoint\r\n      if (response && response.ok) {\r\n        const data = await response.json();\r\n        console.log('Preview response:', data);\r\n        setPreviewData(data);\r\n        setShowPreview(true);\r\n      } else {\r\n        // Local fallback preview if no endpoint worked\r\n        console.log('All endpoint attempts failed, using local preview');\r\n        \r\n        // Simple variable replacement for demonstration\r\n        let previewText = templateText;\r\n        const variables = extractVariables(templateText);\r\n        \r\n        // Replace variables with sample values\r\n        variables.forEach(variable => {\r\n          const sampleValue = `[Sample ${variable}]`;\r\n          previewText = previewText.replace(new RegExp(`{{\\\\s*${variable}\\\\s*}}`, 'g'), sampleValue);\r\n        });\r\n        \r\n        setPreviewData({ rendered_text: previewText });\r\n        setShowPreview(true);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating preview:', err);\r\n      setPreviewError(`Failed to generate preview: ${err.message}`);\r\n    } finally {\r\n      setPreviewLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update saveTemplate function to use businessApiKey from state\r\n  const saveTemplate = async (type, asDefault = false) => {\r\n    try {\r\n      setSavingTemplates(prev => ({ ...prev, [type]: true }));\r\n      \r\n      if (!businessId) {\r\n        setError('Business ID is required to save template');\r\n        return;\r\n      }\r\n\r\n      const template = templates[type];\r\n      if (!template.text.trim()) {\r\n        setError(`Template text is required for ${type}`);\r\n        return;\r\n      }\r\n\r\n      if (!businessApiKey) {\r\n        setError('Business API key is required but was not found');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n\r\n      // If there's an ID, update existing template, otherwise create new\r\n      const url = template.id && !asDefault ? `/templates/${template.id}` : '/templates';\r\n      const method = template.id && !asDefault ? 'PUT' : 'POST';\r\n\r\n      // Add query parameter with business_id as fallback\r\n      const urlWithParams = `${url}?business_id=${businessId}`;\r\n\r\n      // Map regular types to their default counterparts if saving as default\r\n      const templateType = asDefault ? `default_${type}` : type;\r\n\r\n      const templateData = {\r\n        template_name: `${stageName || 'New Stage'} - ${asDefault ? 'Default ' : ''}${type.replace(/_/g, ' ')}`,\r\n        template_text: template.text,\r\n        template_type: templateType,\r\n        business_id: businessId // Important: Include business_id\r\n      };\r\n\r\n      console.log(`Saving ${asDefault ? 'default ' : ''}${type} template:`, templateData);\r\n\r\n      const response = await fetch(urlWithParams, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}` // Use value from state\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(templateData),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`Failed to save ${asDefault ? 'default ' : ''}${type} template`);\r\n\r\n      const data = await response.json();\r\n      console.log(`Template ${asDefault ? 'default ' : ''}${type} saved successfully:`, data);\r\n      \r\n      // Only update the current template ID if not saving as default\r\n      if (!asDefault && !template.id) {\r\n        setTemplates(prev => ({\r\n          ...prev,\r\n          [type]: {\r\n            ...prev[type],\r\n            id: data.template_id\r\n          }\r\n        }));\r\n      }\r\n\r\n      setSuccess(`${asDefault ? 'Default ' : ''}${type} template saved successfully`);\r\n      \r\n      // After successful save, refresh the available templates\r\n      fetchAllTemplates();\r\n    } catch (err) {\r\n      console.error(`Error saving ${type} template:`, err);\r\n      setError(`Error saving template: ${err.message}`);\r\n    } finally {\r\n      setSavingTemplates(prev => ({ ...prev, [type]: false }));\r\n    }\r\n  };\r\n\r\n  // Then modify the handleSave function to include the business API key\r\n  const handleSave = async () => {\r\n    if (!stage) return;\r\n    \r\n    try {\r\n      // Validate stage name\r\n      if (!stageName.trim()) {\r\n        setError('Stage name is required');\r\n        return;\r\n      }\r\n      \r\n      // Ensure businessId is available\r\n      if (!businessId) {\r\n        setError('Business ID is required but was not found');\r\n        console.error('Business ID is missing', { businessId, locationBusinessId, queryBusinessId });\r\n        return;\r\n      }\r\n      \r\n      // Get business API key from cookies\r\n      const businessApiKey = document.cookie\r\n        .split('; ')\r\n        .find(row => row.startsWith('businessApiKey='))\r\n        ?.split('=')[1];\r\n      \r\n      if (!businessApiKey) {\r\n        setError('Business API key is required but was not found in cookies');\r\n        return;\r\n      }\r\n      \r\n      // Check if we need to save any templates first\r\n      const templatesSavingNeeded = [];\r\n      if (templates.stage_selection.text && !templates.stage_selection.id) {\r\n        templatesSavingNeeded.push('stage_selection');\r\n      }\r\n      if (templates.data_extraction.text && !templates.data_extraction.id) {\r\n        templatesSavingNeeded.push('data_extraction');\r\n      }\r\n      if (templates.response_generation.text && !templates.response_generation.id) {\r\n        templatesSavingNeeded.push('response_generation');\r\n      }\r\n      \r\n      // If any templates need saving, save them first\r\n      if (templatesSavingNeeded.length > 0) {\r\n        setSuccess(`Saving ${templatesSavingNeeded.length} template(s) first...`);\r\n        \r\n        // Save templates in sequence\r\n        for (const type of templatesSavingNeeded) {\r\n          await saveTemplate(type);\r\n        }\r\n      }\r\n      \r\n      // Prepare updated stage data\r\n      const updatedStage = {\r\n        ...stage,\r\n        stage_name: stageName,\r\n        stage_description: stageDescription,\r\n        business_id: businessId,\r\n        agent_id: agentId || null,\r\n        stage_type: 'conversation', // Required field\r\n        stage_selection_template_id: templates.stage_selection.id || null,\r\n        data_extraction_template_id: templates.data_extraction.id || null,\r\n        response_generation_template_id: templates.response_generation.id || null\r\n      };\r\n      \r\n      let response;\r\n      let method;\r\n      let url;\r\n      \r\n      // Determine if this is a create or update operation\r\n      if (stageId === 'new' || isNewStage) {\r\n        method = 'POST';\r\n        url = '/stages';\r\n      } else {\r\n        method = 'PUT';\r\n        url = `/stages/${stageId}`;\r\n      }\r\n      \r\n      // Add query parameter with business_id as fallback\r\n      url = `${url}?business_id=${businessId}`;\r\n      \r\n      console.log('Saving stage with data:', JSON.stringify(updatedStage, null, 2));\r\n      \r\n      // Call the API\r\n      response = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}` // Add Authorization header as backup\r\n        },\r\n        credentials: 'include', // This sends cookies\r\n        body: JSON.stringify(updatedStage),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || errorData.message || \r\n          (stageId === 'new' ? 'Failed to create stage' : 'Failed to update stage'));\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Stage saved successfully:', result);\r\n      \r\n      setSuccess(stageId === 'new' ? 'Stage created successfully' : 'Stage updated successfully');\r\n      \r\n      // Navigate back to stage manager after a short delay\r\n      setTimeout(() => {\r\n        let backUrl;\r\n        if (businessId && agentId) {\r\n          backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n        } else if (businessId) {\r\n          backUrl = `/stage-management/business_id=${businessId}`;\r\n        } else {\r\n          backUrl = '/stage-management';\r\n        }\r\n        navigate(backUrl);\r\n      }, 1500);\r\n    } catch (err) {\r\n      console.error('Error saving stage:', err);\r\n      setError(err.message || 'Failed to save stage');\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Navigate back to stage manager\r\n    let backUrl;\r\n    if (businessId && agentId) {\r\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n    } else if (businessId) {\r\n      backUrl = `/stage-management/business_id=${businessId}`;\r\n    } else {\r\n      backUrl = '/stage-management';\r\n    }\r\n    navigate(backUrl);\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3 }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={handleCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Business ID input section */}\r\n      {(showBusinessIdInput || !businessId || !businessApiKey) && (\r\n        <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n            Business Credentials Required\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business ID\"\r\n                value={businessId}\r\n                onChange={(e) => setBusinessId(e.target.value)}\r\n                placeholder=\"Enter your business ID\"\r\n                helperText=\"Required for saving templates and stages\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business API Key\"\r\n                value={businessApiKey}\r\n                onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                placeholder=\"Enter your business API key\"\r\n                helperText=\"Required for authentication\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  if (businessId && businessApiKey) {\r\n                    // Save to both localStorage and cookies\r\n                    localStorage.setItem('businessId', businessId);\r\n                    localStorage.setItem('businessApiKey', businessApiKey);\r\n                    document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n                    document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n                    \r\n                    setShowBusinessIdInput(false);\r\n                    setSuccess('Business credentials saved');\r\n                    fetchAllTemplates();\r\n                  } else {\r\n                    setError('Please enter both Business ID and API Key');\r\n                  }\r\n                }}\r\n              >\r\n                Save Credentials\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n      \r\n      {isLoading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {/* Basic stage information */}\r\n          <Box sx={{ mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Stage Information\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Name\"\r\n                  value={stageName}\r\n                  onChange={(e) => setStageName(e.target.value)}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Description\"\r\n                  value={stageDescription}\r\n                  onChange={(e) => setStageDescription(e.target.value)}\r\n                  multiline\r\n                  rows={2}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          \r\n          <Divider sx={{ my: 3 }} />\r\n          \r\n          {/* Template editing section */}\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Templates\r\n            </Typography>\r\n            \r\n            <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n              <Tab label=\"Stage Selection\" />\r\n              <Tab label=\"Data Extraction\" />\r\n              <Tab label=\"Response Generation\" />\r\n            </Tabs>\r\n            \r\n            {/* Stage Selection Template */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"stage-selection-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"stage-selection-template-label\"\r\n                    value={templates.stage_selection.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('stage_selection', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.stage_selection.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.stage_selection.id ? \r\n                      `Template ID: ${templates.stage_selection.id}` : \r\n                      'No template selected'}\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => confirmSaveTemplate('stage_selection')}\r\n                      disabled={!templates.stage_selection.text || savingTemplates.stage_selection}\r\n                      startIcon={savingTemplates.stage_selection ? <CircularProgress size={20} /> : null}\r\n                    >\r\n                      {savingTemplates.stage_selection ? 'Saving...' : 'Save Template'}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => confirmSaveTemplate('stage_selection', true)}\r\n                      disabled={!templates.stage_selection.text || savingTemplates.stage_selection}\r\n                    >\r\n                      Save as Default\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('stage_selection')}\r\n                    disabled={availableTemplates.default_stage_selection.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('stage_selection')}\r\n                    disabled={!templates.stage_selection.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'stage_selection' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.stage_selection.text || ''}\r\n                  onChange={(e) => handleTemplateChange('stage_selection', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.stage_selection.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.stage_selection.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Data Extraction Template */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"data-extraction-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"data-extraction-template-label\"\r\n                    value={templates.data_extraction.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('data_extraction', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.data_extraction.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.data_extraction.id ? \r\n                      `Template ID: ${templates.data_extraction.id}` : \r\n                      'No template selected'}\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => confirmSaveTemplate('data_extraction')}\r\n                      disabled={!templates.data_extraction.text || savingTemplates.data_extraction}\r\n                      startIcon={savingTemplates.data_extraction ? <CircularProgress size={20} /> : null}\r\n                    >\r\n                      {savingTemplates.data_extraction ? 'Saving...' : 'Save Template'}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => confirmSaveTemplate('data_extraction', true)}\r\n                      disabled={!templates.data_extraction.text || savingTemplates.data_extraction}\r\n                    >\r\n                      Save as Default\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('data_extraction')}\r\n                    disabled={availableTemplates.default_data_extraction.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('data_extraction')}\r\n                    disabled={!templates.data_extraction.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'data_extraction' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.data_extraction.text || ''}\r\n                  onChange={(e) => handleTemplateChange('data_extraction', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.data_extraction.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.data_extraction.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Response Generation Template */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"response-generation-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"response-generation-template-label\"\r\n                    value={templates.response_generation.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('response_generation', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.response_generation.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.response_generation.id ? \r\n                      `Template ID: ${templates.response_generation.id}` : \r\n                      'No template selected'}\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => confirmSaveTemplate('response_generation')}\r\n                      disabled={!templates.response_generation.text || savingTemplates.response_generation}\r\n                      startIcon={savingTemplates.response_generation ? <CircularProgress size={20} /> : null}\r\n                    >\r\n                      {savingTemplates.response_generation ? 'Saving...' : 'Save Template'}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => confirmSaveTemplate('response_generation', true)}\r\n                      disabled={!templates.response_generation.text || savingTemplates.response_generation}\r\n                    >\r\n                      Save as Default\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('response_generation')}\r\n                    disabled={availableTemplates.default_response_generation.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('response_generation')}\r\n                    disabled={!templates.response_generation.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'response_generation' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.response_generation.text || ''}\r\n                  onChange={(e) => handleTemplateChange('response_generation', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.response_generation.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.response_generation.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n          </Box>\r\n          \r\n          {/* Save button */}\r\n          <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleSave}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? <CircularProgress size={24} /> : (stageId === 'new' ? 'Create Stage' : 'Save Stage')}\r\n            </Button>\r\n          </Box>\r\n        </>\r\n      )}\r\n\r\n      {/* Template Save Confirmation Dialog */}\r\n      <Dialog open={showConfirmDialog} onClose={() => setShowConfirmDialog(false)}>\r\n        <DialogTitle>Save Template</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            {saveAsDefault\r\n              ? `Are you sure you want to save this as a default ${templateToSave?.replace(/_/g, ' ')} template?`\r\n              : templates[templateToSave]?.id \r\n                ? `Are you sure you want to update this ${templateToSave?.replace(/_/g, ' ')} template?` \r\n                : `Are you sure you want to create a new ${templateToSave?.replace(/_/g, ' ')} template?`}\r\n          </Typography>\r\n          {saveAsDefault && (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n              This will create a new default template that can be applied to any stage.\r\n            </Typography>\r\n          )}\r\n          {!templates[templateToSave]?.id && !saveAsDefault && (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n              A new template will be created in the database.\r\n            </Typography>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowConfirmDialog(false)}>Cancel</Button>\r\n          <Button onClick={handleConfirmSave} color=\"primary\" variant=\"contained\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StageEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}