{"ast":null,"code":"// Global request cache to prevent duplicate API calls\nconst apiCache = {\n  cache: {},\n  get: function (url) {\n    var _this$cache$url;\n    return (_this$cache$url = this.cache[url]) === null || _this$cache$url === void 0 ? void 0 : _this$cache$url.data;\n  },\n  set: function (url, data, ttl = 60000) {\n    // Default TTL: 1 minute\n    this.cache[url] = {\n      data,\n      expiry: Date.now() + ttl\n    };\n  },\n  isValid: function (url) {\n    const item = this.cache[url];\n    return item && item.expiry > Date.now();\n  },\n  clear: function () {\n    this.cache = {};\n  }\n};\n\n/**\r\n * Get stored credentials from localStorage\r\n * @returns {Object} Object containing businessId and businessApiKey\r\n */\nexport const getStoredCredentials = () => {\n  const businessId = localStorage.getItem('businessId');\n  const businessApiKey = localStorage.getItem('businessApiKey');\n  return {\n    businessId,\n    businessApiKey\n  };\n};\n\n/**\r\n * Cached fetch function with API key handling\r\n * @param {string} url - The URL to fetch\r\n * @param {Object} options - Fetch options\r\n * @param {number} ttl - Time to live in milliseconds\r\n * @returns {Promise<Response>} - The fetch response\r\n */\nexport const cachedFetch = async (url, options = {}, ttl = 300000) => {\n  const {\n    businessId,\n    businessApiKey\n  } = getStoredCredentials();\n\n  // Ensure URL ends with a trailing slash for POST/PUT requests\n  if ((options.method === 'POST' || options.method === 'PUT') && !url.endsWith('/')) {\n    url = `${url}/`;\n  }\n\n  // Add business_id to URL if not already present\n  if (businessId && !url.includes('business_id=')) {\n    const separator = url.includes('?') ? '&' : '?';\n    url = `${url}${separator}business_id=${businessId}`;\n  }\n\n  // Create cache key\n  const cacheKey = `${url}${options.method || 'GET'}${options.body ? JSON.stringify(options.body) : ''}`;\n\n  // Check cache for GET requests\n  if (options.method === 'GET' || !options.method) {\n    const cachedResponse = apiCache.get(cacheKey);\n    if (cachedResponse && apiCache.isValid(cacheKey)) {\n      console.log(`Using cached response for ${url}`);\n      return new Response(JSON.stringify(cachedResponse), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }\n\n  // Prepare headers\n  const headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...options.headers\n  };\n\n  // Add API key to headers if available\n  if (businessApiKey) {\n    headers['Authorization'] = `Bearer ${businessApiKey}`;\n  }\n\n  // Prepare fetch options\n  const fetchOptions = {\n    ...options,\n    headers,\n    credentials: 'include'\n  };\n\n  // Ensure body is stringified if it's an object\n  if (fetchOptions.body && typeof fetchOptions.body === 'object') {\n    fetchOptions.body = JSON.stringify(fetchOptions.body);\n  }\n  console.log(`Fetching ${url} with options:`, fetchOptions);\n\n  // Make the request\n  const response = await fetch(url, fetchOptions);\n\n  // Cache successful GET responses\n  if ((options.method === 'GET' || !options.method) && response.ok) {\n    const data = await response.clone().json().catch(() => null);\n    if (data) {\n      apiCache.set(cacheKey, data, ttl);\n    }\n  }\n  return response;\n};","map":{"version":3,"names":["apiCache","cache","get","url","_this$cache$url","data","set","ttl","expiry","Date","now","isValid","item","clear","getStoredCredentials","businessId","localStorage","getItem","businessApiKey","cachedFetch","options","method","endsWith","includes","separator","cacheKey","body","JSON","stringify","cachedResponse","console","log","Response","status","headers","fetchOptions","credentials","response","fetch","ok","clone","json","catch"],"sources":["C:/icmp_events_api/front-end/src/utils/fetchUtils.js"],"sourcesContent":["// Global request cache to prevent duplicate API calls\r\nconst apiCache = {\r\n  cache: {},\r\n  get: function(url) {\r\n    return this.cache[url]?.data;\r\n  },\r\n  set: function(url, data, ttl = 60000) { // Default TTL: 1 minute\r\n    this.cache[url] = {\r\n      data,\r\n      expiry: Date.now() + ttl\r\n    };\r\n  },\r\n  isValid: function(url) {\r\n    const item = this.cache[url];\r\n    return item && item.expiry > Date.now();\r\n  },\r\n  clear: function() {\r\n    this.cache = {};\r\n  }\r\n};\r\n\r\n/**\r\n * Get stored credentials from localStorage\r\n * @returns {Object} Object containing businessId and businessApiKey\r\n */\r\nexport const getStoredCredentials = () => {\r\n  const businessId = localStorage.getItem('businessId');\r\n  const businessApiKey = localStorage.getItem('businessApiKey');\r\n  return { businessId, businessApiKey };\r\n};\r\n\r\n/**\r\n * Cached fetch function with API key handling\r\n * @param {string} url - The URL to fetch\r\n * @param {Object} options - Fetch options\r\n * @param {number} ttl - Time to live in milliseconds\r\n * @returns {Promise<Response>} - The fetch response\r\n */\r\nexport const cachedFetch = async (url, options = {}, ttl = 300000) => {\r\n  const { businessId, businessApiKey } = getStoredCredentials();\r\n  \r\n  // Ensure URL ends with a trailing slash for POST/PUT requests\r\n  if ((options.method === 'POST' || options.method === 'PUT') && !url.endsWith('/')) {\r\n    url = `${url}/`;\r\n  }\r\n  \r\n  // Add business_id to URL if not already present\r\n  if (businessId && !url.includes('business_id=')) {\r\n    const separator = url.includes('?') ? '&' : '?';\r\n    url = `${url}${separator}business_id=${businessId}`;\r\n  }\r\n  \r\n  // Create cache key\r\n  const cacheKey = `${url}${options.method || 'GET'}${options.body ? JSON.stringify(options.body) : ''}`;\r\n  \r\n  // Check cache for GET requests\r\n  if (options.method === 'GET' || !options.method) {\r\n    const cachedResponse = apiCache.get(cacheKey);\r\n    if (cachedResponse && apiCache.isValid(cacheKey)) {\r\n      console.log(`Using cached response for ${url}`);\r\n      return new Response(JSON.stringify(cachedResponse), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Prepare headers\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    ...options.headers\r\n  };\r\n  \r\n  // Add API key to headers if available\r\n  if (businessApiKey) {\r\n    headers['Authorization'] = `Bearer ${businessApiKey}`;\r\n  }\r\n  \r\n  // Prepare fetch options\r\n  const fetchOptions = {\r\n    ...options,\r\n    headers,\r\n    credentials: 'include'\r\n  };\r\n  \r\n  // Ensure body is stringified if it's an object\r\n  if (fetchOptions.body && typeof fetchOptions.body === 'object') {\r\n    fetchOptions.body = JSON.stringify(fetchOptions.body);\r\n  }\r\n  \r\n  console.log(`Fetching ${url} with options:`, fetchOptions);\r\n  \r\n  // Make the request\r\n  const response = await fetch(url, fetchOptions);\r\n  \r\n  // Cache successful GET responses\r\n  if ((options.method === 'GET' || !options.method) && response.ok) {\r\n    const data = await response.clone().json().catch(() => null);\r\n    if (data) {\r\n      apiCache.set(cacheKey, data, ttl);\r\n    }\r\n  }\r\n  \r\n  return response;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}