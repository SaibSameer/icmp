{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000'; // Update as needed\n\n/**\r\n * Standardized handler for API responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\nexport const handleApiResponse = async response => {\n  // Handle non-OK responses\n  if (!response.ok) {\n    // Try to get detailed error from response\n    try {\n      const errorData = await response.json();\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\n    } catch (jsonError) {\n      // If response isn't valid JSON, use status text\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  // For successful responses, parse JSON or return empty object\n  try {\n    return await response.json();\n  } catch (error) {\n    // Some successful responses may not have a body (e.g., 204 No Content)\n    return {};\n  }\n};\nexport const apiService = {\n  // Businesses\n  getBusinessDetails: async businessId => {\n    const response = await fetch(`${API_BASE_URL}/businesses/${businessId}`, {\n      credentials: 'include'\n    });\n    if (!response.ok) throw new Error('Failed to fetch business details');\n    return response.json();\n  },\n  // Stages\n  getStages: async businessId => {\n    const response = await fetch(`${API_BASE_URL}/stages?business_id=${businessId}`, {\n      credentials: 'include'\n    });\n    if (!response.ok) throw new Error('Failed to fetch stages');\n    return response.json();\n  },\n  createStage: async stageData => {\n    const response = await fetch(`${API_BASE_URL}/stages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify(stageData)\n    });\n    if (!response.ok) throw new Error('Failed to create stage');\n    return response.json();\n  },\n  // Authentication\n  saveConfig: async config => {\n    const response = await fetch(`${API_BASE_URL}/api/save-config`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify(config)\n    });\n    if (!response.ok) throw new Error('Failed to save configuration');\n    return response.json();\n  }\n};\nexport const createTemplate = async templateData => {\n  // Implementation for creating a template\n  console.log('Creating template:', templateData);\n};\nexport const fetchTemplateDetails = async templateId => {\n  // Implementation for fetching template details\n  console.log('Fetching template details for ID:', templateId);\n};","map":{"version":3,"names":["API_BASE_URL","handleApiResponse","response","ok","errorData","json","Error","message","error","status","jsonError","statusText","apiService","getBusinessDetails","businessId","fetch","credentials","getStages","createStage","stageData","method","headers","body","JSON","stringify","saveConfig","config","createTemplate","templateData","console","log","fetchTemplateDetails","templateId"],"sources":["C:/icmp_events_api/front-end/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000'; // Update as needed\r\n\r\n/**\r\n * Standardized handler for API responses\r\n * @param {Response} response - The fetch Response object\r\n * @returns {Promise<any>} - The parsed response data\r\n * @throws {Error} - Throws an error with details from the response if not ok\r\n */\r\nexport const handleApiResponse = async (response) => {\r\n  // Handle non-OK responses\r\n  if (!response.ok) {\r\n    // Try to get detailed error from response\r\n    try {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || errorData.error || `API error: ${response.status}`);\r\n    } catch (jsonError) {\r\n      // If response isn't valid JSON, use status text\r\n      throw new Error(`API error: ${response.status} ${response.statusText}`);\r\n    }\r\n  }\r\n  \r\n  // For successful responses, parse JSON or return empty object\r\n  try {\r\n    return await response.json();\r\n  } catch (error) {\r\n    // Some successful responses may not have a body (e.g., 204 No Content)\r\n    return {};\r\n  }\r\n};\r\n\r\nexport const apiService = {\r\n  // Businesses\r\n  getBusinessDetails: async (businessId) => {\r\n    const response = await fetch(`${API_BASE_URL}/businesses/${businessId}`, {\r\n      credentials: 'include',\r\n    });\r\n    if (!response.ok) throw new Error('Failed to fetch business details');\r\n    return response.json();\r\n  },\r\n  \r\n  // Stages\r\n  getStages: async (businessId) => {\r\n    const response = await fetch(`${API_BASE_URL}/stages?business_id=${businessId}`, {\r\n      credentials: 'include',\r\n    });\r\n    if (!response.ok) throw new Error('Failed to fetch stages');\r\n    return response.json();\r\n  },\r\n  \r\n  createStage: async (stageData) => {\r\n    const response = await fetch(`${API_BASE_URL}/stages`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      credentials: 'include',\r\n      body: JSON.stringify(stageData),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to create stage');\r\n    return response.json();\r\n  },\r\n  \r\n  // Authentication\r\n  saveConfig: async (config) => {\r\n    const response = await fetch(`${API_BASE_URL}/api/save-config`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      credentials: 'include',\r\n      body: JSON.stringify(config),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to save configuration');\r\n    return response.json();\r\n  },\r\n};\r\n\r\nexport const createTemplate = async (templateData) => {\r\n  // Implementation for creating a template\r\n  console.log('Creating template:', templateData);\r\n};\r\n\r\nexport const fetchTemplateDetails = async (templateId) => {\r\n  // Implementation for fetching template details\r\n  console.log('Fetching template details for ID:', templateId);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}