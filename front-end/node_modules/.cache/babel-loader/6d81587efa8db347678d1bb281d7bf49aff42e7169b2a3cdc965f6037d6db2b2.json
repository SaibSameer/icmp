{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { isLoggedIn, getStoredCredentials, logout } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [businessId, setBusinessId] = useState('');\n  const [businessApiKey, setBusinessApiKey] = useState('');\n  useEffect(() => {\n    // Check if user is logged in on component mount\n    const loggedIn = isLoggedIn();\n    if (loggedIn) {\n      const {\n        userId,\n        businessId,\n        businessApiKey\n      } = getStoredCredentials();\n      setUserId(userId);\n      setBusinessId(businessId);\n      setBusinessApiKey(businessApiKey);\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const handleLogout = () => {\n    logout();\n    setUserId('');\n    setBusinessId('');\n    setBusinessApiKey('');\n    setIsAuthenticated(false);\n  };\n  const value = {\n    isAuthenticated,\n    userId,\n    businessId,\n    businessApiKey,\n    setUserId,\n    setBusinessId,\n    setBusinessApiKey,\n    setIsAuthenticated,\n    handleLogout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"k//Z7rIaMUSVLESxJ5yU+kJGGBE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","isLoggedIn","getStoredCredentials","logout","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userId","setUserId","businessId","setBusinessId","businessApiKey","setBusinessApiKey","loggedIn","handleLogout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { isLoggedIn, getStoredCredentials, logout } from '../services/authService';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userId, setUserId] = useState('');\r\n  const [businessId, setBusinessId] = useState('');\r\n  const [businessApiKey, setBusinessApiKey] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on component mount\r\n    const loggedIn = isLoggedIn();\r\n    if (loggedIn) {\r\n      const { userId, businessId, businessApiKey } = getStoredCredentials();\r\n      setUserId(userId);\r\n      setBusinessId(businessId);\r\n      setBusinessApiKey(businessApiKey);\r\n      setIsAuthenticated(true);\r\n    }\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    setUserId('');\r\n    setBusinessId('');\r\n    setBusinessApiKey('');\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    userId,\r\n    businessId,\r\n    businessApiKey,\r\n    setUserId,\r\n    setBusinessId,\r\n    setBusinessApiKey,\r\n    setIsAuthenticated,\r\n    handleLogout\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,UAAU,EAAEC,oBAAoB,EAAEC,MAAM,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnF,MAAMC,WAAW,gBAAGT,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMU,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,QAAQ,GAAGjB,UAAU,CAAC,CAAC;IAC7B,IAAIiB,QAAQ,EAAE;MACZ,MAAM;QAAEN,MAAM;QAAEE,UAAU;QAAEE;MAAe,CAAC,GAAGd,oBAAoB,CAAC,CAAC;MACrEW,SAAS,CAACD,MAAM,CAAC;MACjBG,aAAa,CAACD,UAAU,CAAC;MACzBG,iBAAiB,CAACD,cAAc,CAAC;MACjCL,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzBhB,MAAM,CAAC,CAAC;IACRU,SAAS,CAAC,EAAE,CAAC;IACbE,aAAa,CAAC,EAAE,CAAC;IACjBE,iBAAiB,CAAC,EAAE,CAAC;IACrBN,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMS,KAAK,GAAG;IACZV,eAAe;IACfE,MAAM;IACNE,UAAU;IACVE,cAAc;IACdH,SAAS;IACTE,aAAa;IACbE,iBAAiB;IACjBN,kBAAkB;IAClBQ;EACF,CAAC;EAED,oBAAOd,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAZ,QAAA,EAAEA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAChB,EAAA,CAvCWF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAyCzB,OAAO,MAAMoB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG/B,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAACuB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}