{"ast":null,"code":"// src/services/stageService.js\n\nimport { API_CONFIG } from '../config';\nimport { getAuthHeaders } from '../services/authService';\n\n// Helper to handle API responses (reuse or import)\nconst handleApiResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || errorData.error || `HTTP error ${response.status}`);\n  }\n  if (response.status === 204) {\n    return null;\n  }\n  // Assume the response is JSON if OK and not 204\n  return response.json();\n};\n\n// Fetch all stages for a given business\nexport const fetchStages = async businessId => {\n  if (!businessId) {\n    console.error(\"[Service Error] fetchStages requires a businessId.\");\n    throw new Error(\"Business ID is required to fetch stages.\");\n  }\n  console.log(`[Service] Fetching stages for business: ${businessId}`);\n\n  // Log the headers for debugging\n  const headers = getAuthHeaders();\n  console.log(\"[Service] Using headers:\", headers);\n  const response = await fetch(`/stages?business_id=${businessId}`, {\n    method: 'GET',\n    credentials: 'include',\n    // Send cookies\n    headers: headers\n  });\n\n  // Log the response status for debugging\n  console.log(`[Service] Response status: ${response.status}`);\n  return handleApiResponse(response);\n};\n\n// Create a new stage\nexport const createStage = async stageData => {\n  if (!stageData.business_id) {\n    console.error(\"[Service Error] createStage requires a business_id.\");\n    throw new Error(\"Business ID is required to create a stage.\");\n  }\n  console.log(`[Service] Creating stage for business: ${stageData.business_id}`);\n  console.log(`[Service] Stage data:`, stageData);\n\n  // Log the headers for debugging\n  const headers = getAuthHeaders();\n  console.log(\"[Service] Using headers:\", headers);\n  const response = await fetch(`/stages`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: headers,\n    body: JSON.stringify(stageData)\n  });\n\n  // Log the response status for debugging\n  console.log(`[Service] Response status: ${response.status}`);\n  return handleApiResponse(response);\n};\n\n// Fetch details for a specific stage\nexport const fetchStageDetails = async stageId => {\n  try {\n    const businessId = localStorage.getItem('businessId');\n    if (!businessId || !stageId) {\n      throw new Error('Missing required parameters: ' + (!businessId ? 'businessId ' : '') + (!stageId ? 'stageId' : ''));\n    }\n    console.log(`[Service] Fetching stage details for stage ${stageId} and business ${businessId}`);\n\n    // Log the headers for debugging\n    const headers = getAuthHeaders();\n    console.log(\"[Service] Using headers:\", headers);\n    const response = await fetch(`/stages/${stageId}?business_id=${businessId}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: headers\n    });\n\n    // Log the response status for debugging\n    console.log(`[Service] Response status: ${response.status}`);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.error('Error response:', errorData);\n      throw new Error(errorData.error || `Failed to fetch stage details (HTTP ${response.status})`);\n    }\n    const data = await response.json();\n    console.log('Received stage details:', data);\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid response format from server');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching stage details:', error);\n    throw error;\n  }\n};\n\n// Update an existing stage\nexport const updateStage = async (stageId, stageData) => {\n  if (!stageId || !stageData.business_id) {\n    throw new Error('Missing required parameters: stageId and business_id');\n  }\n  console.log(`[Service] Updating stage ${stageId} for business ${stageData.business_id}`);\n\n  // Log the headers for debugging\n  const headers = getAuthHeaders();\n  console.log(\"[Service] Using headers:\", headers);\n  const response = await fetch(`/stages/${stageId}`, {\n    method: 'PUT',\n    credentials: 'include',\n    headers: headers,\n    body: JSON.stringify(stageData)\n  });\n\n  // Log the response status for debugging\n  console.log(`[Service] Response status: ${response.status}`);\n  return handleApiResponse(response);\n};\n\n// Delete a stage\nexport const deleteStage = async (stageId, businessId) => {\n  if (!stageId || !businessId) {\n    throw new Error('Missing required parameters: stageId and businessId');\n  }\n  console.log(`[Service] Deleting stage ${stageId} for business ${businessId}`);\n\n  // Log the headers for debugging\n  const headers = getAuthHeaders();\n  console.log(\"[Service] Using headers:\", headers);\n  const response = await fetch(`/stages/${stageId}?business_id=${businessId}`, {\n    method: 'DELETE',\n    credentials: 'include',\n    headers: headers\n  });\n\n  // Log the response status for debugging\n  console.log(`[Service] Response status: ${response.status}`);\n  return handleApiResponse(response);\n};","map":{"version":3,"names":["API_CONFIG","getAuthHeaders","handleApiResponse","response","ok","errorData","json","catch","Error","message","error","status","fetchStages","businessId","console","log","headers","fetch","method","credentials","createStage","stageData","business_id","body","JSON","stringify","fetchStageDetails","stageId","localStorage","getItem","data","updateStage","deleteStage"],"sources":["C:/icmp_events_api/front-end/src/services/stageService.js"],"sourcesContent":["// src/services/stageService.js\r\n\r\nimport { API_CONFIG } from '../config';\r\nimport { getAuthHeaders } from '../services/authService';\r\n\r\n// Helper to handle API responses (reuse or import)\r\nconst handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({})); \r\n    throw new Error(errorData.message || errorData.error || `HTTP error ${response.status}`);\r\n  }\r\n  if (response.status === 204) {\r\n      return null; \r\n  }\r\n  // Assume the response is JSON if OK and not 204\r\n  return response.json(); \r\n};\r\n\r\n// Fetch all stages for a given business\r\nexport const fetchStages = async (businessId) => {\r\n  if (!businessId) {\r\n    console.error(\"[Service Error] fetchStages requires a businessId.\");\r\n    throw new Error(\"Business ID is required to fetch stages.\");\r\n  }\r\n  console.log(`[Service] Fetching stages for business: ${businessId}`);\r\n  \r\n  // Log the headers for debugging\r\n  const headers = getAuthHeaders();\r\n  console.log(\"[Service] Using headers:\", headers);\r\n  \r\n  const response = await fetch(`/stages?business_id=${businessId}`, {\r\n    method: 'GET',\r\n    credentials: 'include', // Send cookies\r\n    headers: headers\r\n  });\r\n  \r\n  // Log the response status for debugging\r\n  console.log(`[Service] Response status: ${response.status}`);\r\n  \r\n  return handleApiResponse(response);\r\n};\r\n\r\n// Create a new stage\r\nexport const createStage = async (stageData) => {\r\n  if (!stageData.business_id) {\r\n    console.error(\"[Service Error] createStage requires a business_id.\");\r\n    throw new Error(\"Business ID is required to create a stage.\");\r\n  }\r\n  \r\n  console.log(`[Service] Creating stage for business: ${stageData.business_id}`);\r\n  console.log(`[Service] Stage data:`, stageData);\r\n  \r\n  // Log the headers for debugging\r\n  const headers = getAuthHeaders();\r\n  console.log(\"[Service] Using headers:\", headers);\r\n  \r\n  const response = await fetch(`/stages`, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    headers: headers,\r\n    body: JSON.stringify(stageData)\r\n  });\r\n  \r\n  // Log the response status for debugging\r\n  console.log(`[Service] Response status: ${response.status}`);\r\n  \r\n  return handleApiResponse(response);\r\n};\r\n\r\n// Fetch details for a specific stage\r\nexport const fetchStageDetails = async (stageId) => {\r\n    try {\r\n        const businessId = localStorage.getItem('businessId');\r\n        if (!businessId || !stageId) {\r\n            throw new Error('Missing required parameters: ' + \r\n                (!businessId ? 'businessId ' : '') + \r\n                (!stageId ? 'stageId' : ''));\r\n        }\r\n\r\n        console.log(`[Service] Fetching stage details for stage ${stageId} and business ${businessId}`);\r\n        \r\n        // Log the headers for debugging\r\n        const headers = getAuthHeaders();\r\n        console.log(\"[Service] Using headers:\", headers);\r\n        \r\n        const response = await fetch(`/stages/${stageId}?business_id=${businessId}`, {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers: headers\r\n        });\r\n\r\n        // Log the response status for debugging\r\n        console.log(`[Service] Response status: ${response.status}`);\r\n        \r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({}));\r\n            console.error('Error response:', errorData);\r\n            throw new Error(errorData.error || `Failed to fetch stage details (HTTP ${response.status})`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Received stage details:', data);\r\n        \r\n        if (!data || typeof data !== 'object') {\r\n            throw new Error('Invalid response format from server');\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching stage details:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Update an existing stage\r\nexport const updateStage = async (stageId, stageData) => {\r\n    if (!stageId || !stageData.business_id) {\r\n        throw new Error('Missing required parameters: stageId and business_id');\r\n    }\r\n    \r\n    console.log(`[Service] Updating stage ${stageId} for business ${stageData.business_id}`);\r\n    \r\n    // Log the headers for debugging\r\n    const headers = getAuthHeaders();\r\n    console.log(\"[Service] Using headers:\", headers);\r\n    \r\n    const response = await fetch(`/stages/${stageId}`, {\r\n        method: 'PUT',\r\n        credentials: 'include',\r\n        headers: headers,\r\n        body: JSON.stringify(stageData)\r\n    });\r\n    \r\n    // Log the response status for debugging\r\n    console.log(`[Service] Response status: ${response.status}`);\r\n    \r\n    return handleApiResponse(response);\r\n};\r\n\r\n// Delete a stage\r\nexport const deleteStage = async (stageId, businessId) => {\r\n    if (!stageId || !businessId) {\r\n        throw new Error('Missing required parameters: stageId and businessId');\r\n    }\r\n    \r\n    console.log(`[Service] Deleting stage ${stageId} for business ${businessId}`);\r\n    \r\n    // Log the headers for debugging\r\n    const headers = getAuthHeaders();\r\n    console.log(\"[Service] Using headers:\", headers);\r\n    \r\n    const response = await fetch(`/stages/${stageId}?business_id=${businessId}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include',\r\n        headers: headers\r\n    });\r\n    \r\n    // Log the response status for debugging\r\n    console.log(`[Service] Response status: ${response.status}`);\r\n    \r\n    return handleApiResponse(response);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}