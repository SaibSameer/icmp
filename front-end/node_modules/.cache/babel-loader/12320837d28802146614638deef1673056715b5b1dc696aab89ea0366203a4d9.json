{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Box, Paper, Typography, TextField, Button, FormControl, InputLabel, MenuItem, Select, CircularProgress, Grid, Alert, Divider, Chip, IconButton, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions, Snackbar } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateEditor = () => {\n  _s();\n  const {\n    templateId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Parse query parameters\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n\n  // Get stored business ID and API key from localStorage\n  const storedBusinessId = localStorage.getItem('businessId');\n  const storedApiKey = localStorage.getItem('businessApiKey');\n\n  // State for template data\n  const [template, setTemplate] = useState({\n    template_id: templateId === 'new' ? '' : templateId,\n    template_name: '',\n    template_text: '',\n    template_type: 'stage_selection',\n    template_description: '',\n    variables: []\n  });\n\n  // State for UI\n  const [businessId, setBusinessId] = useState(queryBusinessId || storedBusinessId || '');\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [previewData, setPreviewData] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [isDefault, setIsDefault] = useState(false);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n\n  // Extract variables from template text\n  const extractVariables = text => {\n    if (!text) return [];\n    const matches = text.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n\n  // Update variables whenever template text changes\n  useEffect(() => {\n    const variables = extractVariables(template.template_text);\n    setTemplate(prev => ({\n      ...prev,\n      variables\n    }));\n  }, [template.template_text]);\n\n  // Fetch template data if editing an existing template\n  useEffect(() => {\n    const fetchTemplateData = async () => {\n      if (templateId === 'new') return;\n      if (!businessId) {\n        showSnackbar('Business ID is required to fetch template', 'error');\n        setShowBusinessIdInput(true);\n        return;\n      }\n      setIsLoading(true);\n      try {\n        var _data$template_type;\n        const response = await fetch(`/templates/${templateId}?business_id=${businessId}`, {\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          throw new Error(errorData.error || 'Failed to fetch template');\n        }\n        const data = await response.json();\n        console.log('Fetched template:', data);\n\n        // Check if this is a default template\n        const isDefaultTemplate = (_data$template_type = data.template_type) === null || _data$template_type === void 0 ? void 0 : _data$template_type.startsWith('default_');\n        setTemplate({\n          template_id: data.template_id,\n          template_name: data.template_name || '',\n          template_text: data.template_text || '',\n          template_type: isDefaultTemplate ? data.template_type.replace('default_', '') : data.template_type,\n          template_description: data.template_description || '',\n          variables: data.variables || extractVariables(data.template_text)\n        });\n        setIsDefault(isDefaultTemplate);\n      } catch (err) {\n        console.error('Error fetching template:', err);\n        showSnackbar(err.message, 'error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTemplateData();\n  }, [templateId, businessId]);\n\n  // Validate credentials\n  const validateCredentials = async () => {\n    if (!businessId || !businessApiKey) {\n      showSnackbar('Business ID and API Key are required', 'error');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n    try {\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Invalid business ID or API key');\n      }\n      return true;\n    } catch (err) {\n      console.error('Credential validation error:', err);\n      showSnackbar('Failed to validate credentials: ' + err.message, 'error');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n  };\n\n  // Save credentials\n  const saveCredentials = async () => {\n    if (!businessId || !businessApiKey) {\n      showSnackbar('Please enter both Business ID and API Key', 'error');\n      return;\n    }\n    const isValid = await validateCredentials();\n    if (isValid) {\n      // Save to both localStorage and cookies\n      localStorage.setItem('businessId', businessId);\n      localStorage.setItem('businessApiKey', businessApiKey);\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n      setShowBusinessIdInput(false);\n      showSnackbar('Business credentials validated and saved', 'success');\n    }\n  };\n\n  // Handle template preview\n  const handlePreview = async () => {\n    if (!template.template_text.trim()) {\n      showSnackbar('Template text is empty', 'error');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // Prepare preview request\n      const previewRequest = {\n        template_type: template.template_type,\n        template_text: template.template_text,\n        context: {\n          conversation_history: [{\n            role: \"user\",\n            content: \"I'm interested in your products\"\n          }, {\n            role: \"assistant\",\n            content: \"I'd be happy to tell you about our products. What type are you interested in?\"\n          }],\n          extracted_data: {\n            customer_name: \"John Doe\",\n            product_interest: \"shoes\",\n            budget: \"$100\"\n          }\n        }\n      };\n\n      // Try multiple possible endpoints (for compatibility)\n      const endpoints = ['/templates/preview', '/templates/render', '/render_template', '/api/templates/preview'];\n      let response = null;\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\n          response = await fetch(endpoint, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(previewRequest)\n          });\n          if (response.ok) break;\n        } catch (endpointErr) {\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\n        }\n      }\n\n      // If we got a successful response from any endpoint\n      if (response && response.ok) {\n        const data = await response.json();\n        console.log('Preview response:', data);\n        setPreviewData(data);\n        setShowPreview(true);\n      } else {\n        // Local fallback preview if no endpoint worked\n        console.log('All endpoint attempts failed, using local preview');\n\n        // Simple variable replacement for demonstration\n        let previewText = template.template_text;\n\n        // Replace variables with sample values\n        template.variables.forEach(variable => {\n          const sampleValue = `[Sample ${variable}]`;\n          previewText = previewText.replace(new RegExp(`{${variable}}`, 'g'), sampleValue);\n        });\n        setPreviewData({\n          rendered_text: previewText\n        });\n        setShowPreview(true);\n      }\n    } catch (err) {\n      console.error('Error generating preview:', err);\n      showSnackbar(`Failed to generate preview: ${err.message}`, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save template\n  const saveTemplate = async () => {\n    if (!template.template_name.trim()) {\n      showSnackbar('Template name is required', 'error');\n      return;\n    }\n    if (!template.template_text.trim()) {\n      showSnackbar('Template text is required', 'error');\n      return;\n    }\n    if (!businessId) {\n      showSnackbar('Business ID is required', 'error');\n      setShowBusinessIdInput(true);\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // Determine if we're creating a new template or updating an existing one\n      const isNewTemplate = !template.template_id || template.template_id === 'new';\n\n      // Prepare template data\n      const templateData = {\n        template_name: template.template_name,\n        template_text: template.template_text,\n        template_type: isDefault ? `default_${template.template_type}` : template.template_type,\n        business_id: businessId,\n        template_description: template.template_description,\n        variables: template.variables\n      };\n      console.log('Saving template data:', templateData);\n\n      // Construct URL and method\n      const method = isNewTemplate ? 'POST' : 'PUT';\n      const url = isNewTemplate ? '/templates' : `/templates/${template.template_id}`;\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(templateData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || 'Failed to save template');\n      }\n      const result = await response.json();\n      console.log('Template saved successfully:', result);\n\n      // Update template ID if this was a new template\n      if (isNewTemplate && result.template_id) {\n        setTemplate(prev => ({\n          ...prev,\n          template_id: result.template_id\n        }));\n\n        // Update URL without reloading\n        const newUrl = `/template-editor/${result.template_id}?business_id=${businessId}`;\n        window.history.pushState({}, '', newUrl);\n      }\n      showSnackbar('Template saved successfully', 'success');\n    } catch (err) {\n      console.error('Error saving template:', err);\n      showSnackbar(err.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Navigate back to templates list\n  const handleCancel = () => {\n    navigate('/templates');\n  };\n\n  // Handle template type change\n  const handleTemplateTypeChange = e => {\n    setTemplate(prev => ({\n      ...prev,\n      template_type: e.target.value\n    }));\n  };\n\n  // Snackbar functions\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3,\n      maxWidth: 1200,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: template.template_id && template.template_id !== 'new' ? 'Edit Template' : 'Create New Template'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: saveTemplate,\n        disabled: isLoading || !template.template_name.trim() || !template.template_text.trim(),\n        startIcon: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 67\n        }, this),\n        children: \"Save Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), (showBusinessIdInput || !businessId || !businessApiKey) && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        border: '1px dashed',\n        borderColor: 'warning.main',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"warning.main\",\n        gutterBottom: true,\n        children: \"Business Credentials Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business ID\",\n            value: businessId,\n            onChange: e => setBusinessId(e.target.value),\n            placeholder: \"Enter your business ID\",\n            helperText: \"Required for saving templates\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business API Key\",\n            value: businessApiKey,\n            onChange: e => setBusinessApiKey(e.target.value),\n            placeholder: \"Enter your business API key\",\n            helperText: \"Required for authentication\",\n            type: \"password\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: saveCredentials,\n            fullWidth: true,\n            sx: {\n              height: '56px'\n            },\n            children: \"Validate & Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Template Name\",\n          value: template.template_name,\n          onChange: e => setTemplate(prev => ({\n            ...prev,\n            template_name: e.target.value\n          })),\n          required: true,\n          error: !template.template_name.trim(),\n          helperText: !template.template_name.trim() ? \"Template name is required\" : \"\",\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"template-type-label\",\n            children: \"Template Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"template-type-label\",\n            value: template.template_type,\n            label: \"Template Type\",\n            onChange: handleTemplateTypeChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"stage_selection\",\n              children: \"Stage Selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"data_extraction\",\n              children: \"Data Extraction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"response_generation\",\n              children: \"Response Generation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Template Description\",\n          value: template.template_description,\n          onChange: e => setTemplate(prev => ({\n            ...prev,\n            template_description: e.target.value\n          })),\n          multiline: true,\n          rows: 2,\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"default-template-label\",\n            children: \"Save as Default Template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"default-template-label\",\n            value: isDefault ? 'yes' : 'no',\n            label: \"Save as Default Template\",\n            onChange: e => setIsDefault(e.target.value === 'yes'),\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"no\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"yes\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            sx: {\n              mr: 2\n            },\n            children: \"Detected Variables:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1\n            },\n            children: template.variables.length > 0 ? template.variables.map((variable, index) => /*#__PURE__*/_jsxDEV(Chip, {\n              label: variable,\n              color: \"primary\",\n              variant: \"outlined\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"No variables detected. Use \", variable_name, \" syntax.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: handlePreview,\n          disabled: !template.template_text.trim(),\n          startIcon: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 24\n          }, this),\n          sx: {\n            mt: 2\n          },\n          children: \"Preview Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: [\"Template Text\", /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Use {variable_name} syntax to create variables in your template\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 16,\n          value: template.template_text,\n          onChange: e => setTemplate(prev => ({\n            ...prev,\n            template_text: e.target.value\n          })),\n          placeholder: \"Enter your template text here. Use {variable_name} syntax for variables.\",\n          sx: {\n            mb: 2,\n            fontFamily: 'monospace',\n            '& .MuiInputBase-input': {\n              fontFamily: 'monospace'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showPreview,\n      onClose: () => setShowPreview(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Template Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: [\"Template: \", template.template_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle2\",\n          color: \"text.secondary\",\n          gutterBottom: true,\n          children: [\"Type: \", template.template_type, \" \", isDefault && '(Default)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            bgcolor: 'background.paper',\n            p: 2,\n            borderRadius: 1,\n            border: '1px solid',\n            borderColor: 'divider',\n            maxHeight: '500px',\n            overflow: 'auto',\n            fontFamily: 'monospace',\n            whiteSpace: 'pre-wrap',\n            wordBreak: 'break-word'\n          },\n          children: (previewData === null || previewData === void 0 ? void 0 : previewData.rendered_text) || (previewData === null || previewData === void 0 ? void 0 : previewData.template_text) || 'No preview data available'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowPreview(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: snackbar.severity,\n        sx: {\n          width: '100%'\n        },\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n_s(TemplateEditor, \"HBZKrLmx/2v9owO9kAIO0YWvskI=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = TemplateEditor;\nexport default TemplateEditor;\nvar _c;\n$RefreshReg$(_c, \"TemplateEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Box","Paper","Typography","TextField","Button","FormControl","InputLabel","MenuItem","Select","CircularProgress","Grid","Alert","Divider","Chip","IconButton","Tooltip","Dialog","DialogTitle","DialogContent","DialogActions","Snackbar","SaveIcon","PreviewIcon","ArrowBackIcon","HelpOutlineIcon","VisibilityIcon","jsxDEV","_jsxDEV","TemplateEditor","_s","templateId","navigate","location","queryParams","URLSearchParams","search","queryBusinessId","get","storedBusinessId","localStorage","getItem","storedApiKey","template","setTemplate","template_id","template_name","template_text","template_type","template_description","variables","businessId","setBusinessId","businessApiKey","setBusinessApiKey","showBusinessIdInput","setShowBusinessIdInput","isLoading","setIsLoading","error","setError","success","setSuccess","previewData","setPreviewData","showPreview","setShowPreview","isDefault","setIsDefault","snackbar","setSnackbar","open","message","severity","extractVariables","text","matches","match","map","slice","prev","fetchTemplateData","showSnackbar","_data$template_type","response","fetch","credentials","ok","errorData","json","catch","Error","data","console","log","isDefaultTemplate","startsWith","replace","err","validateCredentials","method","headers","saveCredentials","isValid","setItem","document","cookie","handlePreview","trim","previewRequest","context","conversation_history","role","content","extracted_data","customer_name","product_interest","budget","endpoints","endpoint","body","JSON","stringify","endpointErr","warn","previewText","forEach","variable","sampleValue","RegExp","rendered_text","saveTemplate","isNewTemplate","templateData","business_id","url","result","newUrl","window","history","pushState","handleCancel","handleTemplateTypeChange","e","target","value","handleCloseSnackbar","sx","p","mb","maxWidth","mx","children","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","flexGrow","color","disabled","startIcon","size","border","borderColor","borderRadius","gutterBottom","container","spacing","item","xs","md","fullWidth","label","onChange","placeholder","helperText","required","type","height","id","labelId","multiline","rows","flexWrap","gap","length","index","variable_name","mt","title","fontSize","fontFamily","onClose","my","bgcolor","maxHeight","overflow","whiteSpace","wordBreak","autoHideDuration","anchorOrigin","vertical","horizontal","width","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Grid,\r\n  Alert,\r\n  Divider,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nconst TemplateEditor = () => {\r\n  const { templateId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Parse query parameters\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  \r\n  // Get stored business ID and API key from localStorage\r\n  const storedBusinessId = localStorage.getItem('businessId');\r\n  const storedApiKey = localStorage.getItem('businessApiKey');\r\n  \r\n  // State for template data\r\n  const [template, setTemplate] = useState({\r\n    template_id: templateId === 'new' ? '' : templateId,\r\n    template_name: '',\r\n    template_text: '',\r\n    template_type: 'stage_selection',\r\n    template_description: '',\r\n    variables: []\r\n  });\r\n  \r\n  // State for UI\r\n  const [businessId, setBusinessId] = useState(queryBusinessId || storedBusinessId || '');\r\n  const [businessApiKey, setBusinessApiKey] = useState(storedApiKey || '');\r\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId || !businessApiKey);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [isDefault, setIsDefault] = useState(false);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  \r\n  // Extract variables from template text\r\n  const extractVariables = (text) => {\r\n    if (!text) return [];\r\n    const matches = text.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n  \r\n  // Update variables whenever template text changes\r\n  useEffect(() => {\r\n    const variables = extractVariables(template.template_text);\r\n    setTemplate(prev => ({\r\n      ...prev,\r\n      variables\r\n    }));\r\n  }, [template.template_text]);\r\n  \r\n  // Fetch template data if editing an existing template\r\n  useEffect(() => {\r\n    const fetchTemplateData = async () => {\r\n      if (templateId === 'new') return;\r\n      \r\n      if (!businessId) {\r\n        showSnackbar('Business ID is required to fetch template', 'error');\r\n        setShowBusinessIdInput(true);\r\n        return;\r\n      }\r\n      \r\n      setIsLoading(true);\r\n      try {\r\n        const response = await fetch(`/templates/${templateId}?business_id=${businessId}`, {\r\n          credentials: 'include'\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json().catch(() => ({}));\r\n          throw new Error(errorData.error || 'Failed to fetch template');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Fetched template:', data);\r\n        \r\n        // Check if this is a default template\r\n        const isDefaultTemplate = data.template_type?.startsWith('default_');\r\n        \r\n        setTemplate({\r\n          template_id: data.template_id,\r\n          template_name: data.template_name || '',\r\n          template_text: data.template_text || '',\r\n          template_type: isDefaultTemplate \r\n            ? data.template_type.replace('default_', '') \r\n            : data.template_type,\r\n          template_description: data.template_description || '',\r\n          variables: data.variables || extractVariables(data.template_text)\r\n        });\r\n        \r\n        setIsDefault(isDefaultTemplate);\r\n        \r\n      } catch (err) {\r\n        console.error('Error fetching template:', err);\r\n        showSnackbar(err.message, 'error');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchTemplateData();\r\n  }, [templateId, businessId]);\r\n  \r\n  // Validate credentials\r\n  const validateCredentials = async () => {\r\n    if (!businessId || !businessApiKey) {\r\n      showSnackbar('Business ID and API Key are required', 'error');\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}`\r\n        },\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Invalid business ID or API key');\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Credential validation error:', err);\r\n      showSnackbar('Failed to validate credentials: ' + err.message, 'error');\r\n      setShowBusinessIdInput(true);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Save credentials\r\n  const saveCredentials = async () => {\r\n    if (!businessId || !businessApiKey) {\r\n      showSnackbar('Please enter both Business ID and API Key', 'error');\r\n      return;\r\n    }\r\n    \r\n    const isValid = await validateCredentials();\r\n    if (isValid) {\r\n      // Save to both localStorage and cookies\r\n      localStorage.setItem('businessId', businessId);\r\n      localStorage.setItem('businessApiKey', businessApiKey);\r\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n      \r\n      setShowBusinessIdInput(false);\r\n      showSnackbar('Business credentials validated and saved', 'success');\r\n    }\r\n  };\r\n  \r\n  // Handle template preview\r\n  const handlePreview = async () => {\r\n    if (!template.template_text.trim()) {\r\n      showSnackbar('Template text is empty', 'error');\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      // Prepare preview request\r\n      const previewRequest = {\r\n        template_type: template.template_type,\r\n        template_text: template.template_text,\r\n        context: {\r\n          conversation_history: [\r\n            { role: \"user\", content: \"I'm interested in your products\" },\r\n            { role: \"assistant\", content: \"I'd be happy to tell you about our products. What type are you interested in?\" }\r\n          ],\r\n          extracted_data: {\r\n            customer_name: \"John Doe\",\r\n            product_interest: \"shoes\",\r\n            budget: \"$100\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Try multiple possible endpoints (for compatibility)\r\n      const endpoints = [\r\n        '/templates/preview',\r\n        '/templates/render',\r\n        '/render_template',\r\n        '/api/templates/preview'\r\n      ];\r\n      \r\n      let response = null;\r\n      for (const endpoint of endpoints) {\r\n        try {\r\n          console.log(`Trying to preview template with endpoint: ${endpoint}`);\r\n          \r\n          response = await fetch(endpoint, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify(previewRequest),\r\n          });\r\n          \r\n          if (response.ok) break;\r\n        } catch (endpointErr) {\r\n          console.warn(`Endpoint ${endpoint} failed:`, endpointErr);\r\n        }\r\n      }\r\n      \r\n      // If we got a successful response from any endpoint\r\n      if (response && response.ok) {\r\n        const data = await response.json();\r\n        console.log('Preview response:', data);\r\n        setPreviewData(data);\r\n        setShowPreview(true);\r\n      } else {\r\n        // Local fallback preview if no endpoint worked\r\n        console.log('All endpoint attempts failed, using local preview');\r\n        \r\n        // Simple variable replacement for demonstration\r\n        let previewText = template.template_text;\r\n        \r\n        // Replace variables with sample values\r\n        template.variables.forEach(variable => {\r\n          const sampleValue = `[Sample ${variable}]`;\r\n          previewText = previewText.replace(new RegExp(`{${variable}}`, 'g'), sampleValue);\r\n        });\r\n        \r\n        setPreviewData({ rendered_text: previewText });\r\n        setShowPreview(true);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating preview:', err);\r\n      showSnackbar(`Failed to generate preview: ${err.message}`, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Save template\r\n  const saveTemplate = async () => {\r\n    if (!template.template_name.trim()) {\r\n      showSnackbar('Template name is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (!template.template_text.trim()) {\r\n      showSnackbar('Template text is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (!businessId) {\r\n      showSnackbar('Business ID is required', 'error');\r\n      setShowBusinessIdInput(true);\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      // Determine if we're creating a new template or updating an existing one\r\n      const isNewTemplate = !template.template_id || template.template_id === 'new';\r\n      \r\n      // Prepare template data\r\n      const templateData = {\r\n        template_name: template.template_name,\r\n        template_text: template.template_text,\r\n        template_type: isDefault ? `default_${template.template_type}` : template.template_type,\r\n        business_id: businessId,\r\n        template_description: template.template_description,\r\n        variables: template.variables\r\n      };\r\n      \r\n      console.log('Saving template data:', templateData);\r\n      \r\n      // Construct URL and method\r\n      const method = isNewTemplate ? 'POST' : 'PUT';\r\n      const url = isNewTemplate ? '/templates' : `/templates/${template.template_id}`;\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(templateData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || errorData.message || 'Failed to save template');\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Template saved successfully:', result);\r\n      \r\n      // Update template ID if this was a new template\r\n      if (isNewTemplate && result.template_id) {\r\n        setTemplate(prev => ({\r\n          ...prev,\r\n          template_id: result.template_id\r\n        }));\r\n        \r\n        // Update URL without reloading\r\n        const newUrl = `/template-editor/${result.template_id}?business_id=${businessId}`;\r\n        window.history.pushState({}, '', newUrl);\r\n      }\r\n      \r\n      showSnackbar('Template saved successfully', 'success');\r\n    } catch (err) {\r\n      console.error('Error saving template:', err);\r\n      showSnackbar(err.message, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Navigate back to templates list\r\n  const handleCancel = () => {\r\n    navigate('/templates');\r\n  };\r\n  \r\n  // Handle template type change\r\n  const handleTemplateTypeChange = (e) => {\r\n    setTemplate(prev => ({\r\n      ...prev,\r\n      template_type: e.target.value\r\n    }));\r\n  };\r\n  \r\n  // Snackbar functions\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n  \r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar(prev => ({\r\n      ...prev,\r\n      open: false\r\n    }));\r\n  };\r\n  \r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={handleCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {template.template_id && template.template_id !== 'new' ? 'Edit Template' : 'Create New Template'}\r\n        </Typography>\r\n        <Box sx={{ flexGrow: 1 }} />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={saveTemplate}\r\n          disabled={isLoading || !template.template_name.trim() || !template.template_text.trim()}\r\n          startIcon={isLoading ? <CircularProgress size={24} /> : <SaveIcon />}\r\n        >\r\n          Save Template\r\n        </Button>\r\n      </Box>\r\n      \r\n      {/* Business ID input section */}\r\n      {(showBusinessIdInput || !businessId || !businessApiKey) && (\r\n        <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n            Business Credentials Required\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={5}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business ID\"\r\n                value={businessId}\r\n                onChange={(e) => setBusinessId(e.target.value)}\r\n                placeholder=\"Enter your business ID\"\r\n                helperText=\"Required for saving templates\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={5}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business API Key\"\r\n                value={businessApiKey}\r\n                onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                placeholder=\"Enter your business API key\"\r\n                helperText=\"Required for authentication\"\r\n                type=\"password\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"\r\n                onClick={saveCredentials}\r\n                fullWidth\r\n                sx={{ height: '56px' }}\r\n              >\r\n                Validate & Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n      \r\n      {/* Template information section */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Template Name\"\r\n            value={template.template_name}\r\n            onChange={(e) => setTemplate(prev => ({ ...prev, template_name: e.target.value }))}\r\n            required\r\n            error={!template.template_name.trim()}\r\n            helperText={!template.template_name.trim() ? \"Template name is required\" : \"\"}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          \r\n          <FormControl fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"template-type-label\">Template Type</InputLabel>\r\n            <Select\r\n              labelId=\"template-type-label\"\r\n              value={template.template_type}\r\n              label=\"Template Type\"\r\n              onChange={handleTemplateTypeChange}\r\n            >\r\n              <MenuItem value=\"stage_selection\">Stage Selection</MenuItem>\r\n              <MenuItem value=\"data_extraction\">Data Extraction</MenuItem>\r\n              <MenuItem value=\"response_generation\">Response Generation</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          <TextField\r\n            fullWidth\r\n            label=\"Template Description\"\r\n            value={template.template_description}\r\n            onChange={(e) => setTemplate(prev => ({ ...prev, template_description: e.target.value }))}\r\n            multiline\r\n            rows={2}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          \r\n          <FormControl fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"default-template-label\">Save as Default Template</InputLabel>\r\n            <Select\r\n              labelId=\"default-template-label\"\r\n              value={isDefault ? 'yes' : 'no'}\r\n              label=\"Save as Default Template\"\r\n              onChange={(e) => setIsDefault(e.target.value === 'yes')}\r\n            >\r\n              <MenuItem value=\"no\">No</MenuItem>\r\n              <MenuItem value=\"yes\">Yes</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"subtitle1\" sx={{ mr: 2 }}>\r\n              Detected Variables:\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n              {template.variables.length > 0 ? (\r\n                template.variables.map((variable, index) => (\r\n                  <Chip \r\n                    key={index} \r\n                    label={variable} \r\n                    color=\"primary\" \r\n                    variant=\"outlined\" \r\n                  />\r\n                ))\r\n              ) : (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  No variables detected. Use {variable_name} syntax.\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={handlePreview}\r\n            disabled={!template.template_text.trim()}\r\n            startIcon={<VisibilityIcon />}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Preview Template\r\n          </Button>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={6}>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Template Text\r\n            <Tooltip title=\"Use {variable_name} syntax to create variables in your template\">\r\n              <IconButton size=\"small\">\r\n                <HelpOutlineIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={16}\r\n            value={template.template_text}\r\n            onChange={(e) => setTemplate(prev => ({ ...prev, template_text: e.target.value }))}\r\n            placeholder=\"Enter your template text here. Use {variable_name} syntax for variables.\"\r\n            sx={{ \r\n              mb: 2, \r\n              fontFamily: 'monospace',\r\n              '& .MuiInputBase-input': {\r\n                fontFamily: 'monospace',\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      \r\n      {/* Preview Dialog */}\r\n      <Dialog \r\n        open={showPreview} \r\n        onClose={() => setShowPreview(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Template Preview</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Template: {template.template_name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n            Type: {template.template_type} {isDefault && '(Default)'}\r\n          </Typography>\r\n          <Divider sx={{ my: 2 }} />\r\n          <Box sx={{ \r\n            bgcolor: 'background.paper', \r\n            p: 2, \r\n            borderRadius: 1,\r\n            border: '1px solid',\r\n            borderColor: 'divider',\r\n            maxHeight: '500px',\r\n            overflow: 'auto',\r\n            fontFamily: 'monospace',\r\n            whiteSpace: 'pre-wrap',\r\n            wordBreak: 'break-word'\r\n          }}>\r\n            {previewData?.rendered_text || previewData?.template_text || 'No preview data available'}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowPreview(false)}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TemplateEditor; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AACtE,SACEC,GAAG,EACHC,KAAK,EACLC,UAAU,EACVC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,UAAU,EACVC,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,QAAQ,QACH,eAAe;AACtB,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,cAAc,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAW,CAAC,GAAGjC,SAAS,CAAC,CAAC;EAClC,MAAMkC,QAAQ,GAAGjC,WAAW,CAAC,CAAC;EAC9B,MAAMkC,QAAQ,GAAGjC,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMkC,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,eAAe,GAAGH,WAAW,CAACI,GAAG,CAAC,aAAa,CAAC;;EAEtD;EACA,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC3D,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;;EAE3D;EACA,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAGjD,QAAQ,CAAC;IACvCkD,WAAW,EAAEd,UAAU,KAAK,KAAK,GAAG,EAAE,GAAGA,UAAU;IACnDe,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,iBAAiB;IAChCC,oBAAoB,EAAE,EAAE;IACxBC,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGzD,QAAQ,CAAC0C,eAAe,IAAIE,gBAAgB,IAAI,EAAE,CAAC;EACvF,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAG3D,QAAQ,CAAC+C,YAAY,IAAI,EAAE,CAAC;EACxE,MAAM,CAACa,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG7D,QAAQ,CAAC,CAACwD,UAAU,IAAI,CAACE,cAAc,CAAC;EAC9F,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgE,KAAK,EAAEC,QAAQ,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkE,OAAO,EAAEC,UAAU,CAAC,GAAGnE,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoE,WAAW,EAAEC,cAAc,CAAC,GAAGrE,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACsE,WAAW,EAAEC,cAAc,CAAC,GAAGvE,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACwE,SAAS,EAAEC,YAAY,CAAC,GAAGzE,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0E,QAAQ,EAAEC,WAAW,CAAC,GAAG3E,QAAQ,CAAC;IACvC4E,IAAI,EAAE,KAAK;IACXC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IACpB,MAAMC,OAAO,GAAGD,IAAI,CAACE,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE;IAChD,OAAOD,OAAO,CAACE,GAAG,CAACD,KAAK,IAAIA,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC;;EAED;EACAnF,SAAS,CAAC,MAAM;IACd,MAAMsD,SAAS,GAAGwB,gBAAgB,CAAC/B,QAAQ,CAACI,aAAa,CAAC;IAC1DH,WAAW,CAACoC,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP9B;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACP,QAAQ,CAACI,aAAa,CAAC,CAAC;;EAE5B;EACAnD,SAAS,CAAC,MAAM;IACd,MAAMqF,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAIlD,UAAU,KAAK,KAAK,EAAE;MAE1B,IAAI,CAACoB,UAAU,EAAE;QACf+B,YAAY,CAAC,2CAA2C,EAAE,OAAO,CAAC;QAClE1B,sBAAsB,CAAC,IAAI,CAAC;QAC5B;MACF;MAEAE,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QAAA,IAAAyB,mBAAA;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAActD,UAAU,gBAAgBoB,UAAU,EAAE,EAAE;UACjFmC,WAAW,EAAE;QACf,CAAC,CAAC;QAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;UACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAAC7B,KAAK,IAAI,0BAA0B,CAAC;QAChE;QAEA,MAAMiC,IAAI,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,IAAI,CAAC;;QAEtC;QACA,MAAMG,iBAAiB,IAAAZ,mBAAA,GAAGS,IAAI,CAAC5C,aAAa,cAAAmC,mBAAA,uBAAlBA,mBAAA,CAAoBa,UAAU,CAAC,UAAU,CAAC;QAEpEpD,WAAW,CAAC;UACVC,WAAW,EAAE+C,IAAI,CAAC/C,WAAW;UAC7BC,aAAa,EAAE8C,IAAI,CAAC9C,aAAa,IAAI,EAAE;UACvCC,aAAa,EAAE6C,IAAI,CAAC7C,aAAa,IAAI,EAAE;UACvCC,aAAa,EAAE+C,iBAAiB,GAC5BH,IAAI,CAAC5C,aAAa,CAACiD,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,GAC1CL,IAAI,CAAC5C,aAAa;UACtBC,oBAAoB,EAAE2C,IAAI,CAAC3C,oBAAoB,IAAI,EAAE;UACrDC,SAAS,EAAE0C,IAAI,CAAC1C,SAAS,IAAIwB,gBAAgB,CAACkB,IAAI,CAAC7C,aAAa;QAClE,CAAC,CAAC;QAEFqB,YAAY,CAAC2B,iBAAiB,CAAC;MAEjC,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZL,OAAO,CAAClC,KAAK,CAAC,0BAA0B,EAAEuC,GAAG,CAAC;QAC9ChB,YAAY,CAACgB,GAAG,CAAC1B,OAAO,EAAE,OAAO,CAAC;MACpC,CAAC,SAAS;QACRd,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDuB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAAClD,UAAU,EAAEoB,UAAU,CAAC,CAAC;;EAE5B;EACA,MAAMgD,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI,CAAChD,UAAU,IAAI,CAACE,cAAc,EAAE;MAClC6B,YAAY,CAAC,sCAAsC,EAAE,OAAO,CAAC;MAC7D1B,sBAAsB,CAAC,IAAI,CAAC;MAC5B,OAAO,KAAK;IACd;IAEA,IAAI;MACF,MAAM4B,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgDlC,UAAU,EAAE,EAAE;QACzFiD,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE,kBAAkB;UAC5B,eAAe,EAAE,UAAUhD,cAAc;QAC3C,CAAC;QACDiC,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAII,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZL,OAAO,CAAClC,KAAK,CAAC,8BAA8B,EAAEuC,GAAG,CAAC;MAClDhB,YAAY,CAAC,kCAAkC,GAAGgB,GAAG,CAAC1B,OAAO,EAAE,OAAO,CAAC;MACvEhB,sBAAsB,CAAC,IAAI,CAAC;MAC5B,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAM8C,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAACnD,UAAU,IAAI,CAACE,cAAc,EAAE;MAClC6B,YAAY,CAAC,2CAA2C,EAAE,OAAO,CAAC;MAClE;IACF;IAEA,MAAMqB,OAAO,GAAG,MAAMJ,mBAAmB,CAAC,CAAC;IAC3C,IAAII,OAAO,EAAE;MACX;MACA/D,YAAY,CAACgE,OAAO,CAAC,YAAY,EAAErD,UAAU,CAAC;MAC9CX,YAAY,CAACgE,OAAO,CAAC,gBAAgB,EAAEnD,cAAc,CAAC;MACtDoD,QAAQ,CAACC,MAAM,GAAG,cAAcvD,UAAU,yBAAyB;MACnEsD,QAAQ,CAACC,MAAM,GAAG,kBAAkBrD,cAAc,yBAAyB;MAE3EG,sBAAsB,CAAC,KAAK,CAAC;MAC7B0B,YAAY,CAAC,0CAA0C,EAAE,SAAS,CAAC;IACrE;EACF,CAAC;;EAED;EACA,MAAMyB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAChE,QAAQ,CAACI,aAAa,CAAC6D,IAAI,CAAC,CAAC,EAAE;MAClC1B,YAAY,CAAC,wBAAwB,EAAE,OAAO,CAAC;MAC/C;IACF;IAEAxB,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACA,MAAMmD,cAAc,GAAG;QACrB7D,aAAa,EAAEL,QAAQ,CAACK,aAAa;QACrCD,aAAa,EAAEJ,QAAQ,CAACI,aAAa;QACrC+D,OAAO,EAAE;UACPC,oBAAoB,EAAE,CACpB;YAAEC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAE;UAAkC,CAAC,EAC5D;YAAED,IAAI,EAAE,WAAW;YAAEC,OAAO,EAAE;UAAgF,CAAC,CAChH;UACDC,cAAc,EAAE;YACdC,aAAa,EAAE,UAAU;YACzBC,gBAAgB,EAAE,OAAO;YACzBC,MAAM,EAAE;UACV;QACF;MACF,CAAC;;MAED;MACA,MAAMC,SAAS,GAAG,CAChB,oBAAoB,EACpB,mBAAmB,EACnB,kBAAkB,EAClB,wBAAwB,CACzB;MAED,IAAIlC,QAAQ,GAAG,IAAI;MACnB,KAAK,MAAMmC,QAAQ,IAAID,SAAS,EAAE;QAChC,IAAI;UACFzB,OAAO,CAACC,GAAG,CAAC,6CAA6CyB,QAAQ,EAAE,CAAC;UAEpEnC,QAAQ,GAAG,MAAMC,KAAK,CAACkC,QAAQ,EAAE;YAC/BnB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDf,WAAW,EAAE,SAAS;YACtBkC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,cAAc;UACrC,CAAC,CAAC;UAEF,IAAIzB,QAAQ,CAACG,EAAE,EAAE;QACnB,CAAC,CAAC,OAAOoC,WAAW,EAAE;UACpB9B,OAAO,CAAC+B,IAAI,CAAC,YAAYL,QAAQ,UAAU,EAAEI,WAAW,CAAC;QAC3D;MACF;;MAEA;MACA,IAAIvC,QAAQ,IAAIA,QAAQ,CAACG,EAAE,EAAE;QAC3B,MAAMK,IAAI,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,IAAI,CAAC;QACtC5B,cAAc,CAAC4B,IAAI,CAAC;QACpB1B,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,MAAM;QACL;QACA2B,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;;QAEhE;QACA,IAAI+B,WAAW,GAAGlF,QAAQ,CAACI,aAAa;;QAExC;QACAJ,QAAQ,CAACO,SAAS,CAAC4E,OAAO,CAACC,QAAQ,IAAI;UACrC,MAAMC,WAAW,GAAG,WAAWD,QAAQ,GAAG;UAC1CF,WAAW,GAAGA,WAAW,CAAC5B,OAAO,CAAC,IAAIgC,MAAM,CAAC,IAAIF,QAAQ,GAAG,EAAE,GAAG,CAAC,EAAEC,WAAW,CAAC;QAClF,CAAC,CAAC;QAEFhE,cAAc,CAAC;UAAEkE,aAAa,EAAEL;QAAY,CAAC,CAAC;QAC9C3D,cAAc,CAAC,IAAI,CAAC;MACtB;IACF,CAAC,CAAC,OAAOgC,GAAG,EAAE;MACZL,OAAO,CAAClC,KAAK,CAAC,2BAA2B,EAAEuC,GAAG,CAAC;MAC/ChB,YAAY,CAAC,+BAA+BgB,GAAG,CAAC1B,OAAO,EAAE,EAAE,OAAO,CAAC;IACrE,CAAC,SAAS;MACRd,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMyE,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACxF,QAAQ,CAACG,aAAa,CAAC8D,IAAI,CAAC,CAAC,EAAE;MAClC1B,YAAY,CAAC,2BAA2B,EAAE,OAAO,CAAC;MAClD;IACF;IAEA,IAAI,CAACvC,QAAQ,CAACI,aAAa,CAAC6D,IAAI,CAAC,CAAC,EAAE;MAClC1B,YAAY,CAAC,2BAA2B,EAAE,OAAO,CAAC;MAClD;IACF;IAEA,IAAI,CAAC/B,UAAU,EAAE;MACf+B,YAAY,CAAC,yBAAyB,EAAE,OAAO,CAAC;MAChD1B,sBAAsB,CAAC,IAAI,CAAC;MAC5B;IACF;IAEAE,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACA,MAAM0E,aAAa,GAAG,CAACzF,QAAQ,CAACE,WAAW,IAAIF,QAAQ,CAACE,WAAW,KAAK,KAAK;;MAE7E;MACA,MAAMwF,YAAY,GAAG;QACnBvF,aAAa,EAAEH,QAAQ,CAACG,aAAa;QACrCC,aAAa,EAAEJ,QAAQ,CAACI,aAAa;QACrCC,aAAa,EAAEmB,SAAS,GAAG,WAAWxB,QAAQ,CAACK,aAAa,EAAE,GAAGL,QAAQ,CAACK,aAAa;QACvFsF,WAAW,EAAEnF,UAAU;QACvBF,oBAAoB,EAAEN,QAAQ,CAACM,oBAAoB;QACnDC,SAAS,EAAEP,QAAQ,CAACO;MACtB,CAAC;MAED2C,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEuC,YAAY,CAAC;;MAElD;MACA,MAAMjC,MAAM,GAAGgC,aAAa,GAAG,MAAM,GAAG,KAAK;MAC7C,MAAMG,GAAG,GAAGH,aAAa,GAAG,YAAY,GAAG,cAAczF,QAAQ,CAACE,WAAW,EAAE;MAE/E,MAAMuC,QAAQ,GAAG,MAAMC,KAAK,CAACkD,GAAG,EAAE;QAChCnC,MAAM;QACNC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDf,WAAW,EAAE,SAAS;QACtBkC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,YAAY;MACnC,CAAC,CAAC;MAEF,IAAI,CAACjD,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAAC7B,KAAK,IAAI6B,SAAS,CAAChB,OAAO,IAAI,yBAAyB,CAAC;MACpF;MAEA,MAAMgE,MAAM,GAAG,MAAMpD,QAAQ,CAACK,IAAI,CAAC,CAAC;MACpCI,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE0C,MAAM,CAAC;;MAEnD;MACA,IAAIJ,aAAa,IAAII,MAAM,CAAC3F,WAAW,EAAE;QACvCD,WAAW,CAACoC,IAAI,KAAK;UACnB,GAAGA,IAAI;UACPnC,WAAW,EAAE2F,MAAM,CAAC3F;QACtB,CAAC,CAAC,CAAC;;QAEH;QACA,MAAM4F,MAAM,GAAG,oBAAoBD,MAAM,CAAC3F,WAAW,gBAAgBM,UAAU,EAAE;QACjFuF,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAEH,MAAM,CAAC;MAC1C;MAEAvD,YAAY,CAAC,6BAA6B,EAAE,SAAS,CAAC;IACxD,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZL,OAAO,CAAClC,KAAK,CAAC,wBAAwB,EAAEuC,GAAG,CAAC;MAC5ChB,YAAY,CAACgB,GAAG,CAAC1B,OAAO,EAAE,OAAO,CAAC;IACpC,CAAC,SAAS;MACRd,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMmF,YAAY,GAAGA,CAAA,KAAM;IACzB7G,QAAQ,CAAC,YAAY,CAAC;EACxB,CAAC;;EAED;EACA,MAAM8G,wBAAwB,GAAIC,CAAC,IAAK;IACtCnG,WAAW,CAACoC,IAAI,KAAK;MACnB,GAAGA,IAAI;MACPhC,aAAa,EAAE+F,CAAC,CAACC,MAAM,CAACC;IAC1B,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAM/D,YAAY,GAAGA,CAACV,OAAO,EAAEC,QAAQ,GAAG,SAAS,KAAK;IACtDH,WAAW,CAAC;MACVC,IAAI,EAAE,IAAI;MACVC,OAAO;MACPC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyE,mBAAmB,GAAGA,CAAA,KAAM;IAChC5E,WAAW,CAACU,IAAI,KAAK;MACnB,GAAGA,IAAI;MACPT,IAAI,EAAE;IACR,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACE3C,OAAA,CAAC1B,KAAK;IAACiJ,EAAE,EAAE;MAAEC,CAAC,EAAE,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,EAAE,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAErD5H,OAAA,CAAC3B,GAAG;MAACkJ,EAAE,EAAE;QAAEM,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE,QAAQ;QAAEL,EAAE,EAAE;MAAE,CAAE;MAAAG,QAAA,gBACxD5H,OAAA,CAACb,UAAU;QAAC4I,OAAO,EAAEd,YAAa;QAACM,EAAE,EAAE;UAAES,EAAE,EAAE;QAAE,CAAE;QAAAJ,QAAA,eAC/C5H,OAAA,CAACJ,aAAa;UAAAqI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC,eACbpI,OAAA,CAACzB,UAAU;QAAC8J,OAAO,EAAC,IAAI;QAAAT,QAAA,EACrB7G,QAAQ,CAACE,WAAW,IAAIF,QAAQ,CAACE,WAAW,KAAK,KAAK,GAAG,eAAe,GAAG;MAAqB;QAAAgH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvF,CAAC,eACbpI,OAAA,CAAC3B,GAAG;QAACkJ,EAAE,EAAE;UAAEe,QAAQ,EAAE;QAAE;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5BpI,OAAA,CAACvB,MAAM;QACL4J,OAAO,EAAC,WAAW;QACnBE,KAAK,EAAC,SAAS;QACfR,OAAO,EAAExB,YAAa;QACtBiC,QAAQ,EAAE3G,SAAS,IAAI,CAACd,QAAQ,CAACG,aAAa,CAAC8D,IAAI,CAAC,CAAC,IAAI,CAACjE,QAAQ,CAACI,aAAa,CAAC6D,IAAI,CAAC,CAAE;QACxFyD,SAAS,EAAE5G,SAAS,gBAAG7B,OAAA,CAAClB,gBAAgB;UAAC4J,IAAI,EAAE;QAAG;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGpI,OAAA,CAACN,QAAQ;UAAAuI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QAAAR,QAAA,EACtE;MAED;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAGL,CAACzG,mBAAmB,IAAI,CAACJ,UAAU,IAAI,CAACE,cAAc,kBACrDzB,OAAA,CAAC3B,GAAG;MAACkJ,EAAE,EAAE;QAAEE,EAAE,EAAE,CAAC;QAAED,CAAC,EAAE,CAAC;QAAEmB,MAAM,EAAE,YAAY;QAAEC,WAAW,EAAE,cAAc;QAAEC,YAAY,EAAE;MAAE,CAAE;MAAAjB,QAAA,gBAC3F5H,OAAA,CAACzB,UAAU;QAAC8J,OAAO,EAAC,WAAW;QAACE,KAAK,EAAC,cAAc;QAACO,YAAY;QAAAlB,QAAA,EAAC;MAElE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbpI,OAAA,CAACjB,IAAI;QAACgK,SAAS;QAACC,OAAO,EAAE,CAAE;QAAApB,QAAA,gBACzB5H,OAAA,CAACjB,IAAI;UAACkK,IAAI;UAACC,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAAAvB,QAAA,eACvB5H,OAAA,CAACxB,SAAS;YACR4K,SAAS;YACTC,KAAK,EAAC,aAAa;YACnBhC,KAAK,EAAE9F,UAAW;YAClB+H,QAAQ,EAAGnC,CAAC,IAAK3F,aAAa,CAAC2F,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAC/CkC,WAAW,EAAC,wBAAwB;YACpCC,UAAU,EAAC,+BAA+B;YAC1CC,QAAQ;UAAA;YAAAxB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;UAACkK,IAAI;UAACC,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAAAvB,QAAA,eACvB5H,OAAA,CAACxB,SAAS;YACR4K,SAAS;YACTC,KAAK,EAAC,kBAAkB;YACxBhC,KAAK,EAAE5F,cAAe;YACtB6H,QAAQ,EAAGnC,CAAC,IAAKzF,iBAAiB,CAACyF,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YACnDkC,WAAW,EAAC,6BAA6B;YACzCC,UAAU,EAAC,6BAA6B;YACxCE,IAAI,EAAC,UAAU;YACfD,QAAQ;UAAA;YAAAxB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eACPpI,OAAA,CAACjB,IAAI;UAACkK,IAAI;UAACC,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAAAvB,QAAA,eACvB5H,OAAA,CAACvB,MAAM;YACL4J,OAAO,EAAC,WAAW;YACnBE,KAAK,EAAC,SAAS;YACfR,OAAO,EAAErD,eAAgB;YACzB0E,SAAS;YACT7B,EAAE,EAAE;cAAEoC,MAAM,EAAE;YAAO,CAAE;YAAA/B,QAAA,EACxB;UAED;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CACN,eAGDpI,OAAA,CAACjB,IAAI;MAACgK,SAAS;MAACC,OAAO,EAAE,CAAE;MAAApB,QAAA,gBACzB5H,OAAA,CAACjB,IAAI;QAACkK,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAAvB,QAAA,gBACvB5H,OAAA,CAACxB,SAAS;UACR4K,SAAS;UACTC,KAAK,EAAC,eAAe;UACrBhC,KAAK,EAAEtG,QAAQ,CAACG,aAAc;UAC9BoI,QAAQ,EAAGnC,CAAC,IAAKnG,WAAW,CAACoC,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAElC,aAAa,EAAEiG,CAAC,CAACC,MAAM,CAACC;UAAM,CAAC,CAAC,CAAE;UACnFoC,QAAQ;UACR1H,KAAK,EAAE,CAAChB,QAAQ,CAACG,aAAa,CAAC8D,IAAI,CAAC,CAAE;UACtCwE,UAAU,EAAE,CAACzI,QAAQ,CAACG,aAAa,CAAC8D,IAAI,CAAC,CAAC,GAAG,2BAA2B,GAAG,EAAG;UAC9EuC,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eAEFpI,OAAA,CAACtB,WAAW;UAAC0K,SAAS;UAAC7B,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE,CAAE;UAAAG,QAAA,gBACnC5H,OAAA,CAACrB,UAAU;YAACiL,EAAE,EAAC,qBAAqB;YAAAhC,QAAA,EAAC;UAAa;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC/DpI,OAAA,CAACnB,MAAM;YACLgL,OAAO,EAAC,qBAAqB;YAC7BxC,KAAK,EAAEtG,QAAQ,CAACK,aAAc;YAC9BiI,KAAK,EAAC,eAAe;YACrBC,QAAQ,EAAEpC,wBAAyB;YAAAU,QAAA,gBAEnC5H,OAAA,CAACpB,QAAQ;cAACyI,KAAK,EAAC,iBAAiB;cAAAO,QAAA,EAAC;YAAe;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAU,CAAC,eAC5DpI,OAAA,CAACpB,QAAQ;cAACyI,KAAK,EAAC,iBAAiB;cAAAO,QAAA,EAAC;YAAe;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAU,CAAC,eAC5DpI,OAAA,CAACpB,QAAQ;cAACyI,KAAK,EAAC,qBAAqB;cAAAO,QAAA,EAAC;YAAmB;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAU,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAEdpI,OAAA,CAACxB,SAAS;UACR4K,SAAS;UACTC,KAAK,EAAC,sBAAsB;UAC5BhC,KAAK,EAAEtG,QAAQ,CAACM,oBAAqB;UACrCiI,QAAQ,EAAGnC,CAAC,IAAKnG,WAAW,CAACoC,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE/B,oBAAoB,EAAE8F,CAAC,CAACC,MAAM,CAACC;UAAM,CAAC,CAAC,CAAE;UAC1FyC,SAAS;UACTC,IAAI,EAAE,CAAE;UACRxC,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eAEFpI,OAAA,CAACtB,WAAW;UAAC0K,SAAS;UAAC7B,EAAE,EAAE;YAAEE,EAAE,EAAE;UAAE,CAAE;UAAAG,QAAA,gBACnC5H,OAAA,CAACrB,UAAU;YAACiL,EAAE,EAAC,wBAAwB;YAAAhC,QAAA,EAAC;UAAwB;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC7EpI,OAAA,CAACnB,MAAM;YACLgL,OAAO,EAAC,wBAAwB;YAChCxC,KAAK,EAAE9E,SAAS,GAAG,KAAK,GAAG,IAAK;YAChC8G,KAAK,EAAC,0BAA0B;YAChCC,QAAQ,EAAGnC,CAAC,IAAK3E,YAAY,CAAC2E,CAAC,CAACC,MAAM,CAACC,KAAK,KAAK,KAAK,CAAE;YAAAO,QAAA,gBAExD5H,OAAA,CAACpB,QAAQ;cAACyI,KAAK,EAAC,IAAI;cAAAO,QAAA,EAAC;YAAE;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAU,CAAC,eAClCpI,OAAA,CAACpB,QAAQ;cAACyI,KAAK,EAAC,KAAK;cAAAO,QAAA,EAAC;YAAG;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAU,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAEdpI,OAAA,CAAC3B,GAAG;UAACkJ,EAAE,EAAE;YAAEM,OAAO,EAAE,MAAM;YAAEC,UAAU,EAAE,QAAQ;YAAEL,EAAE,EAAE;UAAE,CAAE;UAAAG,QAAA,gBACxD5H,OAAA,CAACzB,UAAU;YAAC8J,OAAO,EAAC,WAAW;YAACd,EAAE,EAAE;cAAES,EAAE,EAAE;YAAE,CAAE;YAAAJ,QAAA,EAAC;UAE/C;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbpI,OAAA,CAAC3B,GAAG;YAACkJ,EAAE,EAAE;cAAEM,OAAO,EAAE,MAAM;cAAEmC,QAAQ,EAAE,MAAM;cAAEC,GAAG,EAAE;YAAE,CAAE;YAAArC,QAAA,EACpD7G,QAAQ,CAACO,SAAS,CAAC4I,MAAM,GAAG,CAAC,GAC5BnJ,QAAQ,CAACO,SAAS,CAAC4B,GAAG,CAAC,CAACiD,QAAQ,EAAEgE,KAAK,kBACrCnK,OAAA,CAACd,IAAI;cAEHmK,KAAK,EAAElD,QAAS;cAChBoC,KAAK,EAAC,SAAS;cACfF,OAAO,EAAC;YAAU,GAHb8B,KAAK;cAAAlC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIX,CACF,CAAC,gBAEFpI,OAAA,CAACzB,UAAU;cAAC8J,OAAO,EAAC,OAAO;cAACE,KAAK,EAAC,gBAAgB;cAAAX,QAAA,GAAC,6BACtB,EAACwC,aAAa,EAAC,UAC5C;YAAA;cAAAnC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY;UACb;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENpI,OAAA,CAACvB,MAAM;UACL4J,OAAO,EAAC,UAAU;UAClBE,KAAK,EAAC,SAAS;UACfR,OAAO,EAAEhD,aAAc;UACvByD,QAAQ,EAAE,CAACzH,QAAQ,CAACI,aAAa,CAAC6D,IAAI,CAAC,CAAE;UACzCyD,SAAS,eAAEzI,OAAA,CAACF,cAAc;YAAAmI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAC9Bb,EAAE,EAAE;YAAE8C,EAAE,EAAE;UAAE,CAAE;UAAAzC,QAAA,EACf;QAED;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAEPpI,OAAA,CAACjB,IAAI;QAACkK,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAAvB,QAAA,gBACvB5H,OAAA,CAACzB,UAAU;UAAC8J,OAAO,EAAC,WAAW;UAACS,YAAY;UAAAlB,QAAA,GAAC,eAE3C,eAAA5H,OAAA,CAACZ,OAAO;YAACkL,KAAK,EAAC,iEAAiE;YAAA1C,QAAA,eAC9E5H,OAAA,CAACb,UAAU;cAACuJ,IAAI,EAAC,OAAO;cAAAd,QAAA,eACtB5H,OAAA,CAACH,eAAe;gBAAC0K,QAAQ,EAAC;cAAO;gBAAAtC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACbpI,OAAA,CAACxB,SAAS;UACR4K,SAAS;UACTU,SAAS;UACTC,IAAI,EAAE,EAAG;UACT1C,KAAK,EAAEtG,QAAQ,CAACI,aAAc;UAC9BmI,QAAQ,EAAGnC,CAAC,IAAKnG,WAAW,CAACoC,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEjC,aAAa,EAAEgG,CAAC,CAACC,MAAM,CAACC;UAAM,CAAC,CAAC,CAAE;UACnFkC,WAAW,EAAC,0EAA0E;UACtFhC,EAAE,EAAE;YACFE,EAAE,EAAE,CAAC;YACL+C,UAAU,EAAE,WAAW;YACvB,uBAAuB,EAAE;cACvBA,UAAU,EAAE;YACd;UACF;QAAE;UAAAvC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGPpI,OAAA,CAACX,MAAM;MACLsD,IAAI,EAAEN,WAAY;MAClBoI,OAAO,EAAEA,CAAA,KAAMnI,cAAc,CAAC,KAAK,CAAE;MACrCoF,QAAQ,EAAC,IAAI;MACb0B,SAAS;MAAAxB,QAAA,gBAET5H,OAAA,CAACV,WAAW;QAAAsI,QAAA,EAAC;MAAgB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAC3CpI,OAAA,CAACT,aAAa;QAAAqI,QAAA,gBACZ5H,OAAA,CAACzB,UAAU;UAAC8J,OAAO,EAAC,WAAW;UAACS,YAAY;UAAAlB,QAAA,GAAC,YACjC,EAAC7G,QAAQ,CAACG,aAAa;QAAA;UAAA+G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,eACbpI,OAAA,CAACzB,UAAU;UAAC8J,OAAO,EAAC,WAAW;UAACE,KAAK,EAAC,gBAAgB;UAACO,YAAY;UAAAlB,QAAA,GAAC,QAC5D,EAAC7G,QAAQ,CAACK,aAAa,EAAC,GAAC,EAACmB,SAAS,IAAI,WAAW;QAAA;UAAA0F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC,eACbpI,OAAA,CAACf,OAAO;UAACsI,EAAE,EAAE;YAAEmD,EAAE,EAAE;UAAE;QAAE;UAAAzC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC1BpI,OAAA,CAAC3B,GAAG;UAACkJ,EAAE,EAAE;YACPoD,OAAO,EAAE,kBAAkB;YAC3BnD,CAAC,EAAE,CAAC;YACJqB,YAAY,EAAE,CAAC;YACfF,MAAM,EAAE,WAAW;YACnBC,WAAW,EAAE,SAAS;YACtBgC,SAAS,EAAE,OAAO;YAClBC,QAAQ,EAAE,MAAM;YAChBL,UAAU,EAAE,WAAW;YACvBM,UAAU,EAAE,UAAU;YACtBC,SAAS,EAAE;UACb,CAAE;UAAAnD,QAAA,EACC,CAAAzF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEmE,aAAa,MAAInE,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEhB,aAAa,KAAI;QAA2B;UAAA8G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC,eAChBpI,OAAA,CAACR,aAAa;QAAAoI,QAAA,eACZ5H,OAAA,CAACvB,MAAM;UAACsJ,OAAO,EAAEA,CAAA,KAAMzF,cAAc,CAAC,KAAK,CAAE;UAAAsF,QAAA,EAAC;QAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAGTpI,OAAA,CAACP,QAAQ;MACPkD,IAAI,EAAEF,QAAQ,CAACE,IAAK;MACpBqI,gBAAgB,EAAE,IAAK;MACvBP,OAAO,EAAEnD,mBAAoB;MAC7B2D,YAAY,EAAE;QAAEC,QAAQ,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAQ,CAAE;MAAAvD,QAAA,eAEvD5H,OAAA,CAAChB,KAAK;QAACyL,OAAO,EAAEnD,mBAAoB;QAACzE,QAAQ,EAAEJ,QAAQ,CAACI,QAAS;QAAC0E,EAAE,EAAE;UAAE6D,KAAK,EAAE;QAAO,CAAE;QAAAxD,QAAA,EACrFnF,QAAQ,CAACG;MAAO;QAAAqF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEZ,CAAC;AAAClI,EAAA,CAjkBID,cAAc;EAAA,QACK/B,SAAS,EACfC,WAAW,EACXC,WAAW;AAAA;AAAAiN,EAAA,GAHxBpL,cAAc;AAmkBpB,eAAeA,cAAc;AAAC,IAAAoL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}