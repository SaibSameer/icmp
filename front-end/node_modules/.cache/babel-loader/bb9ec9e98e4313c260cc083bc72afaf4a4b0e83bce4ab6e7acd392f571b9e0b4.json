{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Box, Paper, Typography, TextField, Button, Tabs, Tab, Grid, Alert, Snackbar, IconButton, Tooltip, FormControl, InputLabel, MenuItem, Select, CircularProgress, Divider, Chip, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\n// TabPanel component for the tabs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `tabpanel-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      padding: '20px 0'\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nconst StageEditor = () => {\n  _s();\n  var _document$cookie$spli, _templates$templateTo, _templates$templateTo2;\n  const {\n    stageId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Get businessId and agentId from location state or URL query parameters\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Location state values as fallback\n  const {\n    businessId: locationBusinessId,\n    agentId: locationAgentId,\n    isNewStage\n  } = location.state || {};\n\n  // Check cookies for business ID as another fallback\n  const cookieBusinessId = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('businessId='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n\n  // Use query parameters first, then location state, then cookies\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || cookieBusinessId || '');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId);\n  const agentId = queryAgentId || locationAgentId;\n  const [stage, setStage] = useState(null);\n  const [stageName, setStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [tabValue, setTabValue] = useState(0);\n  const [templates, setTemplates] = useState({\n    stage_selection: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    data_extraction: {\n      id: '',\n      text: '',\n      type: ''\n    },\n    response_generation: {\n      id: '',\n      text: '',\n      type: ''\n    }\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: [],\n    default_stage_selection: [],\n    default_data_extraction: [],\n    default_response_generation: []\n  });\n  const [variables, setVariables] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [previewData, setPreviewData] = useState(null);\n\n  // Add template saving loading states\n  const [savingTemplates, setSavingTemplates] = useState({\n    stage_selection: false,\n    data_extraction: false,\n    response_generation: false\n  });\n\n  // Add template save confirmation dialog\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [templateToSave, setTemplateToSave] = useState('');\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\n\n  // Function to open the confirmation dialog\n  const confirmSaveTemplate = (type, asDefault = false) => {\n    setTemplateToSave(type);\n    setSaveAsDefault(asDefault);\n    setShowConfirmDialog(true);\n  };\n\n  // Function to handle dialog confirm\n  const handleConfirmSave = async () => {\n    setShowConfirmDialog(false);\n    if (templateToSave) {\n      await saveTemplate(templateToSave, saveAsDefault);\n    }\n  };\n\n  // Fetch stage data when the component mounts\n  useEffect(() => {\n    if (businessId) {\n      // Store businessId in cookie for future use\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n    }\n    if (stageId && stageId !== 'new') {\n      fetchStage(stageId);\n    } else if (isNewStage) {\n      // For new stage, set up defaults but don't fetch\n      setStage({\n        stage_name: '',\n        stage_description: '',\n        business_id: businessId,\n        agent_id: agentId,\n        stage_selection_template_id: null,\n        data_extraction_template_id: null,\n        response_generation_template_id: null,\n        stage_config: {\n          order: 0\n        }\n      });\n    }\n\n    // Only fetch available templates if we have a business ID\n    if (businessId) {\n      fetchAllTemplates();\n    }\n  }, [stageId, businessId, agentId, isNewStage]);\n\n  // Fetch specific stage data\n  const fetchStage = async id => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/stages/${id}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch stage');\n      const data = await response.json();\n      setStage(data);\n      setStageName(data.stage_name || '');\n      setStageDescription(data.stage_description || '');\n\n      // For each template ID in the stage, fetch the template content\n      if (data.stage_selection_template_id) {\n        fetchTemplate(data.stage_selection_template_id, 'stage_selection');\n      }\n      if (data.data_extraction_template_id) {\n        fetchTemplate(data.data_extraction_template_id, 'data_extraction');\n      }\n      if (data.response_generation_template_id) {\n        fetchTemplate(data.response_generation_template_id, 'response_generation');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all available templates on component mount\n  const fetchAllTemplates = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch all templates\n      const response = await fetch('/templates', {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch templates');\n      const data = await response.json();\n\n      // Organize templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: [],\n        default_stage_selection: [],\n        default_data_extraction: [],\n        default_response_generation: []\n      };\n      data.forEach(template => {\n        if (templatesByType[template.template_type]) {\n          templatesByType[template.template_type].push(template);\n        }\n      });\n      setAvailableTemplates(templatesByType);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch templates');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchTemplate = useCallback(async (templateId, type) => {\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\n      const data = await response.json();\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: data.template_id,\n          text: data.template_text,\n          type: data.template_type\n        }\n      }));\n\n      // Extract variables from template\n      setVariables(prev => ({\n        ...prev,\n        [type]: extractVariables(data.template_text)\n      }));\n    } catch (err) {\n      setError(err.message);\n    }\n  }, []);\n  const extractVariables = template => {\n    if (!template) return [];\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\n    return matches.map(match => match.slice(1, -1));\n  };\n  const handleTemplateChange = (type, value) => {\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: value\n      }\n    }));\n    // Update variables when template changes\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(value)\n    }));\n  };\n  const handleTemplateSelect = async (type, templateId) => {\n    // If selecting \"None\", clear the template\n    if (!templateId) {\n      setTemplates(prev => ({\n        ...prev,\n        [type]: {\n          id: '',\n          text: '',\n          type: ''\n        }\n      }));\n      setVariables(prev => ({\n        ...prev,\n        [type]: []\n      }));\n      return;\n    }\n\n    // Fetch the selected template\n    await fetchTemplate(templateId, type);\n  };\n  const handleApplyDefaultTemplate = async type => {\n    // Map regular types to their default counterparts\n    const defaultTypeMap = {\n      'stage_selection': 'default_stage_selection',\n      'data_extraction': 'default_data_extraction',\n      'response_generation': 'default_response_generation'\n    };\n    const defaultType = defaultTypeMap[type];\n\n    // Find default templates of the corresponding type\n    const defaultTemplates = availableTemplates[defaultType];\n    if (defaultTemplates.length === 0) {\n      setError(`No default templates available for ${type}`);\n      return;\n    }\n\n    // For simplicity, use the first default template\n    const defaultTemplate = defaultTemplates[0];\n\n    // Apply the default template text (but keep the original ID)\n    setTemplates(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        text: defaultTemplate.template_text,\n        type: type // Keep the original type, not the default type\n      }\n    }));\n\n    // Update variables\n    setVariables(prev => ({\n      ...prev,\n      [type]: extractVariables(defaultTemplate.template_text)\n    }));\n    setSuccess(`Applied default template for ${type}`);\n  };\n  const handlePreview = async type => {\n    try {\n      var _document$cookie$spli2;\n      // Get the current template text for preview\n      const templateText = templates[type].text;\n      if (!templateText.trim()) {\n        setError('Template text is empty. Nothing to preview.');\n        return;\n      }\n\n      // Get business API key for authorization\n      const businessApiKey = (_document$cookie$spli2 = document.cookie.split('; ').find(row => row.startsWith('businessApiKey='))) === null || _document$cookie$spli2 === void 0 ? void 0 : _document$cookie$spli2.split('=')[1];\n      if (!businessApiKey) {\n        setError('Business API key is required for preview');\n        return;\n      }\n\n      // Prepare the preview request\n      const previewRequest = {\n        template_type: type,\n        template_text: templateText,\n        context: {\n          conversation_history: [\"User: Hello, I need help.\", \"AI: How can I assist you today?\"],\n          message: \"I want to book a flight\",\n          stage_list: [\"Greeting\", \"Flight Booking\", \"Confirmation\"],\n          extracted_data: {\n            intent: \"flight_booking\"\n          },\n          business_id: businessId\n        }\n      };\n      console.log(`Generating preview for ${type} template:`, previewRequest);\n      try {\n        // Try several possible endpoints\n        const possibleEndpoints = ['/templates/render', '/render_template', '/api/templates/preview'];\n        let response = null;\n        let error = null;\n\n        // Try each endpoint in sequence\n        for (const endpoint of possibleEndpoints) {\n          try {\n            response = await fetch(endpoint, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${businessApiKey}`\n              },\n              credentials: 'include',\n              body: JSON.stringify(previewRequest)\n            });\n            if (response.ok) {\n              // Found a working endpoint\n              break;\n            } else {\n              error = await response.json().catch(() => ({}));\n            }\n          } catch (e) {\n            // Endpoint doesn't exist or other error\n            console.log(`Endpoint ${endpoint} failed:`, e);\n          }\n        }\n        if (response && response.ok) {\n          const data = await response.json();\n          console.log(`Preview generated:`, data);\n          setPreviewData({\n            type,\n            result: data.result || data[type] || \"Preview not available\"\n          });\n          setSuccess(`Preview generated for ${type}`);\n          return data;\n        } else {\n          // No endpoints worked, use fallback - just display the template text\n          console.warn('No working preview endpoints found, using fallback');\n\n          // Simple variable replacement for demonstration\n          let previewText = templateText;\n          const vars = {\n            \"user_name\": \"John\",\n            \"intent\": \"flight_booking\",\n            \"message\": \"I want to book a flight\",\n            \"extracted_data\": {\n              \"destination\": \"Paris\",\n              \"date\": \"next week\"\n            }\n          };\n\n          // Simple variable replacement\n          Object.entries(vars).forEach(([key, value]) => {\n            const regex = new RegExp(`\\\\{${key}\\\\}`, 'g');\n            previewText = previewText.replace(regex, JSON.stringify(value));\n          });\n          setPreviewData({\n            type,\n            result: `(Local preview - no server endpoint)\\n\\n${previewText}`\n          });\n          setSuccess(`Local preview generated for ${type}`);\n          return {\n            result: previewText\n          };\n        }\n      } catch (err) {\n        throw new Error(`Failed to generate preview: ${err.message}`);\n      }\n    } catch (err) {\n      console.error(`Error generating preview for ${type}:`, err);\n      setError(err.message || 'Failed to generate preview');\n      return null;\n    }\n  };\n\n  // Update saveTemplate function to use loading state\n  const saveTemplate = async (type, asDefault = false) => {\n    try {\n      var _document$cookie$spli3;\n      setSavingTemplates(prev => ({\n        ...prev,\n        [type]: true\n      }));\n      if (!businessId) {\n        setError('Business ID is required to save template');\n        return;\n      }\n      const template = templates[type];\n      if (!template.text.trim()) {\n        setError(`Template text is required for ${type}`);\n        return;\n      }\n\n      // Get business API key from cookies\n      const businessApiKey = (_document$cookie$spli3 = document.cookie.split('; ').find(row => row.startsWith('businessApiKey='))) === null || _document$cookie$spli3 === void 0 ? void 0 : _document$cookie$spli3.split('=')[1];\n      if (!businessApiKey) {\n        setError('Business API key is required but was not found in cookies');\n        return;\n      }\n\n      // If there's an ID, update existing template, otherwise create new\n      const url = template.id && !asDefault ? `/templates/${template.id}` : '/templates';\n      const method = template.id && !asDefault ? 'PUT' : 'POST';\n\n      // Add query parameter with business_id as fallback\n      const urlWithParams = `${url}?business_id=${businessId}`;\n\n      // Map regular types to their default counterparts if saving as default\n      const templateType = asDefault ? `default_${type}` : type;\n      const templateData = {\n        template_name: `${stageName || 'New Stage'} - ${asDefault ? 'Default ' : ''}${type.replace(/_/g, ' ')}`,\n        template_text: template.text,\n        template_type: templateType,\n        business_id: businessId // Important: Include business_id\n      };\n      console.log(`Saving ${asDefault ? 'default ' : ''}${type} template:`, templateData);\n      const response = await fetch(urlWithParams, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}` // Add Authorization header as backup\n        },\n        credentials: 'include',\n        body: JSON.stringify(templateData)\n      });\n      if (!response.ok) throw new Error(`Failed to save ${asDefault ? 'default ' : ''}${type} template`);\n      const data = await response.json();\n      console.log(`Template ${asDefault ? 'default ' : ''}${type} saved successfully:`, data);\n\n      // Only update the current template ID if not saving as default\n      if (!asDefault && !template.id) {\n        setTemplates(prev => ({\n          ...prev,\n          [type]: {\n            ...prev[type],\n            id: data.template_id\n          }\n        }));\n      }\n      setSuccess(`${asDefault ? 'Default ' : ''}${type} template saved successfully`);\n\n      // After successful save, refresh the available templates\n      fetchAllTemplates();\n    } catch (err) {\n      console.error(`Error saving ${type} template:`, err);\n      setError(`Error saving template: ${err.message}`);\n    } finally {\n      setSavingTemplates(prev => ({\n        ...prev,\n        [type]: false\n      }));\n    }\n  };\n\n  // Then modify the handleSave function to include the business API key\n  const handleSave = async () => {\n    if (!stage) return;\n    try {\n      var _document$cookie$spli4;\n      // Validate stage name\n      if (!stageName.trim()) {\n        setError('Stage name is required');\n        return;\n      }\n\n      // Ensure businessId is available\n      if (!businessId) {\n        setError('Business ID is required but was not found');\n        console.error('Business ID is missing', {\n          businessId,\n          locationBusinessId,\n          queryBusinessId\n        });\n        return;\n      }\n\n      // Get business API key from cookies\n      const businessApiKey = (_document$cookie$spli4 = document.cookie.split('; ').find(row => row.startsWith('businessApiKey='))) === null || _document$cookie$spli4 === void 0 ? void 0 : _document$cookie$spli4.split('=')[1];\n      if (!businessApiKey) {\n        setError('Business API key is required but was not found in cookies');\n        return;\n      }\n\n      // Check if we need to save any templates first\n      const templatesSavingNeeded = [];\n      if (templates.stage_selection.text && !templates.stage_selection.id) {\n        templatesSavingNeeded.push('stage_selection');\n      }\n      if (templates.data_extraction.text && !templates.data_extraction.id) {\n        templatesSavingNeeded.push('data_extraction');\n      }\n      if (templates.response_generation.text && !templates.response_generation.id) {\n        templatesSavingNeeded.push('response_generation');\n      }\n\n      // If any templates need saving, save them first\n      if (templatesSavingNeeded.length > 0) {\n        setSuccess(`Saving ${templatesSavingNeeded.length} template(s) first...`);\n\n        // Save templates in sequence\n        for (const type of templatesSavingNeeded) {\n          await saveTemplate(type);\n        }\n      }\n\n      // Prepare updated stage data\n      const updatedStage = {\n        ...stage,\n        stage_name: stageName,\n        stage_description: stageDescription,\n        business_id: businessId,\n        agent_id: agentId || null,\n        stage_type: 'conversation',\n        // Required field\n        stage_selection_template_id: templates.stage_selection.id || null,\n        data_extraction_template_id: templates.data_extraction.id || null,\n        response_generation_template_id: templates.response_generation.id || null\n      };\n      let response;\n      let method;\n      let url;\n\n      // Determine if this is a create or update operation\n      if (stageId === 'new' || isNewStage) {\n        method = 'POST';\n        url = '/stages';\n      } else {\n        method = 'PUT';\n        url = `/stages/${stageId}`;\n      }\n\n      // Add query parameter with business_id as fallback\n      url = `${url}?business_id=${businessId}`;\n      console.log('Saving stage with data:', JSON.stringify(updatedStage, null, 2));\n\n      // Call the API\n      response = await fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}` // Add Authorization header as backup\n        },\n        credentials: 'include',\n        // This sends cookies\n        body: JSON.stringify(updatedStage)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || (stageId === 'new' ? 'Failed to create stage' : 'Failed to update stage'));\n      }\n      const result = await response.json();\n      console.log('Stage saved successfully:', result);\n      setSuccess(stageId === 'new' ? 'Stage created successfully' : 'Stage updated successfully');\n\n      // Navigate back to stage manager after a short delay\n      setTimeout(() => {\n        let backUrl;\n        if (businessId && agentId) {\n          backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n        } else if (businessId) {\n          backUrl = `/stage-management/business_id=${businessId}`;\n        } else {\n          backUrl = '/stage-management';\n        }\n        navigate(backUrl);\n      }, 1500);\n    } catch (err) {\n      console.error('Error saving stage:', err);\n      setError(err.message || 'Failed to save stage');\n    }\n  };\n  const handleCancel = () => {\n    // Navigate back to stage manager\n    let backUrl;\n    if (businessId && agentId) {\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\n    } else if (businessId) {\n      backUrl = `/stage-management/business_id=${businessId}`;\n    } else {\n      backUrl = '/stage-management';\n    }\n    navigate(backUrl);\n  };\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleCancel,\n        sx: {\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setError(''),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setSuccess(''),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 9\n    }, this), (showBusinessIdInput || !businessId) && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        border: '1px dashed',\n        borderColor: 'warning.main',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"warning.main\",\n        gutterBottom: true,\n        children: \"Business ID Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Business ID\",\n            value: businessId,\n            onChange: e => setBusinessId(e.target.value),\n            placeholder: \"Enter your business ID\",\n            helperText: \"Required for saving templates and stages\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            onClick: () => {\n              if (businessId) {\n                document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n                setShowBusinessIdInput(false);\n                setSuccess('Business ID saved');\n                fetchAllTemplates();\n              } else {\n                setError('Please enter a valid Business ID');\n              }\n            },\n            children: \"Save Business ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Stage Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: stageName,\n              onChange: e => setStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value),\n              multiline: true,\n              rows: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          my: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tabValue,\n          onChange: handleTabChange,\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Stage Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Data Extraction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            label: \"Response Generation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 0,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"stage-selection-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"stage-selection-template-label\",\n                value: templates.stage_selection.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('stage_selection', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 809,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 21\n                }, this), availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 800,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.stage_selection.id ? `Template ID: ${templates.stage_selection.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 820,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  onClick: () => confirmSaveTemplate('stage_selection'),\n                  disabled: !templates.stage_selection.text || savingTemplates.stage_selection,\n                  startIcon: savingTemplates.stage_selection ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 831,\n                    columnNumber: 68\n                  }, this) : null,\n                  children: savingTemplates.stage_selection ? 'Saving...' : 'Save Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 826,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => confirmSaveTemplate('stage_selection', true),\n                  disabled: !templates.stage_selection.text || savingTemplates.stage_selection,\n                  children: \"Save as Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 835,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 819,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 849,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('stage_selection'),\n                disabled: availableTemplates.default_stage_selection.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 857,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('stage_selection'),\n                disabled: !templates.stage_selection.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 855,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 865,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 864,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 863,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 846,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'stage_selection' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 872,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 873,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.stage_selection.text || '',\n              onChange: e => handleTemplateChange('stage_selection', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 879,\n              columnNumber: 17\n            }, this), variables.stage_selection.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.stage_selection.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 894,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 892,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 1,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"data-extraction-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 906,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"data-extraction-template-label\",\n                value: templates.data_extraction.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('data_extraction', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 914,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 21\n                }, this), availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 917,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 907,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.data_extraction.id ? `Template ID: ${templates.data_extraction.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 925,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  onClick: () => confirmSaveTemplate('data_extraction'),\n                  disabled: !templates.data_extraction.text || savingTemplates.data_extraction,\n                  startIcon: savingTemplates.data_extraction ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 936,\n                    columnNumber: 68\n                  }, this) : null,\n                  children: savingTemplates.data_extraction ? 'Saving...' : 'Save Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 931,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => confirmSaveTemplate('data_extraction', true),\n                  disabled: !templates.data_extraction.text || savingTemplates.data_extraction,\n                  children: \"Save as Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 940,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 930,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 954,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('data_extraction'),\n                disabled: availableTemplates.default_data_extraction.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 952,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 962,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('data_extraction'),\n                disabled: !templates.data_extraction.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 960,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 970,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 969,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 968,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'data_extraction' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 977,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 978,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 976,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.data_extraction.text || '',\n              onChange: e => handleTemplateChange('data_extraction', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 984,\n              columnNumber: 17\n            }, this), variables.data_extraction.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 996,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.data_extraction.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 999,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 997,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: tabValue,\n          index: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"response-generation-template-label\",\n                children: \"Template\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1011,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"response-generation-template-label\",\n                value: templates.response_generation.id || '',\n                label: \"Template\",\n                onChange: e => handleTemplateSelect('response_generation', e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1019,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1018,\n                  columnNumber: 21\n                }, this), availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: template.template_id,\n                  children: template.template_name\n                }, template.template_id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1022,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1012,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1010,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                color: \"text.secondary\",\n                children: templates.response_generation.id ? `Template ID: ${templates.response_generation.id}` : 'No template selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1030,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  gap: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  onClick: () => confirmSaveTemplate('response_generation'),\n                  disabled: !templates.response_generation.text || savingTemplates.response_generation,\n                  startIcon: savingTemplates.response_generation ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1041,\n                    columnNumber: 72\n                  }, this) : null,\n                  children: savingTemplates.response_generation ? 'Saving...' : 'Save Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1036,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: () => confirmSaveTemplate('response_generation', true),\n                  disabled: !templates.response_generation.text || savingTemplates.response_generation,\n                  children: \"Save as Default\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1045,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1035,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1029,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1059,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handleApplyDefaultTemplate('response_generation'),\n                disabled: availableTemplates.default_response_generation.length === 0,\n                children: \"Apply Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1057,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(PreviewIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1067,\n                  columnNumber: 32\n                }, this),\n                onClick: () => handlePreview('response_generation'),\n                disabled: !templates.response_generation.text,\n                children: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1065,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Variables are enclosed in curly braces like {user_name}\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(HelpOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1075,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1074,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1056,\n              columnNumber: 17\n            }, this), previewData && previewData.type === 'response_generation' && /*#__PURE__*/_jsxDEV(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Preview:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  whiteSpace: 'pre-wrap'\n                },\n                children: previewData.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1083,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1081,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Template Text\",\n              value: templates.response_generation.text || '',\n              onChange: e => handleTemplateChange('response_generation', e.target.value),\n              multiline: true,\n              rows: 8,\n              placeholder: \"Enter template text with variables in {curly_braces}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1089,\n              columnNumber: 17\n            }, this), variables.response_generation.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: \"Variables:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  gap: 1\n                },\n                children: variables.response_generation.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: variable,\n                  size: \"small\"\n                }, variable, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1104,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1102,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1100,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1009,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3,\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1123,\n            columnNumber: 26\n          }, this),\n          onClick: handleSave,\n          disabled: isLoading,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 28\n          }, this) : stageId === 'new' ? 'Create Stage' : 'Save Stage'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: showConfirmDialog,\n      onClose: () => setShowConfirmDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Save Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: saveAsDefault ? `Are you sure you want to save this as a default ${templateToSave === null || templateToSave === void 0 ? void 0 : templateToSave.replace(/_/g, ' ')} template?` : (_templates$templateTo = templates[templateToSave]) !== null && _templates$templateTo !== void 0 && _templates$templateTo.id ? `Are you sure you want to update this ${templateToSave === null || templateToSave === void 0 ? void 0 : templateToSave.replace(/_/g, ' ')} template?` : `Are you sure you want to create a new ${templateToSave === null || templateToSave === void 0 ? void 0 : templateToSave.replace(/_/g, ' ')} template?`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 11\n        }, this), saveAsDefault && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"This will create a new default template that can be applied to any stage.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 13\n        }, this), !((_templates$templateTo2 = templates[templateToSave]) !== null && _templates$templateTo2 !== void 0 && _templates$templateTo2.id) && !saveAsDefault && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"A new template will be created in the database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowConfirmDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirmSave,\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 685,\n    columnNumber: 5\n  }, this);\n};\n_s(StageEditor, \"3zHh6wmDAnV3cibfPjcN/XUUlo0=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c2 = StageEditor;\nexport default StageEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"StageEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Box","Paper","Typography","TextField","Button","Tabs","Tab","Grid","Alert","Snackbar","IconButton","Tooltip","FormControl","InputLabel","MenuItem","Select","CircularProgress","Divider","Chip","Dialog","DialogTitle","DialogContent","DialogActions","SaveIcon","PreviewIcon","RestartAltIcon","HelpOutlineIcon","ArrowBackIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","TabPanel","props","children","value","index","other","role","hidden","id","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","StageEditor","_s","_document$cookie$spli","_templates$templateTo","_templates$templateTo2","stageId","navigate","location","queryParams","URLSearchParams","search","queryBusinessId","get","queryAgentId","businessId","locationBusinessId","agentId","locationAgentId","isNewStage","state","cookieBusinessId","document","cookie","split","find","row","startsWith","setBusinessId","showBusinessIdInput","setShowBusinessIdInput","stage","setStage","stageName","setStageName","stageDescription","setStageDescription","tabValue","setTabValue","templates","setTemplates","stage_selection","text","type","data_extraction","response_generation","availableTemplates","setAvailableTemplates","default_stage_selection","default_data_extraction","default_response_generation","variables","setVariables","error","setError","success","setSuccess","isLoading","setIsLoading","previewData","setPreviewData","savingTemplates","setSavingTemplates","showConfirmDialog","setShowConfirmDialog","templateToSave","setTemplateToSave","saveAsDefault","setSaveAsDefault","confirmSaveTemplate","asDefault","handleConfirmSave","saveTemplate","fetchStage","stage_name","stage_description","business_id","agent_id","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","stage_config","order","fetchAllTemplates","response","fetch","credentials","ok","Error","data","json","fetchTemplate","err","message","templatesByType","forEach","template","template_type","push","templateId","prev","template_id","template_text","extractVariables","matches","match","map","slice","handleTemplateChange","handleTemplateSelect","handleApplyDefaultTemplate","defaultTypeMap","defaultType","defaultTemplates","length","defaultTemplate","handlePreview","_document$cookie$spli2","templateText","trim","businessApiKey","previewRequest","context","conversation_history","stage_list","extracted_data","intent","console","log","possibleEndpoints","endpoint","method","headers","body","JSON","stringify","catch","e","result","warn","previewText","vars","Object","entries","key","regex","RegExp","replace","_document$cookie$spli3","url","urlWithParams","templateType","templateData","template_name","handleSave","_document$cookie$spli4","templatesSavingNeeded","updatedStage","stage_type","errorData","setTimeout","backUrl","handleCancel","handleTabChange","event","newValue","sx","p","mb","display","alignItems","onClick","mr","variant","severity","onClose","border","borderColor","borderRadius","color","gutterBottom","container","spacing","item","xs","fullWidth","label","onChange","target","placeholder","helperText","required","justifyContent","multiline","rows","my","labelId","gap","disabled","startIcon","size","title","whiteSpace","mt","flexWrap","variable","open","_c2","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageEditor.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Grid,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  CircularProgress,\r\n  Divider,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PreviewIcon from '@mui/icons-material/Preview';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\n// TabPanel component for the tabs\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n      style={{ padding: '20px 0' }}\r\n    >\r\n      {value === index && (\r\n        <Box>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StageEditor = () => {\r\n  const { stageId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Get businessId and agentId from location state or URL query parameters\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  const queryAgentId = queryParams.get('agent_id');\r\n  \r\n  // Location state values as fallback\r\n  const { businessId: locationBusinessId, agentId: locationAgentId, isNewStage } = location.state || {};\r\n  \r\n  // Check cookies for business ID as another fallback\r\n  const cookieBusinessId = document.cookie\r\n    .split('; ')\r\n    .find(row => row.startsWith('businessId='))\r\n    ?.split('=')[1];\r\n  \r\n  // Use query parameters first, then location state, then cookies\r\n  const [businessId, setBusinessId] = useState(queryBusinessId || locationBusinessId || cookieBusinessId || '');\r\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!businessId);\r\n  \r\n  const agentId = queryAgentId || locationAgentId;\r\n  \r\n  const [stage, setStage] = useState(null);\r\n  const [stageName, setStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [templates, setTemplates] = useState({\r\n    stage_selection: { id: '', text: '', type: '' },\r\n    data_extraction: { id: '', text: '', type: '' },\r\n    response_generation: { id: '', text: '', type: '' }\r\n  });\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: [],\r\n    default_stage_selection: [],\r\n    default_data_extraction: [],\r\n    default_response_generation: []\r\n  });\r\n  const [variables, setVariables] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  \r\n  // Add template saving loading states\r\n  const [savingTemplates, setSavingTemplates] = useState({\r\n    stage_selection: false,\r\n    data_extraction: false,\r\n    response_generation: false\r\n  });\r\n\r\n  // Add template save confirmation dialog\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [templateToSave, setTemplateToSave] = useState('');\r\n  const [saveAsDefault, setSaveAsDefault] = useState(false);\r\n\r\n  // Function to open the confirmation dialog\r\n  const confirmSaveTemplate = (type, asDefault = false) => {\r\n    setTemplateToSave(type);\r\n    setSaveAsDefault(asDefault);\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  // Function to handle dialog confirm\r\n  const handleConfirmSave = async () => {\r\n    setShowConfirmDialog(false);\r\n    if (templateToSave) {\r\n      await saveTemplate(templateToSave, saveAsDefault);\r\n    }\r\n  };\r\n\r\n  // Fetch stage data when the component mounts\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      // Store businessId in cookie for future use\r\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n    }\r\n\r\n    if (stageId && stageId !== 'new') {\r\n      fetchStage(stageId);\r\n    } else if (isNewStage) {\r\n      // For new stage, set up defaults but don't fetch\r\n      setStage({\r\n        stage_name: '',\r\n        stage_description: '',\r\n        business_id: businessId,\r\n        agent_id: agentId,\r\n        stage_selection_template_id: null,\r\n        data_extraction_template_id: null,\r\n        response_generation_template_id: null,\r\n        stage_config: { order: 0 }\r\n      });\r\n    }\r\n    \r\n    // Only fetch available templates if we have a business ID\r\n    if (businessId) {\r\n      fetchAllTemplates();\r\n    }\r\n  }, [stageId, businessId, agentId, isNewStage]);\r\n\r\n  // Fetch specific stage data\r\n  const fetchStage = async (id) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`/stages/${id}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch stage');\r\n      \r\n      const data = await response.json();\r\n      setStage(data);\r\n      setStageName(data.stage_name || '');\r\n      setStageDescription(data.stage_description || '');\r\n      \r\n      // For each template ID in the stage, fetch the template content\r\n      if (data.stage_selection_template_id) {\r\n        fetchTemplate(data.stage_selection_template_id, 'stage_selection');\r\n      }\r\n      if (data.data_extraction_template_id) {\r\n        fetchTemplate(data.data_extraction_template_id, 'data_extraction');\r\n      }\r\n      if (data.response_generation_template_id) {\r\n        fetchTemplate(data.response_generation_template_id, 'response_generation');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch all available templates on component mount\r\n  const fetchAllTemplates = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Fetch all templates\r\n      const response = await fetch('/templates', {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch templates');\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Organize templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: [],\r\n        default_stage_selection: [],\r\n        default_data_extraction: [],\r\n        default_response_generation: []\r\n      };\r\n      \r\n      data.forEach(template => {\r\n        if (templatesByType[template.template_type]) {\r\n          templatesByType[template.template_type].push(template);\r\n        }\r\n      });\r\n      \r\n      setAvailableTemplates(templatesByType);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch templates');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTemplate = useCallback(async (templateId, type) => {\r\n    try {\r\n      const response = await fetch(`/templates/${templateId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) throw new Error(`Failed to fetch ${type} template`);\r\n      \r\n      const data = await response.json();\r\n      \r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: {\r\n          id: data.template_id,\r\n          text: data.template_text,\r\n          type: data.template_type\r\n        }\r\n      }));\r\n      \r\n      // Extract variables from template\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: extractVariables(data.template_text)\r\n      }));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  }, []);\r\n\r\n  const extractVariables = (template) => {\r\n    if (!template) return [];\r\n    const matches = template.match(/\\{([^}]+)\\}/g) || [];\r\n    return matches.map(match => match.slice(1, -1));\r\n  };\r\n\r\n  const handleTemplateChange = (type, value) => {\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: value\r\n      }\r\n    }));\r\n    // Update variables when template changes\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(value)\r\n    }));\r\n  };\r\n\r\n  const handleTemplateSelect = async (type, templateId) => {\r\n    // If selecting \"None\", clear the template\r\n    if (!templateId) {\r\n      setTemplates(prev => ({\r\n        ...prev,\r\n        [type]: { id: '', text: '', type: '' }\r\n      }));\r\n      setVariables(prev => ({\r\n        ...prev,\r\n        [type]: []\r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Fetch the selected template\r\n    await fetchTemplate(templateId, type);\r\n  };\r\n\r\n  const handleApplyDefaultTemplate = async (type) => {\r\n    // Map regular types to their default counterparts\r\n    const defaultTypeMap = {\r\n      'stage_selection': 'default_stage_selection',\r\n      'data_extraction': 'default_data_extraction',\r\n      'response_generation': 'default_response_generation'\r\n    };\r\n    \r\n    const defaultType = defaultTypeMap[type];\r\n    \r\n    // Find default templates of the corresponding type\r\n    const defaultTemplates = availableTemplates[defaultType];\r\n    \r\n    if (defaultTemplates.length === 0) {\r\n      setError(`No default templates available for ${type}`);\r\n      return;\r\n    }\r\n    \r\n    // For simplicity, use the first default template\r\n    const defaultTemplate = defaultTemplates[0];\r\n    \r\n    // Apply the default template text (but keep the original ID)\r\n    setTemplates(prev => ({\r\n      ...prev,\r\n      [type]: {\r\n        ...prev[type],\r\n        text: defaultTemplate.template_text,\r\n        type: type // Keep the original type, not the default type\r\n      }\r\n    }));\r\n    \r\n    // Update variables\r\n    setVariables(prev => ({\r\n      ...prev,\r\n      [type]: extractVariables(defaultTemplate.template_text)\r\n    }));\r\n    \r\n    setSuccess(`Applied default template for ${type}`);\r\n  };\r\n\r\n  const handlePreview = async (type) => {\r\n    try {\r\n      // Get the current template text for preview\r\n      const templateText = templates[type].text;\r\n      \r\n      if (!templateText.trim()) {\r\n        setError('Template text is empty. Nothing to preview.');\r\n        return;\r\n      }\r\n\r\n      // Get business API key for authorization\r\n      const businessApiKey = document.cookie\r\n        .split('; ')\r\n        .find(row => row.startsWith('businessApiKey='))\r\n        ?.split('=')[1];\r\n\r\n      if (!businessApiKey) {\r\n        setError('Business API key is required for preview');\r\n        return;\r\n      }\r\n      \r\n      // Prepare the preview request\r\n      const previewRequest = {\r\n        template_type: type,\r\n        template_text: templateText,\r\n        context: {\r\n          conversation_history: [\"User: Hello, I need help.\", \"AI: How can I assist you today?\"],\r\n          message: \"I want to book a flight\",\r\n          stage_list: [\"Greeting\", \"Flight Booking\", \"Confirmation\"],\r\n          extracted_data: { intent: \"flight_booking\" },\r\n          business_id: businessId\r\n        }\r\n      };\r\n      \r\n      console.log(`Generating preview for ${type} template:`, previewRequest);\r\n      \r\n      try {\r\n        // Try several possible endpoints\r\n        const possibleEndpoints = [\r\n          '/templates/render', \r\n          '/render_template', \r\n          '/api/templates/preview'\r\n        ];\r\n        \r\n        let response = null;\r\n        let error = null;\r\n        \r\n        // Try each endpoint in sequence\r\n        for (const endpoint of possibleEndpoints) {\r\n          try {\r\n            response = await fetch(endpoint, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${businessApiKey}`\r\n              },\r\n              credentials: 'include',\r\n              body: JSON.stringify(previewRequest),\r\n            });\r\n            \r\n            if (response.ok) {\r\n              // Found a working endpoint\r\n              break;\r\n            } else {\r\n              error = await response.json().catch(() => ({}));\r\n            }\r\n          } catch (e) {\r\n            // Endpoint doesn't exist or other error\r\n            console.log(`Endpoint ${endpoint} failed:`, e);\r\n          }\r\n        }\r\n        \r\n        if (response && response.ok) {\r\n          const data = await response.json();\r\n          console.log(`Preview generated:`, data);\r\n          \r\n          setPreviewData({\r\n            type,\r\n            result: data.result || data[type] || \"Preview not available\"\r\n          });\r\n          \r\n          setSuccess(`Preview generated for ${type}`);\r\n          return data;\r\n        } else {\r\n          // No endpoints worked, use fallback - just display the template text\r\n          console.warn('No working preview endpoints found, using fallback');\r\n          \r\n          // Simple variable replacement for demonstration\r\n          let previewText = templateText;\r\n          const vars = {\r\n            \"user_name\": \"John\",\r\n            \"intent\": \"flight_booking\",\r\n            \"message\": \"I want to book a flight\",\r\n            \"extracted_data\": { \"destination\": \"Paris\", \"date\": \"next week\" }\r\n          };\r\n          \r\n          // Simple variable replacement\r\n          Object.entries(vars).forEach(([key, value]) => {\r\n            const regex = new RegExp(`\\\\{${key}\\\\}`, 'g');\r\n            previewText = previewText.replace(regex, JSON.stringify(value));\r\n          });\r\n          \r\n          setPreviewData({\r\n            type,\r\n            result: `(Local preview - no server endpoint)\\n\\n${previewText}`\r\n          });\r\n          \r\n          setSuccess(`Local preview generated for ${type}`);\r\n          return { result: previewText };\r\n        }\r\n      } catch (err) {\r\n        throw new Error(`Failed to generate preview: ${err.message}`);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error generating preview for ${type}:`, err);\r\n      setError(err.message || 'Failed to generate preview');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Update saveTemplate function to use loading state\r\n  const saveTemplate = async (type, asDefault = false) => {\r\n    try {\r\n      setSavingTemplates(prev => ({ ...prev, [type]: true }));\r\n      \r\n      if (!businessId) {\r\n        setError('Business ID is required to save template');\r\n        return;\r\n      }\r\n\r\n      const template = templates[type];\r\n      if (!template.text.trim()) {\r\n        setError(`Template text is required for ${type}`);\r\n        return;\r\n      }\r\n\r\n      // Get business API key from cookies\r\n      const businessApiKey = document.cookie\r\n        .split('; ')\r\n        .find(row => row.startsWith('businessApiKey='))\r\n        ?.split('=')[1];\r\n      \r\n      if (!businessApiKey) {\r\n        setError('Business API key is required but was not found in cookies');\r\n        return;\r\n      }\r\n\r\n      // If there's an ID, update existing template, otherwise create new\r\n      const url = template.id && !asDefault ? `/templates/${template.id}` : '/templates';\r\n      const method = template.id && !asDefault ? 'PUT' : 'POST';\r\n\r\n      // Add query parameter with business_id as fallback\r\n      const urlWithParams = `${url}?business_id=${businessId}`;\r\n\r\n      // Map regular types to their default counterparts if saving as default\r\n      const templateType = asDefault ? `default_${type}` : type;\r\n\r\n      const templateData = {\r\n        template_name: `${stageName || 'New Stage'} - ${asDefault ? 'Default ' : ''}${type.replace(/_/g, ' ')}`,\r\n        template_text: template.text,\r\n        template_type: templateType,\r\n        business_id: businessId // Important: Include business_id\r\n      };\r\n\r\n      console.log(`Saving ${asDefault ? 'default ' : ''}${type} template:`, templateData);\r\n\r\n      const response = await fetch(urlWithParams, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}` // Add Authorization header as backup\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(templateData),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`Failed to save ${asDefault ? 'default ' : ''}${type} template`);\r\n\r\n      const data = await response.json();\r\n      console.log(`Template ${asDefault ? 'default ' : ''}${type} saved successfully:`, data);\r\n      \r\n      // Only update the current template ID if not saving as default\r\n      if (!asDefault && !template.id) {\r\n        setTemplates(prev => ({\r\n          ...prev,\r\n          [type]: {\r\n            ...prev[type],\r\n            id: data.template_id\r\n          }\r\n        }));\r\n      }\r\n\r\n      setSuccess(`${asDefault ? 'Default ' : ''}${type} template saved successfully`);\r\n      \r\n      // After successful save, refresh the available templates\r\n      fetchAllTemplates();\r\n    } catch (err) {\r\n      console.error(`Error saving ${type} template:`, err);\r\n      setError(`Error saving template: ${err.message}`);\r\n    } finally {\r\n      setSavingTemplates(prev => ({ ...prev, [type]: false }));\r\n    }\r\n  };\r\n\r\n  // Then modify the handleSave function to include the business API key\r\n  const handleSave = async () => {\r\n    if (!stage) return;\r\n    \r\n    try {\r\n      // Validate stage name\r\n      if (!stageName.trim()) {\r\n        setError('Stage name is required');\r\n        return;\r\n      }\r\n      \r\n      // Ensure businessId is available\r\n      if (!businessId) {\r\n        setError('Business ID is required but was not found');\r\n        console.error('Business ID is missing', { businessId, locationBusinessId, queryBusinessId });\r\n        return;\r\n      }\r\n      \r\n      // Get business API key from cookies\r\n      const businessApiKey = document.cookie\r\n        .split('; ')\r\n        .find(row => row.startsWith('businessApiKey='))\r\n        ?.split('=')[1];\r\n      \r\n      if (!businessApiKey) {\r\n        setError('Business API key is required but was not found in cookies');\r\n        return;\r\n      }\r\n      \r\n      // Check if we need to save any templates first\r\n      const templatesSavingNeeded = [];\r\n      if (templates.stage_selection.text && !templates.stage_selection.id) {\r\n        templatesSavingNeeded.push('stage_selection');\r\n      }\r\n      if (templates.data_extraction.text && !templates.data_extraction.id) {\r\n        templatesSavingNeeded.push('data_extraction');\r\n      }\r\n      if (templates.response_generation.text && !templates.response_generation.id) {\r\n        templatesSavingNeeded.push('response_generation');\r\n      }\r\n      \r\n      // If any templates need saving, save them first\r\n      if (templatesSavingNeeded.length > 0) {\r\n        setSuccess(`Saving ${templatesSavingNeeded.length} template(s) first...`);\r\n        \r\n        // Save templates in sequence\r\n        for (const type of templatesSavingNeeded) {\r\n          await saveTemplate(type);\r\n        }\r\n      }\r\n      \r\n      // Prepare updated stage data\r\n      const updatedStage = {\r\n        ...stage,\r\n        stage_name: stageName,\r\n        stage_description: stageDescription,\r\n        business_id: businessId,\r\n        agent_id: agentId || null,\r\n        stage_type: 'conversation', // Required field\r\n        stage_selection_template_id: templates.stage_selection.id || null,\r\n        data_extraction_template_id: templates.data_extraction.id || null,\r\n        response_generation_template_id: templates.response_generation.id || null\r\n      };\r\n      \r\n      let response;\r\n      let method;\r\n      let url;\r\n      \r\n      // Determine if this is a create or update operation\r\n      if (stageId === 'new' || isNewStage) {\r\n        method = 'POST';\r\n        url = '/stages';\r\n      } else {\r\n        method = 'PUT';\r\n        url = `/stages/${stageId}`;\r\n      }\r\n      \r\n      // Add query parameter with business_id as fallback\r\n      url = `${url}?business_id=${businessId}`;\r\n      \r\n      console.log('Saving stage with data:', JSON.stringify(updatedStage, null, 2));\r\n      \r\n      // Call the API\r\n      response = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${businessApiKey}` // Add Authorization header as backup\r\n        },\r\n        credentials: 'include', // This sends cookies\r\n        body: JSON.stringify(updatedStage),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || errorData.message || \r\n          (stageId === 'new' ? 'Failed to create stage' : 'Failed to update stage'));\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('Stage saved successfully:', result);\r\n      \r\n      setSuccess(stageId === 'new' ? 'Stage created successfully' : 'Stage updated successfully');\r\n      \r\n      // Navigate back to stage manager after a short delay\r\n      setTimeout(() => {\r\n        let backUrl;\r\n        if (businessId && agentId) {\r\n          backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n        } else if (businessId) {\r\n          backUrl = `/stage-management/business_id=${businessId}`;\r\n        } else {\r\n          backUrl = '/stage-management';\r\n        }\r\n        navigate(backUrl);\r\n      }, 1500);\r\n    } catch (err) {\r\n      console.error('Error saving stage:', err);\r\n      setError(err.message || 'Failed to save stage');\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Navigate back to stage manager\r\n    let backUrl;\r\n    if (businessId && agentId) {\r\n      backUrl = `/stage-management/business_id=${businessId}/agent_id=${agentId}`;\r\n    } else if (businessId) {\r\n      backUrl = `/stage-management/business_id=${businessId}`;\r\n    } else {\r\n      backUrl = '/stage-management';\r\n    }\r\n    navigate(backUrl);\r\n  };\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3 }}>\r\n      {/* Back button and title */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n        <IconButton onClick={handleCancel} sx={{ mr: 1 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h5\">\r\n          {stageId && stageId !== 'new' ? 'Edit Stage' : 'Create New Stage'}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Business ID input section */}\r\n      {(showBusinessIdInput || !businessId) && (\r\n        <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n            Business ID Required\r\n          </Typography>\r\n          <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Business ID\"\r\n                value={businessId}\r\n                onChange={(e) => setBusinessId(e.target.value)}\r\n                placeholder=\"Enter your business ID\"\r\n                helperText=\"Required for saving templates and stages\"\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"\r\n                fullWidth\r\n                onClick={() => {\r\n                  if (businessId) {\r\n                    document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n                    setShowBusinessIdInput(false);\r\n                    setSuccess('Business ID saved');\r\n                    fetchAllTemplates();\r\n                  } else {\r\n                    setError('Please enter a valid Business ID');\r\n                  }\r\n                }}\r\n              >\r\n                Save Business ID\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n      \r\n      {isLoading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {/* Basic stage information */}\r\n          <Box sx={{ mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Stage Information\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Name\"\r\n                  value={stageName}\r\n                  onChange={(e) => setStageName(e.target.value)}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Stage Description\"\r\n                  value={stageDescription}\r\n                  onChange={(e) => setStageDescription(e.target.value)}\r\n                  multiline\r\n                  rows={2}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          \r\n          <Divider sx={{ my: 3 }} />\r\n          \r\n          {/* Template editing section */}\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Templates\r\n            </Typography>\r\n            \r\n            <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n              <Tab label=\"Stage Selection\" />\r\n              <Tab label=\"Data Extraction\" />\r\n              <Tab label=\"Response Generation\" />\r\n            </Tabs>\r\n            \r\n            {/* Stage Selection Template */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"stage-selection-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"stage-selection-template-label\"\r\n                    value={templates.stage_selection.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('stage_selection', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.stage_selection.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.stage_selection.id ? \r\n                      `Template ID: ${templates.stage_selection.id}` : \r\n                      'No template selected'}\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => confirmSaveTemplate('stage_selection')}\r\n                      disabled={!templates.stage_selection.text || savingTemplates.stage_selection}\r\n                      startIcon={savingTemplates.stage_selection ? <CircularProgress size={20} /> : null}\r\n                    >\r\n                      {savingTemplates.stage_selection ? 'Saving...' : 'Save Template'}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => confirmSaveTemplate('stage_selection', true)}\r\n                      disabled={!templates.stage_selection.text || savingTemplates.stage_selection}\r\n                    >\r\n                      Save as Default\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('stage_selection')}\r\n                    disabled={availableTemplates.default_stage_selection.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('stage_selection')}\r\n                    disabled={!templates.stage_selection.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'stage_selection' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.stage_selection.text || ''}\r\n                  onChange={(e) => handleTemplateChange('stage_selection', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.stage_selection.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.stage_selection.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Data Extraction Template */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"data-extraction-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"data-extraction-template-label\"\r\n                    value={templates.data_extraction.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('data_extraction', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.data_extraction.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.data_extraction.id ? \r\n                      `Template ID: ${templates.data_extraction.id}` : \r\n                      'No template selected'}\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => confirmSaveTemplate('data_extraction')}\r\n                      disabled={!templates.data_extraction.text || savingTemplates.data_extraction}\r\n                      startIcon={savingTemplates.data_extraction ? <CircularProgress size={20} /> : null}\r\n                    >\r\n                      {savingTemplates.data_extraction ? 'Saving...' : 'Save Template'}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => confirmSaveTemplate('data_extraction', true)}\r\n                      disabled={!templates.data_extraction.text || savingTemplates.data_extraction}\r\n                    >\r\n                      Save as Default\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('data_extraction')}\r\n                    disabled={availableTemplates.default_data_extraction.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('data_extraction')}\r\n                    disabled={!templates.data_extraction.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'data_extraction' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.data_extraction.text || ''}\r\n                  onChange={(e) => handleTemplateChange('data_extraction', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.data_extraction.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.data_extraction.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n            \r\n            {/* Response Generation Template */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel id=\"response-generation-template-label\">Template</InputLabel>\r\n                  <Select\r\n                    labelId=\"response-generation-template-label\"\r\n                    value={templates.response_generation.id || ''}\r\n                    label=\"Template\"\r\n                    onChange={(e) => handleTemplateSelect('response_generation', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {availableTemplates.response_generation.map((template) => (\r\n                      <MenuItem key={template.template_id} value={template.template_id}>\r\n                        {template.template_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                \r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {templates.response_generation.id ? \r\n                      `Template ID: ${templates.response_generation.id}` : \r\n                      'No template selected'}\r\n                  </Typography>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={() => confirmSaveTemplate('response_generation')}\r\n                      disabled={!templates.response_generation.text || savingTemplates.response_generation}\r\n                      startIcon={savingTemplates.response_generation ? <CircularProgress size={20} /> : null}\r\n                    >\r\n                      {savingTemplates.response_generation ? 'Saving...' : 'Save Template'}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => confirmSaveTemplate('response_generation', true)}\r\n                      disabled={!templates.response_generation.text || savingTemplates.response_generation}\r\n                    >\r\n                      Save as Default\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<RestartAltIcon />}\r\n                    onClick={() => handleApplyDefaultTemplate('response_generation')}\r\n                    disabled={availableTemplates.default_response_generation.length === 0}\r\n                  >\r\n                    Apply Default\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<PreviewIcon />}\r\n                    onClick={() => handlePreview('response_generation')}\r\n                    disabled={!templates.response_generation.text}\r\n                  >\r\n                    Preview\r\n                  </Button>\r\n                  <Tooltip title=\"Variables are enclosed in curly braces like {user_name}\">\r\n                    <IconButton>\r\n                      <HelpOutlineIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n                \r\n                {previewData && previewData.type === 'response_generation' && (\r\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Preview:</Typography>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                      {previewData.result}\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Template Text\"\r\n                  value={templates.response_generation.text || ''}\r\n                  onChange={(e) => handleTemplateChange('response_generation', e.target.value)}\r\n                  multiline\r\n                  rows={8}\r\n                  placeholder=\"Enter template text with variables in {curly_braces}\"\r\n                />\r\n                \r\n                {variables.response_generation.length > 0 && (\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Typography variant=\"subtitle2\">Variables:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                      {variables.response_generation.map((variable) => (\r\n                        <Chip key={variable} label={variable} size=\"small\" />\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </TabPanel>\r\n          </Box>\r\n          \r\n          {/* Save button */}\r\n          <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleSave}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? <CircularProgress size={24} /> : (stageId === 'new' ? 'Create Stage' : 'Save Stage')}\r\n            </Button>\r\n          </Box>\r\n        </>\r\n      )}\r\n\r\n      {/* Template Save Confirmation Dialog */}\r\n      <Dialog open={showConfirmDialog} onClose={() => setShowConfirmDialog(false)}>\r\n        <DialogTitle>Save Template</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            {saveAsDefault\r\n              ? `Are you sure you want to save this as a default ${templateToSave?.replace(/_/g, ' ')} template?`\r\n              : templates[templateToSave]?.id \r\n                ? `Are you sure you want to update this ${templateToSave?.replace(/_/g, ' ')} template?` \r\n                : `Are you sure you want to create a new ${templateToSave?.replace(/_/g, ' ')} template?`}\r\n          </Typography>\r\n          {saveAsDefault && (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n              This will create a new default template that can be applied to any stage.\r\n            </Typography>\r\n          )}\r\n          {!templates[templateToSave]?.id && !saveAsDefault && (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n              A new template will be created in the database.\r\n            </Typography>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowConfirmDialog(false)}>Cancel</Button>\r\n          <Button onClick={handleConfirmSave} color=\"primary\" variant=\"contained\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StageEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}