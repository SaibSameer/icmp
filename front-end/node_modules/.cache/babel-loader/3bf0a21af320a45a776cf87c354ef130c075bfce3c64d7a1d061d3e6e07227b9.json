{"ast":null,"code":"// src/services/agentService.js\nimport { API_CONFIG } from '../config';\n\n// Fetch agents for a business\nexport const fetchAgents = async businessId => {\n  try {\n    console.log(`Fetching agents for business: ${businessId}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents?business_id=${businessId}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch agents');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in fetchAgents:', error);\n    throw error;\n  }\n};\n\n// Create a new agent\nexport const createAgent = async agentData => {\n  try {\n    console.log('Creating agent:', agentData);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(agentData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create agent');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in createAgent:', error);\n    throw error;\n  }\n};\n\n// Update an existing agent\nexport const updateAgent = async (agentId, agentData) => {\n  try {\n    console.log(`Updating agent ${agentId}:`, agentData);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}`, {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(agentData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update agent');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in updateAgent:', error);\n    throw error;\n  }\n};\n\n// Delete an agent\nexport const deleteAgent = async (agentId, businessId) => {\n  try {\n    console.log(`Deleting agent ${agentId} for business ${businessId}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${businessId}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        business_id: businessId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete agent');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error in deleteAgent:', error);\n    throw error;\n  }\n};\n\n// Get a specific agent\nexport const getAgent = async (agentId, businessId) => {\n  try {\n    console.log(`Fetching agent ${agentId} for business ${businessId}`);\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${businessId}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch agent');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in getAgent:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_CONFIG","fetchAgents","businessId","console","log","response","fetch","BASE_URL","method","credentials","headers","ok","errorData","json","Error","message","error","createAgent","agentData","body","JSON","stringify","updateAgent","agentId","deleteAgent","business_id","getAgent"],"sources":["C:/icmp_events_api/front-end/src/services/agentService.js"],"sourcesContent":["// src/services/agentService.js\r\nimport { API_CONFIG } from '../config';\r\n\r\n// Fetch agents for a business\r\nexport const fetchAgents = async (businessId) => {\r\n  try {\r\n    console.log(`Fetching agents for business: ${businessId}`);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents?business_id=${businessId}`, {\r\n      method: 'GET',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to fetch agents');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in fetchAgents:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new agent\r\nexport const createAgent = async (agentData) => {\r\n  try {\r\n    console.log('Creating agent:', agentData);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents`, {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      body: JSON.stringify(agentData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create agent');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in createAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing agent\r\nexport const updateAgent = async (agentId, agentData) => {\r\n  try {\r\n    console.log(`Updating agent ${agentId}:`, agentData);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}`, {\r\n      method: 'PUT',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      body: JSON.stringify(agentData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update agent');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in updateAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete an agent\r\nexport const deleteAgent = async (agentId, businessId) => {\r\n  try {\r\n    console.log(`Deleting agent ${agentId} for business ${businessId}`);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${businessId}`, {\r\n      method: 'DELETE',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ business_id: businessId })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete agent');\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error in deleteAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get a specific agent\r\nexport const getAgent = async (agentId, businessId) => {\r\n  try {\r\n    console.log(`Fetching agent ${agentId} for business ${businessId}`);\r\n    const response = await fetch(`${API_CONFIG.BASE_URL}/agents/${agentId}?business_id=${businessId}`, {\r\n      method: 'GET',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to fetch agent');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in getAgent:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}