{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\TemplateManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { TextField, Button, Typography, Card, CardContent, Box, TextareaAutosize, Select, MenuItem, InputLabel, FormControl, Grid, Paper, Divider, Tab, Tabs, Alert, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Chip, Dialog, DialogTitle, DialogContent, DialogActions, CircularProgress, Snackbar, Container, Tooltip } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport TemplateSection from './TemplateSection';\nimport AddIcon from '@mui/icons-material/Add';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TemplateManagement({\n  templateID,\n  setTemplateID,\n  availableVariable = [],\n  setAvailableVariable,\n  selectedVariable,\n  setSelectedVariable,\n  handleTemplateSelection,\n  handleVariableSelection,\n  addVariableToTemplate,\n  templateName,\n  setTemplateName,\n  templateText,\n  setTemplateText,\n  templateOutput,\n  createTemplate,\n  fetchTemplates,\n  handleSnackbarOpen,\n  handleSaveDefaultTemplate,\n  apiKey,\n  setTemplateOutput\n}) {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [templateType, setTemplateType] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [activeTab, setActiveTab] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState(null);\n  const [filterType, setFilterType] = useState('all');\n  const [showBusinessIdInput, setShowBusinessIdInput] = useState(!apiKey || !templateID);\n  const [businessId, setBusinessId] = useState(templateID || '');\n  const [businessApiKey, setBusinessApiKey] = useState(apiKey || '');\n  const [agentId, setAgentId] = useState('');\n  const [filteredTemplates, setFilteredTemplates] = useState([]);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  const [showAgentIdInput, setShowAgentIdInput] = useState(!agentId);\n  const templateTypes = [{\n    value: 'stage_selection',\n    label: 'Stage Selection'\n  }, {\n    value: 'data_extraction',\n    label: 'Data Extraction'\n  }, {\n    value: 'response_generation',\n    label: 'Response Generation'\n  }, {\n    value: 'default_stage_selection',\n    label: 'Default Stage Selection'\n  }, {\n    value: 'default_data_extraction',\n    label: 'Default Data Extraction'\n  }, {\n    value: 'default_response_generation',\n    label: 'Default Response Generation'\n  }];\n\n  // Parse query parameters if any\n  const queryParams = new URLSearchParams(window.location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Get stored credentials from localStorage\n  const storedBusinessId = localStorage.getItem('businessId');\n  const storedApiKey = localStorage.getItem('businessApiKey');\n  const storedAgentId = localStorage.getItem('agentId');\n\n  // Update state with query params and localStorage values\n  useEffect(() => {\n    // Update businessId if query param or localStorage has a value\n    if (queryBusinessId || storedBusinessId) {\n      setBusinessId(queryBusinessId || storedBusinessId);\n    }\n\n    // Update businessApiKey if localStorage has a value\n    if (storedApiKey) {\n      setBusinessApiKey(storedApiKey);\n    }\n\n    // Update agentId if query param or localStorage has a value\n    if (queryAgentId || storedAgentId) {\n      setAgentId(queryAgentId || storedAgentId);\n    }\n\n    // Update visibility of input fields\n    setShowBusinessIdInput(!businessId || !businessApiKey);\n    setShowAgentIdInput(!agentId);\n  }, [queryBusinessId, storedBusinessId, storedApiKey, queryAgentId, storedAgentId]);\n\n  // Initialize filteredTemplates when templates change\n  useEffect(() => {\n    setFilteredTemplates(templates);\n  }, [templates]);\n\n  // Effect to fetch templates on mount\n  useEffect(() => {\n    if (businessId && agentId) {\n      console.log(\"TemplateManagement.js - Fetching templates with:\", {\n        businessId,\n        agentId\n      });\n      if (typeof fetchTemplates === 'function') {\n        fetchTemplates();\n      } else {\n        // If fetchTemplates is not a prop, use the internal implementation\n        fetchTemplatesInternal();\n      }\n    }\n  }, [businessId, agentId, fetchTemplates]);\n\n  // Internal implementation of fetchTemplates\n  const fetchTemplatesInternal = async () => {\n    if (!businessId) {\n      showSnackbar('Business ID is required to fetch templates', 'error');\n      setShowBusinessIdInput(true);\n      setIsLoading(false);\n      return;\n    }\n    if (!agentId) {\n      showSnackbar('Agent ID is required to fetch templates', 'error');\n      setShowAgentIdInput(true);\n      setIsLoading(false);\n      return;\n    }\n    if (!businessApiKey) {\n      showSnackbar('Business API Key is required to fetch templates', 'error');\n      setShowBusinessIdInput(true);\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const url = `/templates?business_id=${businessId}&agent_id=${agentId}`;\n      console.log(\"Fetching templates from:\", url);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || `Failed to fetch templates (${response.status})`);\n      }\n      const data = await response.json();\n      console.log('Fetched templates (raw):', data);\n\n      // Normalize the templates data to ensure all needed fields exist\n      const normalizedTemplates = Array.isArray(data) ? data.map(template => ({\n        template_id: template.template_id || template.id || `temp-${Math.random().toString(36).substring(2, 9)}`,\n        template_name: template.template_name || 'Unnamed Template',\n        template_text: template.template_text || '',\n        template_type: template.template_type || 'Unknown Type',\n        template_description: template.template_description || 'No description',\n        variables: template.variables || []\n      })) : [];\n      console.log('Normalized templates:', normalizedTemplates);\n      setTemplates(normalizedTemplates);\n      setFilteredTemplates(normalizedTemplates);\n\n      // Show message about number of templates loaded\n      showSnackbar(`${normalizedTemplates.length} templates loaded successfully`, 'success');\n    } catch (err) {\n      console.error('Error fetching templates:', err);\n      showSnackbar(err.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    // TODO: Implement API endpoint to retrieve available variables\n    const mockVariables = ['variable1', 'variable2', 'variable3'];\n    if (typeof setAvailableVariable === 'function') {\n      setAvailableVariable(mockVariables);\n    }\n  }, [setAvailableVariable]);\n  const handleCreateTemplate = async () => {\n    try {\n      if (!templateName || !templateText || !templateType) {\n        setErrorMessage('Template name, text, and type are required');\n        return;\n      }\n      const response = await fetch('/templates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          template_name: templateName,\n          template_text: templateText,\n          template_type: templateType\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create template');\n      }\n      const data = await response.json();\n\n      // Reset form\n      setTemplateName('');\n      setTemplateText('');\n      setTemplateType('');\n\n      // Refresh templates\n      fetchTemplates();\n      setSuccessMessage('Template created successfully');\n\n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSuccessMessage('');\n      }, 3000);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  const handleUpdateTemplate = async () => {\n    try {\n      if (!editingTemplate) return;\n      const response = await fetch(`/templates/${editingTemplate.template_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          template_name: editingTemplate.template_name,\n          template_text: editingTemplate.template_text,\n          template_type: editingTemplate.template_type,\n          business_id: businessId,\n          agent_id: agentId\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || 'Failed to update template');\n      }\n\n      // Close dialog and refresh templates\n      setEditDialogOpen(false);\n      fetchTemplatesInternal();\n      showSnackbar('Template updated successfully', 'success');\n    } catch (error) {\n      console.error('Error updating template:', error);\n      showSnackbar(`Error: ${error.message}`, 'error');\n    }\n  };\n  const handleDeleteTemplate = async templateId => {\n    if (!window.confirm('Are you sure you want to delete this template?')) {\n      return;\n    }\n    try {\n      const response = await fetch(`/templates/${templateId}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || 'Failed to delete template');\n      }\n\n      // Refresh templates\n      fetchTemplatesInternal();\n      showSnackbar('Template deleted successfully', 'success');\n    } catch (error) {\n      console.error('Error deleting template:', error);\n      showSnackbar(`Error: ${error.message}`, 'error');\n    }\n  };\n  const handleDuplicateTemplate = async template => {\n    try {\n      const response = await fetch('/templates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          template_name: `${template.template_name} (Copy)`,\n          template_text: template.template_text,\n          template_type: template.template_type,\n          business_id: businessId,\n          agent_id: agentId\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || errorData.message || 'Failed to duplicate template');\n      }\n\n      // Refresh templates\n      fetchTemplatesInternal();\n      showSnackbar('Template duplicated successfully', 'success');\n    } catch (error) {\n      console.error('Error duplicating template:', error);\n      showSnackbar(`Error: ${error.message}`, 'error');\n    }\n  };\n  const handleEditTemplate = template => {\n    setEditingTemplate(template);\n    setEditDialogOpen(true);\n  };\n  const handleAddVariable = variable => {\n    setTemplateText(prev => `${prev} {${variable}}`);\n  };\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  const getFilteredTemplates = () => {\n    // If searching by text instead of filtering by type\n    if (typeof filterType === 'string' && filterType.length > 0 && !templateTypes.some(t => t.value === filterType)) {\n      // This is a text search, not a type filter\n      const searchTerm = filterType.toLowerCase();\n      return templates.filter(template => template.template_name && template.template_name.toLowerCase().includes(searchTerm) || template.template_description && template.template_description.toLowerCase().includes(searchTerm) || template.template_id && template.template_id.toLowerCase().includes(searchTerm) || template.template_type && template.template_type.toLowerCase().includes(searchTerm));\n    }\n\n    // Regular type filtering\n    if (filterType === 'all') {\n      return templates;\n    }\n    return templates.filter(template => {\n      const type = template.template_type;\n      // Handle the case where type might be undefined or not a string\n      if (!type || typeof type !== 'string') return false;\n      return type === filterType;\n    });\n  };\n  const isDefaultTemplate = type => {\n    return type && typeof type === 'string' && type.startsWith('default_');\n  };\n  const getTemplateTypeLabel = type => {\n    if (!type) return 'Unknown Type';\n    const found = templateTypes.find(t => t.value === type);\n    return found ? found.label : type;\n  };\n  const handleNavigateToHome = () => {\n    navigate('/business');\n  };\n  const validateCredentials = async () => {\n    if (!businessId || !businessApiKey) {\n      showSnackbar('Business ID and API Key are required', 'error');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n    try {\n      const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Invalid business ID or API key');\n      }\n      return true;\n    } catch (err) {\n      console.error('Credential validation error:', err);\n      showSnackbar('Failed to validate credentials: ' + err.message, 'error');\n      setShowBusinessIdInput(true);\n      return false;\n    }\n  };\n  const saveCredentials = async () => {\n    if (!businessId || !businessApiKey) {\n      showSnackbar('Please enter both Business ID and API Key', 'error');\n      return;\n    }\n    const isValid = await validateCredentials();\n    if (isValid) {\n      // Save to both localStorage and cookies\n      localStorage.setItem('businessId', businessId);\n      localStorage.setItem('businessApiKey', businessApiKey);\n      document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\n      document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\n      setShowBusinessIdInput(false);\n      showSnackbar('Business credentials validated and saved', 'success');\n\n      // Refresh templates\n      fetchTemplatesInternal();\n    }\n  };\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  const handleCreateNewTemplate = () => {\n    let url = `/template-editor/new?business_id=${businessId}`;\n    if (agentId) {\n      url += `&agent_id=${agentId}`;\n    }\n    navigate(url);\n  };\n  const handleEditExistingTemplate = templateId => {\n    let url = `/template-editor/${templateId}?business_id=${businessId}`;\n    if (agentId) {\n      url += `&agent_id=${agentId}`;\n    }\n    navigate(url);\n  };\n\n  // Effect to check if we need to refresh templates (coming from template editor)\n  useEffect(() => {\n    const templateUpdated = localStorage.getItem('template_updated');\n    const refreshParam = queryParams.get('refresh');\n    if (templateUpdated === 'true' || refreshParam) {\n      // Clear the flag\n      localStorage.removeItem('template_updated');\n\n      // If we have both business ID and agent ID, fetch templates\n      if (businessId && agentId && businessApiKey) {\n        console.log(\"Template was just updated, refreshing templates list\");\n        setTimeout(() => {\n          fetchTemplatesInternal();\n        }, 500); // Small delay to ensure backend has processed\n      }\n    }\n  }, [location, businessId, agentId, businessApiKey]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleNavigateToHome,\n          sx: {\n            mr: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h1\",\n          gutterBottom: true,\n          sx: {\n            flexGrow: 1\n          },\n          children: \"Template Management\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: () => fetchTemplatesInternal(),\n          startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 36\n          }, this),\n          sx: {\n            mr: 2\n          },\n          children: \"Refresh Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleCreateNewTemplate,\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 36\n          }, this),\n          children: \"Create Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }, this), (showBusinessIdInput || !businessId || !businessApiKey) && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3,\n          p: 2,\n          border: '1px dashed',\n          borderColor: 'warning.main',\n          borderRadius: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          color: \"warning.main\",\n          gutterBottom: true,\n          children: \"Business Credentials Required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 5,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Business ID\",\n              value: businessId,\n              onChange: e => setBusinessId(e.target.value),\n              placeholder: \"Enter your business ID\",\n              helperText: \"Required for managing templates\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 5,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Business API Key\",\n              value: businessApiKey,\n              onChange: e => setBusinessApiKey(e.target.value),\n              placeholder: \"Enter your business API key\",\n              helperText: \"Required for authentication\",\n              type: \"password\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 2,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: saveCredentials,\n              fullWidth: true,\n              sx: {\n                height: '56px'\n              },\n              children: \"Validate & Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 21\n      }, this), (showAgentIdInput || !agentId) && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3,\n          p: 2,\n          border: '1px dashed',\n          borderColor: 'warning.main',\n          borderRadius: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          color: \"warning.main\",\n          gutterBottom: true,\n          children: \"Agent ID Required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 9,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Agent ID\",\n              value: agentId,\n              onChange: e => setAgentId(e.target.value),\n              placeholder: \"Enter an agent ID\",\n              helperText: \"Required for managing templates\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 3,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => {\n                if (agentId) {\n                  // Save to localStorage\n                  localStorage.setItem('agentId', agentId);\n                  setShowAgentIdInput(false);\n                  showSnackbar('Agent ID saved', 'success');\n                  // Fetch templates for this agent\n                  fetchTemplatesInternal();\n                } else {\n                  showSnackbar('Please enter an Agent ID', 'error');\n                }\n              },\n              fullWidth: true,\n              sx: {\n                height: '56px'\n              },\n              children: \"Save & Use\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            mt: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"After saving or changing the agent ID, click the button below to load templates:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              fullWidth: true,\n              onClick: fetchTemplatesInternal,\n              startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 48\n              }, this),\n              sx: {\n                mt: 1\n              },\n              children: \"Load Templates for this Agent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Search Templates\",\n              value: filterType,\n              onChange: e => setFilterType(e.target.value),\n              placeholder: \"Search by type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 44\n              }, this),\n              onClick: () => {\n                // Use the internal implementation if fetchTemplates is not a function\n                if (typeof fetchTemplates === 'function') {\n                  fetchTemplates();\n                } else {\n                  fetchTemplatesInternal();\n                }\n              },\n              children: \"Refresh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          p: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: filteredTemplates.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"No templates found. Create your first template to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(List, {\n          sx: {\n            bgcolor: 'background.paper'\n          },\n          children: filteredTemplates.map(template => /*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            onClick: () => handleEditExistingTemplate(template.template_id),\n            sx: {\n              mb: 1,\n              bgcolor: 'background.paper',\n              border: '1px solid',\n              borderColor: 'divider',\n              borderRadius: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: template.template_name || 'Unnamed Template'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 674,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(Chip, {\n                  size: \"small\",\n                  label: getTemplateTypeLabel(template.template_type),\n                  sx: {\n                    ml: 1\n                  },\n                  color: isDefaultTemplate(template.template_type) ? 'secondary' : 'primary',\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 677,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 49\n              }, this),\n              secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"span\",\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: template.template_description || 'No description'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 688,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"span\",\n                  variant: \"caption\",\n                  color: \"text.secondary\",\n                  sx: {\n                    display: 'block'\n                  },\n                  children: [\"ID: \", template.template_id]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Edit Template\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"edit\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleEditExistingTemplate(template.template_id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 707,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 699,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Duplicate Template\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"duplicate\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleDuplicateTemplate(template);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(ContentCopyIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 719,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 711,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Delete Template\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"delete\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleDeleteTemplate(template.template_id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 731,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 723,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 722,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 41\n            }, this)]\n          }, template.template_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 29\n        }, this)\n      }, void 0, false), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: editDialogOpen,\n        onClose: () => setEditDialogOpen(false),\n        maxWidth: \"md\",\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Edit Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: editingTemplate && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            sx: {\n              mt: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                required: true,\n                label: \"Template Name\",\n                value: editingTemplate.template_name,\n                onChange: e => setEditingTemplate({\n                  ...editingTemplate,\n                  template_name: e.target.value\n                }),\n                margin: \"normal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 749,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                fullWidth: true,\n                margin: \"normal\",\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"edit-template-type-label\",\n                  children: \"Template Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 764,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"edit-template-type-label\",\n                  value: editingTemplate.template_type,\n                  onChange: e => setEditingTemplate({\n                    ...editingTemplate,\n                    template_type: e.target.value\n                  }),\n                  label: \"Template Type\",\n                  children: templateTypes.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: type.value,\n                    children: type.label\n                  }, type.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 775,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 765,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                required: true,\n                label: \"Template Text\",\n                value: editingTemplate.template_text,\n                onChange: e => setEditingTemplate({\n                  ...editingTemplate,\n                  template_text: e.target.value\n                }),\n                margin: \"normal\",\n                multiline: true,\n                rows: 8\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  p: 2,\n                  bgcolor: '#f5f5f5',\n                  borderRadius: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  gutterBottom: true,\n                  children: \"Available Variables\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 801,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    gap: 0.5\n                  },\n                  children: availableVariable === null || availableVariable === void 0 ? void 0 : availableVariable.map(variable => /*#__PURE__*/_jsxDEV(Chip, {\n                    label: variable,\n                    size: \"small\",\n                    onClick: () => setEditingTemplate({\n                      ...editingTemplate,\n                      template_text: `${editingTemplate.template_text} {${variable}}`\n                    })\n                  }, variable, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 806,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setEditDialogOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleUpdateTemplate,\n            color: \"primary\",\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 40\n            }, this),\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: snackbar.open,\n        autoHideDuration: 6000,\n        onClose: handleCloseSnackbar,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnackbar,\n          severity: snackbar.severity,\n          sx: {\n            width: '100%'\n          },\n          children: snackbar.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }, this);\n}\n_s(TemplateManagement, \"4VJVclLCy2mGWTNi9oQL04fiYlo=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = TemplateManagement;\nexport default TemplateManagement;\nvar _c;\n$RefreshReg$(_c, \"TemplateManagement\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useLocation","TextField","Button","Typography","Card","CardContent","Box","TextareaAutosize","Select","MenuItem","InputLabel","FormControl","Grid","Paper","Divider","Tab","Tabs","Alert","List","ListItem","ListItemText","ListItemSecondaryAction","IconButton","Chip","Dialog","DialogTitle","DialogContent","DialogActions","CircularProgress","Snackbar","Container","Tooltip","DeleteIcon","EditIcon","ContentCopyIcon","SaveIcon","RefreshIcon","ArrowBackIcon","TemplateSection","AddIcon","FilterListIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","TemplateManagement","templateID","setTemplateID","availableVariable","setAvailableVariable","selectedVariable","setSelectedVariable","handleTemplateSelection","handleVariableSelection","addVariableToTemplate","templateName","setTemplateName","templateText","setTemplateText","templateOutput","createTemplate","fetchTemplates","handleSnackbarOpen","handleSaveDefaultTemplate","apiKey","setTemplateOutput","_s","navigate","location","templates","setTemplates","selectedTemplate","setSelectedTemplate","templateType","setTemplateType","errorMessage","setErrorMessage","successMessage","setSuccessMessage","activeTab","setActiveTab","isLoading","setIsLoading","editDialogOpen","setEditDialogOpen","editingTemplate","setEditingTemplate","filterType","setFilterType","showBusinessIdInput","setShowBusinessIdInput","businessId","setBusinessId","businessApiKey","setBusinessApiKey","agentId","setAgentId","filteredTemplates","setFilteredTemplates","snackbar","setSnackbar","open","message","severity","showAgentIdInput","setShowAgentIdInput","templateTypes","value","label","queryParams","URLSearchParams","window","search","queryBusinessId","get","queryAgentId","storedBusinessId","localStorage","getItem","storedApiKey","storedAgentId","console","log","fetchTemplatesInternal","showSnackbar","url","response","fetch","method","headers","credentials","ok","errorData","json","catch","Error","error","status","data","normalizedTemplates","Array","isArray","map","template","template_id","id","Math","random","toString","substring","template_name","template_text","template_type","template_description","variables","length","err","mockVariables","handleCreateTemplate","body","JSON","stringify","setTimeout","handleUpdateTemplate","business_id","agent_id","handleDeleteTemplate","templateId","confirm","handleDuplicateTemplate","handleEditTemplate","handleAddVariable","variable","prev","handleTabChange","event","newValue","getFilteredTemplates","some","t","searchTerm","toLowerCase","filter","includes","type","isDefaultTemplate","startsWith","getTemplateTypeLabel","found","find","handleNavigateToHome","validateCredentials","saveCredentials","isValid","setItem","document","cookie","handleCloseSnackbar","handleCreateNewTemplate","handleEditExistingTemplate","templateUpdated","refreshParam","removeItem","maxWidth","sx","mt","mb","children","p","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","gutterBottom","flexGrow","color","startIcon","border","borderColor","borderRadius","container","spacing","item","xs","md","fullWidth","onChange","e","target","placeholder","helperText","required","height","justifyContent","bgcolor","button","primary","size","ml","secondary","title","edge","stopPropagation","onClose","margin","labelId","multiline","rows","flexWrap","gap","autoHideDuration","anchorOrigin","vertical","horizontal","width","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/TemplateManagement.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n    TextField, Button, Typography, Card, CardContent, Box, TextareaAutosize,\r\n    Select, MenuItem, InputLabel, FormControl, Grid, Paper, Divider, Tab, Tabs, Alert, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Chip, Dialog, DialogTitle, DialogContent, DialogActions, CircularProgress, Snackbar, Container, Tooltip\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport TemplateSection from './TemplateSection';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\n\r\nfunction TemplateManagement({ templateID, setTemplateID, availableVariable = [], setAvailableVariable, selectedVariable, setSelectedVariable, handleTemplateSelection, handleVariableSelection, addVariableToTemplate, templateName, setTemplateName, templateText, setTemplateText, templateOutput, createTemplate, fetchTemplates, handleSnackbarOpen, handleSaveDefaultTemplate, apiKey, setTemplateOutput }) {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [templates, setTemplates] = useState([]);\r\n    const [selectedTemplate, setSelectedTemplate] = useState(null);\r\n    const [templateType, setTemplateType] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    const [editingTemplate, setEditingTemplate] = useState(null);\r\n    const [filterType, setFilterType] = useState('all');\r\n    const [showBusinessIdInput, setShowBusinessIdInput] = useState(!apiKey || !templateID);\r\n    const [businessId, setBusinessId] = useState(templateID || '');\r\n    const [businessApiKey, setBusinessApiKey] = useState(apiKey || '');\r\n    const [agentId, setAgentId] = useState('');\r\n    const [filteredTemplates, setFilteredTemplates] = useState([]);\r\n    const [snackbar, setSnackbar] = useState({\r\n        open: false,\r\n        message: '',\r\n        severity: 'success'\r\n    });\r\n    const [showAgentIdInput, setShowAgentIdInput] = useState(!agentId);\r\n\r\n    const templateTypes = [\r\n        { value: 'stage_selection', label: 'Stage Selection' },\r\n        { value: 'data_extraction', label: 'Data Extraction' },\r\n        { value: 'response_generation', label: 'Response Generation' },\r\n        { value: 'default_stage_selection', label: 'Default Stage Selection' },\r\n        { value: 'default_data_extraction', label: 'Default Data Extraction' },\r\n        { value: 'default_response_generation', label: 'Default Response Generation' }\r\n    ];\r\n\r\n    // Parse query parameters if any\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    const queryBusinessId = queryParams.get('business_id');\r\n    const queryAgentId = queryParams.get('agent_id');\r\n    \r\n    // Get stored credentials from localStorage\r\n    const storedBusinessId = localStorage.getItem('businessId');\r\n    const storedApiKey = localStorage.getItem('businessApiKey');\r\n    const storedAgentId = localStorage.getItem('agentId');\r\n    \r\n    // Update state with query params and localStorage values\r\n    useEffect(() => {\r\n        // Update businessId if query param or localStorage has a value\r\n        if (queryBusinessId || storedBusinessId) {\r\n            setBusinessId(queryBusinessId || storedBusinessId);\r\n        }\r\n        \r\n        // Update businessApiKey if localStorage has a value\r\n        if (storedApiKey) {\r\n            setBusinessApiKey(storedApiKey);\r\n        }\r\n        \r\n        // Update agentId if query param or localStorage has a value\r\n        if (queryAgentId || storedAgentId) {\r\n            setAgentId(queryAgentId || storedAgentId);\r\n        }\r\n        \r\n        // Update visibility of input fields\r\n        setShowBusinessIdInput(!businessId || !businessApiKey);\r\n        setShowAgentIdInput(!agentId);\r\n    }, [queryBusinessId, storedBusinessId, storedApiKey, queryAgentId, storedAgentId]);\r\n    \r\n    // Initialize filteredTemplates when templates change\r\n    useEffect(() => {\r\n        setFilteredTemplates(templates);\r\n    }, [templates]);\r\n    \r\n    // Effect to fetch templates on mount\r\n    useEffect(() => {\r\n        if (businessId && agentId) {\r\n            console.log(\"TemplateManagement.js - Fetching templates with:\", { businessId, agentId });\r\n            if (typeof fetchTemplates === 'function') {\r\n                fetchTemplates();\r\n            } else {\r\n                // If fetchTemplates is not a prop, use the internal implementation\r\n                fetchTemplatesInternal();\r\n            }\r\n        }\r\n    }, [businessId, agentId, fetchTemplates]);\r\n    \r\n    // Internal implementation of fetchTemplates\r\n    const fetchTemplatesInternal = async () => {\r\n        if (!businessId) {\r\n            showSnackbar('Business ID is required to fetch templates', 'error');\r\n            setShowBusinessIdInput(true);\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        \r\n        if (!agentId) {\r\n            showSnackbar('Agent ID is required to fetch templates', 'error');\r\n            setShowAgentIdInput(true);\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        \r\n        if (!businessApiKey) {\r\n            showSnackbar('Business API Key is required to fetch templates', 'error');\r\n            setShowBusinessIdInput(true);\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        \r\n        setIsLoading(true);\r\n        try {\r\n            const url = `/templates?business_id=${businessId}&agent_id=${agentId}`;\r\n            console.log(\"Fetching templates from:\", url);\r\n            \r\n            const response = await fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Authorization': `Bearer ${businessApiKey}`\r\n                },\r\n                credentials: 'include'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.error || errorData.message || `Failed to fetch templates (${response.status})`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            console.log('Fetched templates (raw):', data);\r\n            \r\n            // Normalize the templates data to ensure all needed fields exist\r\n            const normalizedTemplates = Array.isArray(data) ? data.map(template => ({\r\n                template_id: template.template_id || template.id || `temp-${Math.random().toString(36).substring(2, 9)}`,\r\n                template_name: template.template_name || 'Unnamed Template',\r\n                template_text: template.template_text || '',\r\n                template_type: template.template_type || 'Unknown Type',\r\n                template_description: template.template_description || 'No description',\r\n                variables: template.variables || []\r\n            })) : [];\r\n            \r\n            console.log('Normalized templates:', normalizedTemplates);\r\n            \r\n            setTemplates(normalizedTemplates);\r\n            setFilteredTemplates(normalizedTemplates);\r\n            \r\n            // Show message about number of templates loaded\r\n            showSnackbar(`${normalizedTemplates.length} templates loaded successfully`, 'success');\r\n        } catch (err) {\r\n            console.error('Error fetching templates:', err);\r\n            showSnackbar(err.message, 'error');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // TODO: Implement API endpoint to retrieve available variables\r\n        const mockVariables = ['variable1', 'variable2', 'variable3'];\r\n        if (typeof setAvailableVariable === 'function') {\r\n            setAvailableVariable(mockVariables);\r\n        }\r\n    }, [setAvailableVariable]);\r\n\r\n    const handleCreateTemplate = async () => {\r\n        try {\r\n            if (!templateName || !templateText || !templateType) {\r\n                setErrorMessage('Template name, text, and type are required');\r\n                return;\r\n            }\r\n            \r\n            const response = await fetch('/templates', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    template_name: templateName,\r\n                    template_text: templateText,\r\n                    template_type: templateType\r\n                }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to create template');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            \r\n            // Reset form\r\n            setTemplateName('');\r\n            setTemplateText('');\r\n            setTemplateType('');\r\n            \r\n            // Refresh templates\r\n            fetchTemplates();\r\n            \r\n            setSuccessMessage('Template created successfully');\r\n            \r\n            // Clear success message after 3 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 3000);\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const handleUpdateTemplate = async () => {\r\n        try {\r\n            if (!editingTemplate) return;\r\n            \r\n            const response = await fetch(`/templates/${editingTemplate.template_id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': `Bearer ${businessApiKey}`\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    template_name: editingTemplate.template_name,\r\n                    template_text: editingTemplate.template_text,\r\n                    template_type: editingTemplate.template_type,\r\n                    business_id: businessId,\r\n                    agent_id: agentId\r\n                }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.error || errorData.message || 'Failed to update template');\r\n            }\r\n            \r\n            // Close dialog and refresh templates\r\n            setEditDialogOpen(false);\r\n            fetchTemplatesInternal();\r\n            \r\n            showSnackbar('Template updated successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Error updating template:', error);\r\n            showSnackbar(`Error: ${error.message}`, 'error');\r\n        }\r\n    };\r\n\r\n    const handleDeleteTemplate = async (templateId) => {\r\n        if (!window.confirm('Are you sure you want to delete this template?')) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            const response = await fetch(`/templates/${templateId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Authorization': `Bearer ${businessApiKey}`\r\n                },\r\n                credentials: 'include'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.error || errorData.message || 'Failed to delete template');\r\n            }\r\n            \r\n            // Refresh templates\r\n            fetchTemplatesInternal();\r\n            \r\n            showSnackbar('Template deleted successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Error deleting template:', error);\r\n            showSnackbar(`Error: ${error.message}`, 'error');\r\n        }\r\n    };\r\n\r\n    const handleDuplicateTemplate = async (template) => {\r\n        try {\r\n            const response = await fetch('/templates', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': `Bearer ${businessApiKey}`\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    template_name: `${template.template_name} (Copy)`,\r\n                    template_text: template.template_text,\r\n                    template_type: template.template_type,\r\n                    business_id: businessId,\r\n                    agent_id: agentId\r\n                }),\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.error || errorData.message || 'Failed to duplicate template');\r\n            }\r\n            \r\n            // Refresh templates\r\n            fetchTemplatesInternal();\r\n            \r\n            showSnackbar('Template duplicated successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Error duplicating template:', error);\r\n            showSnackbar(`Error: ${error.message}`, 'error');\r\n        }\r\n    };\r\n\r\n    const handleEditTemplate = (template) => {\r\n        setEditingTemplate(template);\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n    const handleAddVariable = (variable) => {\r\n        setTemplateText((prev) => `${prev} {${variable}}`);\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setActiveTab(newValue);\r\n    };\r\n\r\n    const getFilteredTemplates = () => {\r\n        // If searching by text instead of filtering by type\r\n        if (typeof filterType === 'string' && filterType.length > 0 && !templateTypes.some(t => t.value === filterType)) {\r\n            // This is a text search, not a type filter\r\n            const searchTerm = filterType.toLowerCase();\r\n            return templates.filter(template => \r\n                (template.template_name && template.template_name.toLowerCase().includes(searchTerm)) ||\r\n                (template.template_description && template.template_description.toLowerCase().includes(searchTerm)) ||\r\n                (template.template_id && template.template_id.toLowerCase().includes(searchTerm)) ||\r\n                (template.template_type && template.template_type.toLowerCase().includes(searchTerm))\r\n            );\r\n        }\r\n        \r\n        // Regular type filtering\r\n        if (filterType === 'all') {\r\n            return templates;\r\n        }\r\n        \r\n        return templates.filter(template => {\r\n            const type = template.template_type;\r\n            // Handle the case where type might be undefined or not a string\r\n            if (!type || typeof type !== 'string') return false;\r\n            return type === filterType;\r\n        });\r\n    };\r\n\r\n    const isDefaultTemplate = (type) => {\r\n        return type && typeof type === 'string' && type.startsWith('default_');\r\n    };\r\n\r\n    const getTemplateTypeLabel = (type) => {\r\n        if (!type) return 'Unknown Type';\r\n        const found = templateTypes.find(t => t.value === type);\r\n        return found ? found.label : type;\r\n    };\r\n\r\n    const handleNavigateToHome = () => {\r\n        navigate('/business');\r\n    };\r\n\r\n    const validateCredentials = async () => {\r\n        if (!businessId || !businessApiKey) {\r\n            showSnackbar('Business ID and API Key are required', 'error');\r\n            setShowBusinessIdInput(true);\r\n            return false;\r\n        }\r\n        \r\n        try {\r\n            const response = await fetch(`/businesses/validate-credentials?business_id=${businessId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': `Bearer ${businessApiKey}`\r\n                },\r\n                credentials: 'include'\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Invalid business ID or API key');\r\n            }\r\n            \r\n            return true;\r\n        } catch (err) {\r\n            console.error('Credential validation error:', err);\r\n            showSnackbar('Failed to validate credentials: ' + err.message, 'error');\r\n            setShowBusinessIdInput(true);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const saveCredentials = async () => {\r\n        if (!businessId || !businessApiKey) {\r\n            showSnackbar('Please enter both Business ID and API Key', 'error');\r\n            return;\r\n        }\r\n        \r\n        const isValid = await validateCredentials();\r\n        if (isValid) {\r\n            // Save to both localStorage and cookies\r\n            localStorage.setItem('businessId', businessId);\r\n            localStorage.setItem('businessApiKey', businessApiKey);\r\n            document.cookie = `businessId=${businessId}; path=/; max-age=86400`;\r\n            document.cookie = `businessApiKey=${businessApiKey}; path=/; max-age=86400`;\r\n            \r\n            setShowBusinessIdInput(false);\r\n            showSnackbar('Business credentials validated and saved', 'success');\r\n            \r\n            // Refresh templates\r\n            fetchTemplatesInternal();\r\n        }\r\n    };\r\n\r\n    const showSnackbar = (message, severity = 'success') => {\r\n        setSnackbar({\r\n            open: true,\r\n            message,\r\n            severity\r\n        });\r\n    };\r\n\r\n    const handleCloseSnackbar = () => {\r\n        setSnackbar(prev => ({\r\n            ...prev,\r\n            open: false\r\n        }));\r\n    };\r\n\r\n    const handleCreateNewTemplate = () => {\r\n        let url = `/template-editor/new?business_id=${businessId}`;\r\n        if (agentId) {\r\n            url += `&agent_id=${agentId}`;\r\n        }\r\n        navigate(url);\r\n    };\r\n    \r\n    const handleEditExistingTemplate = (templateId) => {\r\n        let url = `/template-editor/${templateId}?business_id=${businessId}`;\r\n        if (agentId) {\r\n            url += `&agent_id=${agentId}`;\r\n        }\r\n        navigate(url);\r\n    };\r\n\r\n    // Effect to check if we need to refresh templates (coming from template editor)\r\n    useEffect(() => {\r\n        const templateUpdated = localStorage.getItem('template_updated');\r\n        const refreshParam = queryParams.get('refresh');\r\n        \r\n        if (templateUpdated === 'true' || refreshParam) {\r\n            // Clear the flag\r\n            localStorage.removeItem('template_updated');\r\n            \r\n            // If we have both business ID and agent ID, fetch templates\r\n            if (businessId && agentId && businessApiKey) {\r\n                console.log(\"Template was just updated, refreshing templates list\");\r\n                setTimeout(() => {\r\n                    fetchTemplatesInternal();\r\n                }, 500); // Small delay to ensure backend has processed\r\n            }\r\n        }\r\n    }, [location, businessId, agentId, businessApiKey]);\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n            <Paper sx={{ p: 3, mb: 4 }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    <IconButton onClick={handleNavigateToHome} sx={{ mr: 1 }}>\r\n                        <ArrowBackIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h5\" component=\"h1\" gutterBottom sx={{ flexGrow: 1 }}>\r\n                        Template Management\r\n                    </Typography>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={() => fetchTemplatesInternal()}\r\n                        startIcon={<RefreshIcon />}\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        Refresh Templates\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleCreateNewTemplate}\r\n                        startIcon={<AddIcon />}\r\n                    >\r\n                        Create Template\r\n                    </Button>\r\n                </Box>\r\n                \r\n                <Divider sx={{ mb: 3 }} />\r\n                \r\n                {/* Business ID input section */}\r\n                {(showBusinessIdInput || !businessId || !businessApiKey) && (\r\n                    <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n                        <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n                            Business Credentials Required\r\n                        </Typography>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} md={5}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Business ID\"\r\n                                    value={businessId}\r\n                                    onChange={(e) => setBusinessId(e.target.value)}\r\n                                    placeholder=\"Enter your business ID\"\r\n                                    helperText=\"Required for managing templates\"\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={5}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Business API Key\"\r\n                                    value={businessApiKey}\r\n                                    onChange={(e) => setBusinessApiKey(e.target.value)}\r\n                                    placeholder=\"Enter your business API key\"\r\n                                    helperText=\"Required for authentication\"\r\n                                    type=\"password\"\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={2}>\r\n                                <Button \r\n                                    variant=\"contained\" \r\n                                    color=\"primary\"\r\n                                    onClick={saveCredentials}\r\n                                    fullWidth\r\n                                    sx={{ height: '56px' }}\r\n                                >\r\n                                    Validate & Save\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )}\r\n                \r\n                {/* Agent ID input section */}\r\n                {(showAgentIdInput || !agentId) && (\r\n                    <Box sx={{ mb: 3, p: 2, border: '1px dashed', borderColor: 'warning.main', borderRadius: 1 }}>\r\n                        <Typography variant=\"subtitle1\" color=\"warning.main\" gutterBottom>\r\n                            Agent ID Required\r\n                        </Typography>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} md={9}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Agent ID\"\r\n                                    value={agentId}\r\n                                    onChange={(e) => setAgentId(e.target.value)}\r\n                                    placeholder=\"Enter an agent ID\"\r\n                                    helperText=\"Required for managing templates\"\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={3}>\r\n                                <Button \r\n                                    variant=\"contained\" \r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        if (agentId) {\r\n                                            // Save to localStorage\r\n                                            localStorage.setItem('agentId', agentId);\r\n                                            setShowAgentIdInput(false);\r\n                                            showSnackbar('Agent ID saved', 'success');\r\n                                            // Fetch templates for this agent\r\n                                            fetchTemplatesInternal();\r\n                                        } else {\r\n                                            showSnackbar('Please enter an Agent ID', 'error');\r\n                                        }\r\n                                    }}\r\n                                    fullWidth\r\n                                    sx={{ height: '56px' }}\r\n                                >\r\n                                    Save & Use\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} mt={2}>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    After saving or changing the agent ID, click the button below to load templates:\r\n                                </Typography>\r\n                                <Button \r\n                                    variant=\"outlined\" \r\n                                    fullWidth\r\n                                    onClick={fetchTemplatesInternal}\r\n                                    startIcon={<RefreshIcon />}\r\n                                    sx={{ mt: 1 }}\r\n                                >\r\n                                    Load Templates for this Agent\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )}\r\n                \r\n                {/* Template filter */}\r\n                <Box sx={{ mb: 3 }}>\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item xs={12} md={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Search Templates\"\r\n                                value={filterType}\r\n                                onChange={(e) => setFilterType(e.target.value)}\r\n                                placeholder=\"Search by type\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                startIcon={<RefreshIcon />}\r\n                                onClick={() => {\r\n                                    // Use the internal implementation if fetchTemplates is not a function\r\n                                    if (typeof fetchTemplates === 'function') {\r\n                                        fetchTemplates();\r\n                                    } else {\r\n                                        fetchTemplatesInternal();\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Refresh\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                \r\n                {isLoading ? (\r\n                    <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n                        <CircularProgress />\r\n                    </Box>\r\n                ) : (\r\n                    <>\r\n                        {filteredTemplates.length === 0 ? (\r\n                            <Alert severity=\"info\">\r\n                                No templates found. Create your first template to get started.\r\n                            </Alert>\r\n                        ) : (\r\n                            <List sx={{ bgcolor: 'background.paper' }}>\r\n                                {filteredTemplates.map((template) => (\r\n                                    <ListItem\r\n                                        key={template.template_id}\r\n                                        button\r\n                                        onClick={() => handleEditExistingTemplate(template.template_id)}\r\n                                        sx={{ \r\n                                            mb: 1,\r\n                                            bgcolor: 'background.paper',\r\n                                            border: '1px solid',\r\n                                            borderColor: 'divider',\r\n                                            borderRadius: 1\r\n                                        }}\r\n                                    >\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                    <Typography variant=\"subtitle1\">\r\n                                                        {template.template_name || 'Unnamed Template'}\r\n                                                    </Typography>\r\n                                                    <Chip \r\n                                                        size=\"small\" \r\n                                                        label={getTemplateTypeLabel(template.template_type)} \r\n                                                        sx={{ ml: 1 }}\r\n                                                        color={isDefaultTemplate(template.template_type) ? 'secondary' : 'primary'}\r\n                                                        variant=\"outlined\"\r\n                                                    />\r\n                                                </Box>\r\n                                            }\r\n                                            secondary={\r\n                                                <>\r\n                                                    <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\">\r\n                                                        {template.template_description || 'No description'}\r\n                                                    </Typography>\r\n                                                    <Typography component=\"span\" variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block' }}>\r\n                                                        ID: {template.template_id}\r\n                                                    </Typography>\r\n                                                </>\r\n                                            }\r\n                                        />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Tooltip title=\"Edit Template\">\r\n                                                <IconButton \r\n                                                    edge=\"end\" \r\n                                                    aria-label=\"edit\"\r\n                                                    onClick={(e) => {\r\n                                                        e.stopPropagation();\r\n                                                        handleEditExistingTemplate(template.template_id);\r\n                                                    }}\r\n                                                >\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Duplicate Template\">\r\n                                                <IconButton \r\n                                                    edge=\"end\" \r\n                                                    aria-label=\"duplicate\"\r\n                                                    onClick={(e) => {\r\n                                                        e.stopPropagation();\r\n                                                        handleDuplicateTemplate(template);\r\n                                                    }}\r\n                                                >\r\n                                                    <ContentCopyIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Delete Template\">\r\n                                                <IconButton \r\n                                                    edge=\"end\" \r\n                                                    aria-label=\"delete\"\r\n                                                    onClick={(e) => {\r\n                                                        e.stopPropagation();\r\n                                                        handleDeleteTemplate(template.template_id);\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        )}\r\n                    </>\r\n                )}\r\n                \r\n                {/* Edit Template Dialog */}\r\n                <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n                    <DialogTitle>Edit Template</DialogTitle>\r\n                    <DialogContent>\r\n                        {editingTemplate && (\r\n                            <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        required\r\n                                        label=\"Template Name\"\r\n                                        value={editingTemplate.template_name}\r\n                                        onChange={(e) => setEditingTemplate({\r\n                                            ...editingTemplate,\r\n                                            template_name: e.target.value\r\n                                        })}\r\n                                        margin=\"normal\"\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={12}>\r\n                                    <FormControl fullWidth margin=\"normal\">\r\n                                        <InputLabel id=\"edit-template-type-label\">Template Type</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"edit-template-type-label\"\r\n                                            value={editingTemplate.template_type}\r\n                                            onChange={(e) => setEditingTemplate({\r\n                                                ...editingTemplate,\r\n                                                template_type: e.target.value\r\n                                            })}\r\n                                            label=\"Template Type\"\r\n                                        >\r\n                                            {templateTypes.map((type) => (\r\n                                                <MenuItem key={type.value} value={type.value}>\r\n                                                    {type.label}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        required\r\n                                        label=\"Template Text\"\r\n                                        value={editingTemplate.template_text}\r\n                                        onChange={(e) => setEditingTemplate({\r\n                                            ...editingTemplate,\r\n                                            template_text: e.target.value\r\n                                        })}\r\n                                        margin=\"normal\"\r\n                                        multiline\r\n                                        rows={8}\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={12}>\r\n                                    <Box sx={{ p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                                            Available Variables\r\n                                        </Typography>\r\n                                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                            {availableVariable?.map((variable) => (\r\n                                                <Chip\r\n                                                    key={variable}\r\n                                                    label={variable}\r\n                                                    size=\"small\"\r\n                                                    onClick={() => setEditingTemplate({\r\n                                                        ...editingTemplate,\r\n                                                        template_text: `${editingTemplate.template_text} {${variable}}`\r\n                                                    })}\r\n                                                />\r\n                                            ))}\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>\r\n                        <Button \r\n                            onClick={handleUpdateTemplate} \r\n                            color=\"primary\" \r\n                            variant=\"contained\"\r\n                            startIcon={<SaveIcon />}\r\n                        >\r\n                            Save Changes\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                \r\n                {/* Snackbar for notifications */}\r\n                <Snackbar\r\n                    open={snackbar.open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleCloseSnackbar}\r\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                >\r\n                    <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n                        {snackbar.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TemplateManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}