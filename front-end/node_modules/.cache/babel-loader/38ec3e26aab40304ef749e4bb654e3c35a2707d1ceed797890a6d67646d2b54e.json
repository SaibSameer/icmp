{"ast":null,"code":"// Global request cache to prevent duplicate API calls\nconst apiCache = {\n  cache: {},\n  get: function (url) {\n    var _this$cache$url;\n    return (_this$cache$url = this.cache[url]) === null || _this$cache$url === void 0 ? void 0 : _this$cache$url.data;\n  },\n  set: function (url, data, ttl = 60000) {\n    // Default TTL: 1 minute\n    this.cache[url] = {\n      data,\n      expiry: Date.now() + ttl\n    };\n  },\n  isValid: function (url) {\n    const item = this.cache[url];\n    return item && item.expiry > Date.now();\n  },\n  clear: function () {\n    this.cache = {};\n  }\n};\n\n/**\r\n * Get stored credentials from localStorage\r\n * @returns {Object} Object containing businessId and businessApiKey\r\n */\nexport const getStoredCredentials = () => {\n  const businessId = localStorage.getItem('businessId');\n  const businessApiKey = localStorage.getItem('businessApiKey');\n  return {\n    businessId,\n    businessApiKey\n  };\n};\n\n/**\r\n * Fetches data with caching support\r\n * @param {string} url - The URL to fetch\r\n * @param {Object} options - Fetch options\r\n * @returns {Promise<Response>} - The fetch response\r\n */\nexport const cachedFetch = async (url, options = {}) => {\n  // Ensure URL ends with trailing slash for POST/PUT requests\n  if ((options.method === 'POST' || options.method === 'PUT') && !url.endsWith('/')) {\n    url = `${url}/`;\n  }\n\n  // Add business_id to URL if not already present\n  const urlObj = new URL(url, window.location.origin);\n  if (!urlObj.searchParams.has('business_id')) {\n    const businessId = localStorage.getItem('businessId');\n    if (businessId) {\n      urlObj.searchParams.append('business_id', businessId);\n      url = urlObj.toString();\n    }\n  }\n\n  // Create cache key\n  const cacheKey = `${url}-${options.method || 'GET'}-${JSON.stringify(options.body || {})}`;\n\n  // Check cache for GET requests\n  if (options.method === 'GET' || !options.method) {\n    const cachedData = apiCache.get(cacheKey);\n    if (cachedData && apiCache.isValid(cacheKey)) {\n      console.log(`Using cached data for ${url}`);\n      return new Response(JSON.stringify(cachedData), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }\n\n  // Prepare headers\n  const headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...options.headers\n  };\n\n  // Add API key if available - use X-API-Key header which is more reliable\n  const apiKey = localStorage.getItem('businessApiKey');\n  if (apiKey) {\n    headers['X-API-Key'] = apiKey;\n  }\n\n  // Prepare fetch options\n  const fetchOptions = {\n    ...options,\n    headers,\n    credentials: 'include'\n  };\n\n  // Stringify body if it's an object\n  if (fetchOptions.body && typeof fetchOptions.body === 'object') {\n    fetchOptions.body = JSON.stringify(fetchOptions.body);\n  }\n\n  // Make the fetch request\n  console.log(`Fetching ${url} with options:`, fetchOptions);\n  const response = await fetch(url, fetchOptions);\n\n  // Cache successful GET responses\n  if ((options.method === 'GET' || !options.method) && response.ok) {\n    const data = await response.clone().json().catch(() => null);\n    if (data) {\n      apiCache.set(cacheKey, data);\n    }\n  }\n  return response;\n};","map":{"version":3,"names":["apiCache","cache","get","url","_this$cache$url","data","set","ttl","expiry","Date","now","isValid","item","clear","getStoredCredentials","businessId","localStorage","getItem","businessApiKey","cachedFetch","options","method","endsWith","urlObj","URL","window","location","origin","searchParams","has","append","toString","cacheKey","JSON","stringify","body","cachedData","console","log","Response","status","headers","apiKey","fetchOptions","credentials","response","fetch","ok","clone","json","catch"],"sources":["C:/icmp_events_api/front-end/src/utils/fetchUtils.js"],"sourcesContent":["// Global request cache to prevent duplicate API calls\r\nconst apiCache = {\r\n  cache: {},\r\n  get: function(url) {\r\n    return this.cache[url]?.data;\r\n  },\r\n  set: function(url, data, ttl = 60000) { // Default TTL: 1 minute\r\n    this.cache[url] = {\r\n      data,\r\n      expiry: Date.now() + ttl\r\n    };\r\n  },\r\n  isValid: function(url) {\r\n    const item = this.cache[url];\r\n    return item && item.expiry > Date.now();\r\n  },\r\n  clear: function() {\r\n    this.cache = {};\r\n  }\r\n};\r\n\r\n/**\r\n * Get stored credentials from localStorage\r\n * @returns {Object} Object containing businessId and businessApiKey\r\n */\r\nexport const getStoredCredentials = () => {\r\n  const businessId = localStorage.getItem('businessId');\r\n  const businessApiKey = localStorage.getItem('businessApiKey');\r\n  return { businessId, businessApiKey };\r\n};\r\n\r\n/**\r\n * Fetches data with caching support\r\n * @param {string} url - The URL to fetch\r\n * @param {Object} options - Fetch options\r\n * @returns {Promise<Response>} - The fetch response\r\n */\r\nexport const cachedFetch = async (url, options = {}) => {\r\n  // Ensure URL ends with trailing slash for POST/PUT requests\r\n  if ((options.method === 'POST' || options.method === 'PUT') && !url.endsWith('/')) {\r\n    url = `${url}/`;\r\n  }\r\n  \r\n  // Add business_id to URL if not already present\r\n  const urlObj = new URL(url, window.location.origin);\r\n  if (!urlObj.searchParams.has('business_id')) {\r\n    const businessId = localStorage.getItem('businessId');\r\n    if (businessId) {\r\n      urlObj.searchParams.append('business_id', businessId);\r\n      url = urlObj.toString();\r\n    }\r\n  }\r\n  \r\n  // Create cache key\r\n  const cacheKey = `${url}-${options.method || 'GET'}-${JSON.stringify(options.body || {})}`;\r\n  \r\n  // Check cache for GET requests\r\n  if (options.method === 'GET' || !options.method) {\r\n    const cachedData = apiCache.get(cacheKey);\r\n    if (cachedData && apiCache.isValid(cacheKey)) {\r\n      console.log(`Using cached data for ${url}`);\r\n      return new Response(JSON.stringify(cachedData), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Prepare headers\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    ...options.headers\r\n  };\r\n  \r\n  // Add API key if available - use X-API-Key header which is more reliable\r\n  const apiKey = localStorage.getItem('businessApiKey');\r\n  if (apiKey) {\r\n    headers['X-API-Key'] = apiKey;\r\n  }\r\n  \r\n  // Prepare fetch options\r\n  const fetchOptions = {\r\n    ...options,\r\n    headers,\r\n    credentials: 'include'\r\n  };\r\n  \r\n  // Stringify body if it's an object\r\n  if (fetchOptions.body && typeof fetchOptions.body === 'object') {\r\n    fetchOptions.body = JSON.stringify(fetchOptions.body);\r\n  }\r\n  \r\n  // Make the fetch request\r\n  console.log(`Fetching ${url} with options:`, fetchOptions);\r\n  const response = await fetch(url, fetchOptions);\r\n  \r\n  // Cache successful GET responses\r\n  if ((options.method === 'GET' || !options.method) && response.ok) {\r\n    const data = await response.clone().json().catch(() => null);\r\n    if (data) {\r\n      apiCache.set(cacheKey, data);\r\n    }\r\n  }\r\n  \r\n  return response;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}