{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\AddEditStageForm\\\\AddEditStageForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { API_CONFIG } from '../../config';\nimport { Box, Paper, Typography, TextField, Button, FormControl, InputLabel, Select, MenuItem, Grid, Alert, CircularProgress, Divider } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddEditStageForm() {\n  _s();\n  // --- Routing & Context ---\n  const {\n    stageId\n  } = useParams(); // Get stageId from URL path for edit mode\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const agentIdParam = queryParams.get('agent_id'); // Get agent context ('uuid' or 'null')\n  const navigate = useNavigate();\n  const isEditMode = Boolean(stageId && stageId !== 'new');\n\n  // --- State ---\n  const [formData, setFormData] = useState({\n    stage_name: '',\n    stage_description: 'Default description',\n    stage_type: 'conversation',\n    stage_selection_template_id: '',\n    data_extraction_template_id: '',\n    response_generation_template_id: ''\n  });\n  const [availableTemplates, setAvailableTemplates] = useState({\n    selection: [],\n    extraction: [],\n    generation: []\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [contextAgentName, setContextAgentName] = useState('General');\n\n  // Get stored credentials\n  const getStoredCredentials = () => {\n    return {\n      businessId: localStorage.getItem('businessId') || '',\n      businessApiKey: localStorage.getItem('businessApiKey') || ''\n    };\n  };\n\n  // --- Effects ---\n  // 1. Determine context agent name\n  useEffect(() => {\n    setContextAgentName(agentIdParam === 'null' ? 'General' : `Agent ${agentIdParam}`);\n  }, [agentIdParam]);\n\n  // 2. Fetch available templates\n  useEffect(() => {\n    const fetchTemplates = async () => {\n      setError(null);\n      setIsLoading(true);\n      console.log(\"Fetching available templates...\");\n      const {\n        businessId,\n        businessApiKey\n      } = getStoredCredentials();\n      if (!businessId || !businessApiKey) {\n        setError('Authentication required. Please log in.');\n        setIsLoading(false);\n        return;\n      }\n\n      // Organize templates by type for dropdowns\n      const organized = {\n        selection: [],\n        extraction: [],\n        generation: []\n      };\n      try {\n        // Step 1: Fetch regular templates first\n        const regularResponse = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TEMPLATES}?business_id=${businessId}`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${businessApiKey}`\n          }\n        });\n        if (regularResponse.ok) {\n          const regularTemplates = await regularResponse.json();\n          console.log(\"Regular templates fetched:\", regularTemplates);\n\n          // Process regular templates\n          regularTemplates.forEach(template => {\n            categorizeTemplate(template, organized);\n          });\n        } else {\n          console.warn(`Failed to fetch regular templates: ${regularResponse.status}`);\n        }\n\n        // Step 2: Now fetch default templates\n        const defaultResponse = await fetch(`${API_CONFIG.BASE_URL}/api/templates/default-templates?business_id=${businessId}`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${businessApiKey}`\n          }\n        });\n        if (defaultResponse.ok) {\n          const defaultTemplates = await defaultResponse.json();\n          console.log(\"Default templates fetched:\", defaultTemplates);\n\n          // Process default templates and add them to the organized object\n          defaultTemplates.forEach(template => {\n            // Add a flag to indicate this is a default template (for UI display)\n            template.isDefault = true;\n            categorizeTemplate(template, organized);\n          });\n        } else {\n          console.warn(`Failed to fetch default templates: ${defaultResponse.status}`);\n        }\n\n        // If we have templates from either source\n        if (organized.selection.length > 0 || organized.extraction.length > 0 || organized.generation.length > 0) {\n          setAvailableTemplates(organized);\n          console.log(\"Templates fetched and organized:\", organized);\n        } else {\n          throw new Error(\"No templates found from any source\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching templates:\", err);\n        setError(err.message || \"Failed to load templates. Cannot create/edit stage.\");\n        setAvailableTemplates({\n          selection: [],\n          extraction: [],\n          generation: []\n        }); // Ensure empty on error\n      } finally {\n        // Don't set isLoading to false here if in edit mode, wait for stage data\n        if (!isEditMode) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    // Helper function to categorize a template into the right bucket\n    const categorizeTemplate = (template, organized) => {\n      const type = template.template_type || '';\n\n      // Map template types to categories\n      if (type === 'stage_selection' || type === 'default_stage_selection' || type.includes('selection')) {\n        organized.selection.push(template);\n      } else if (type === 'data_extraction' || type === 'default_data_extraction' || type.includes('extract')) {\n        organized.extraction.push(template);\n      } else if (type === 'response_generation' || type === 'default_response_generation' || type.includes('response') || type.includes('generation')) {\n        organized.generation.push(template);\n      }\n      // For templates with no type, try to infer from name\n      else if (type === '' || type === 'generic') {\n        const name = (template.template_name || template.name || '').toLowerCase();\n        if (name.includes('selection')) {\n          organized.selection.push(template);\n        } else if (name.includes('extract')) {\n          organized.extraction.push(template);\n        } else if (name.includes('response') || name.includes('generation')) {\n          organized.generation.push(template);\n        }\n      }\n    };\n    fetchTemplates();\n  }, [isEditMode]); // Fetch templates on mount\n\n  // 3. Fetch stage data if in Edit mode (after templates are loaded)\n  useEffect(() => {\n    const fetchStageDetails = async () => {\n      if (!isEditMode) return;\n      const {\n        businessId,\n        businessApiKey\n      } = getStoredCredentials();\n      if (!businessId || !businessApiKey) {\n        setError('Authentication required. Please log in.');\n        setIsLoading(false);\n        return;\n      }\n\n      // Continue loading state from template fetch until stage data is loaded/failed\n      setIsLoading(true);\n      setError(null); // Clear template fetch errors if any\n      console.log(`Fetching details for stage ID: ${stageId}, Business ID: ${businessId}`);\n      try {\n        // Fetch the specific stage\n        const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STAGES}/${stageId}?business_id=${businessId}`, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${businessApiKey}`\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          throw new Error(`HTTP error ${response.status}: ${errorData.message || 'Failed to fetch stage details'}`);\n        }\n        const stageData = await response.json();\n        console.log(\"Stage data fetched:\", stageData);\n\n        // Set form data with existing stage details\n        setFormData({\n          stage_name: stageData.stage_name || '',\n          stage_description: stageData.stage_description || '',\n          stage_type: stageData.stage_type || '',\n          stage_selection_template_id: stageData.stage_selection_template_id || '',\n          data_extraction_template_id: stageData.data_extraction_template_id || '',\n          response_generation_template_id: stageData.response_generation_template_id || ''\n        });\n      } catch (err) {\n        console.error(\"Error fetching stage details for edit:\", err);\n        setError(err.message || \"Failed to load stage details for editing.\");\n        // Clear form data on error\n        setFormData({\n          stage_name: '',\n          stage_description: '',\n          stage_type: '',\n          stage_selection_template_id: '',\n          data_extraction_template_id: '',\n          response_generation_template_id: ''\n        });\n      } finally {\n        setIsLoading(false); // Finish loading indicator\n      }\n    };\n\n    // Only run fetchStageDetails if in edit mode and templates are potentially loaded\n    if (isEditMode && availableTemplates.selection.length > 0) {\n      fetchStageDetails();\n    } else if (isEditMode && error) {\n      // If template fetch failed, stop loading for edit mode too\n      setIsLoading(false);\n    }\n  }, [isEditMode, stageId, availableTemplates]); // Dependencies for fetching stage data\n\n  // --- Handlers ---\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    console.log(`Field ${name} changed to: ${value}`);\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSaving(true);\n    setError(null);\n    const {\n      businessId,\n      businessApiKey\n    } = getStoredCredentials();\n    if (!businessId || !businessApiKey) {\n      setError('Authentication required. Please log in.');\n      setIsSaving(false);\n      return;\n    }\n\n    // Log the form state to verify values\n    console.log(\"Form state before submission:\", formData);\n    try {\n      const url = isEditMode ? `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STAGES}/${stageId}?business_id=${businessId}` : `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STAGES}?business_id=${businessId}`;\n      const method = isEditMode ? 'PUT' : 'POST';\n      console.log(`Submitting stage data to ${url} using ${method}`);\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${businessApiKey}`\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`HTTP error ${response.status}: ${errorData.message || 'Failed to save stage'}`);\n      }\n      const result = await response.json();\n      console.log(`Stage ${isEditMode ? 'updated' : 'created'} successfully:`, result);\n\n      // Navigate to the stage editor for the newly created stage\n      if (!isEditMode && result.stage_id) {\n        navigate(`/stage-editor/${result.stage_id}?business_id=${businessId}${agentIdParam ? `&agent_id=${agentIdParam}` : ''}`);\n      } else {\n        // Show success message and return to stage management\n        navigate('/stage-management');\n      }\n    } catch (err) {\n      console.error(`Error ${isEditMode ? 'updating' : 'creating'} stage:`, err);\n      setError(err.message || `An unexpected error occurred while ${isEditMode ? 'saving' : 'creating'} the stage.`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleCancel = () => {\n    navigate('/stage-management');\n  };\n\n  // --- Render ---\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this);\n  }\n\n  // If edit mode failed to load stage data\n  if (isEditMode && !formData.stage_name && error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleCancel,\n        sx: {\n          mt: 2\n        },\n        children: \"Return to Stage Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    onSubmit: handleSubmit,\n    noValidate: true,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: isEditMode ? 'Edit Stage' : 'Add New Stage'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: \"Basic Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            fullWidth: true,\n            id: \"stage_name\",\n            name: \"stage_name\",\n            label: \"Stage Name\",\n            value: formData.stage_name,\n            onChange: handleInputChange,\n            error: !formData.stage_name,\n            helperText: !formData.stage_name ? \"Stage name is required\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"stage_type_label\",\n              children: \"Stage Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"stage_type_label\",\n              id: \"stage_type\",\n              name: \"stage_type\",\n              value: formData.stage_type,\n              label: \"Stage Type\",\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"conversation\",\n                children: \"Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"response\",\n                children: \"Response\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"input\",\n                children: \"Input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"processing\",\n                children: \"Processing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            fullWidth: true,\n            multiline: true,\n            rows: 4,\n            id: \"stage_description\",\n            name: \"stage_description\",\n            label: \"Stage Description\",\n            value: formData.stage_description,\n            onChange: handleInputChange,\n            error: !formData.stage_description,\n            helperText: !formData.stage_description ? \"Stage description is required\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            sx: {\n              mt: 2\n            },\n            children: \"Template Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"stage_selection_template_id_label\",\n              children: \"Stage Selection Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"stage_selection_template_id_label\",\n              id: \"stage_selection_template_id\",\n              name: \"stage_selection_template_id\",\n              value: formData.stage_selection_template_id,\n              label: \"Stage Selection Template\",\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 33\n              }, this), availableTemplates.selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name || template.name || template.template_id, template.isDefault ? ' (Default)' : '']\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"data_extraction_template_id_label\",\n              children: \"Data Extraction Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"data_extraction_template_id_label\",\n              id: \"data_extraction_template_id\",\n              name: \"data_extraction_template_id\",\n              value: formData.data_extraction_template_id,\n              label: \"Data Extraction Template\",\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 33\n              }, this), availableTemplates.extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name || template.name || template.template_id, template.isDefault ? ' (Default)' : '']\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"response_generation_template_id_label\",\n              children: \"Response Generation Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"response_generation_template_id_label\",\n              id: \"response_generation_template_id\",\n              name: \"response_generation_template_id\",\n              value: formData.response_generation_template_id,\n              label: \"Response Generation Template\",\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"None\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 33\n              }, this), availableTemplates.generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name || template.name || template.template_id, template.isDefault ? ' (Default)' : '']\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3,\n          display: 'flex',\n          justifyContent: 'flex-end'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: handleCancel,\n          sx: {\n            mr: 2\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: isSaving || !formData.stage_name || !formData.stage_description,\n          children: isSaving ? 'Saving...' : isEditMode ? 'Update Stage' : 'Create Stage'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 9\n  }, this);\n}\n_s(AddEditStageForm, \"1yTrKat7ZkHYyYh8Byc3rxHlFUs=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = AddEditStageForm;\nexport default AddEditStageForm;\nvar _c;\n$RefreshReg$(_c, \"AddEditStageForm\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useNavigate","API_CONFIG","Box","Paper","Typography","TextField","Button","FormControl","InputLabel","Select","MenuItem","Grid","Alert","CircularProgress","Divider","jsxDEV","_jsxDEV","AddEditStageForm","_s","stageId","location","queryParams","URLSearchParams","search","agentIdParam","get","navigate","isEditMode","Boolean","formData","setFormData","stage_name","stage_description","stage_type","stage_selection_template_id","data_extraction_template_id","response_generation_template_id","availableTemplates","setAvailableTemplates","selection","extraction","generation","isLoading","setIsLoading","isSaving","setIsSaving","error","setError","contextAgentName","setContextAgentName","getStoredCredentials","businessId","localStorage","getItem","businessApiKey","fetchTemplates","console","log","organized","regularResponse","fetch","BASE_URL","ENDPOINTS","TEMPLATES","method","headers","ok","regularTemplates","json","forEach","template","categorizeTemplate","warn","status","defaultResponse","defaultTemplates","isDefault","length","Error","err","message","type","template_type","includes","push","name","template_name","toLowerCase","fetchStageDetails","response","STAGES","errorData","catch","stageData","handleInputChange","e","value","target","prev","handleSubmit","preventDefault","url","body","JSON","stringify","result","stage_id","handleCancel","sx","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","severity","mb","variant","onClick","mt","component","onSubmit","noValidate","p","gutterBottom","container","spacing","item","xs","md","required","fullWidth","id","label","onChange","helperText","labelId","multiline","rows","map","template_id","mr","color","disabled","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/AddEditStageForm/AddEditStageForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\r\nimport { API_CONFIG } from '../../config';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  Alert,\r\n  CircularProgress,\r\n  Divider\r\n} from '@mui/material';\r\n\r\nfunction AddEditStageForm() {\r\n    // --- Routing & Context ---\r\n    const { stageId } = useParams(); // Get stageId from URL path for edit mode\r\n    const location = useLocation();\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const agentIdParam = queryParams.get('agent_id'); // Get agent context ('uuid' or 'null')\r\n    const navigate = useNavigate();\r\n\r\n    const isEditMode = Boolean(stageId && stageId !== 'new');\r\n\r\n    // --- State ---\r\n    const [formData, setFormData] = useState({\r\n        stage_name: '',\r\n        stage_description: 'Default description',\r\n        stage_type: 'conversation',\r\n        stage_selection_template_id: '',\r\n        data_extraction_template_id: '',\r\n        response_generation_template_id: ''\r\n    });\r\n    const [availableTemplates, setAvailableTemplates] = useState({ selection: [], extraction: [], generation: [] });\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [contextAgentName, setContextAgentName] = useState('General');\r\n\r\n    // Get stored credentials\r\n    const getStoredCredentials = () => {\r\n        return {\r\n            businessId: localStorage.getItem('businessId') || '',\r\n            businessApiKey: localStorage.getItem('businessApiKey') || ''\r\n        };\r\n    };\r\n\r\n    // --- Effects ---\r\n    // 1. Determine context agent name\r\n    useEffect(() => {\r\n        setContextAgentName(agentIdParam === 'null' ? 'General' : `Agent ${agentIdParam}`);\r\n    }, [agentIdParam]);\r\n\r\n    // 2. Fetch available templates\r\n    useEffect(() => {\r\n        const fetchTemplates = async () => {\r\n            setError(null);\r\n            setIsLoading(true);\r\n            console.log(\"Fetching available templates...\");\r\n            \r\n            const { businessId, businessApiKey } = getStoredCredentials();\r\n            \r\n            if (!businessId || !businessApiKey) {\r\n                setError('Authentication required. Please log in.');\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            \r\n            // Organize templates by type for dropdowns\r\n            const organized = { \r\n                selection: [], \r\n                extraction: [], \r\n                generation: [] \r\n            };\r\n            \r\n            try {\r\n                // Step 1: Fetch regular templates first\r\n                const regularResponse = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.TEMPLATES}?business_id=${businessId}`, {\r\n                    method: 'GET',\r\n                    headers: { \r\n                        'Accept': 'application/json',\r\n                        'Authorization': `Bearer ${businessApiKey}`\r\n                    }\r\n                });\r\n                \r\n                if (regularResponse.ok) {\r\n                    const regularTemplates = await regularResponse.json();\r\n                    console.log(\"Regular templates fetched:\", regularTemplates);\r\n                    \r\n                    // Process regular templates\r\n                    regularTemplates.forEach(template => {\r\n                        categorizeTemplate(template, organized);\r\n                    });\r\n                } else {\r\n                    console.warn(`Failed to fetch regular templates: ${regularResponse.status}`);\r\n                }\r\n                \r\n                // Step 2: Now fetch default templates\r\n                const defaultResponse = await fetch(`${API_CONFIG.BASE_URL}/api/templates/default-templates?business_id=${businessId}`, {\r\n                    method: 'GET',\r\n                    headers: { \r\n                        'Accept': 'application/json',\r\n                        'Authorization': `Bearer ${businessApiKey}`\r\n                    }\r\n                });\r\n                \r\n                if (defaultResponse.ok) {\r\n                    const defaultTemplates = await defaultResponse.json();\r\n                    console.log(\"Default templates fetched:\", defaultTemplates);\r\n                    \r\n                    // Process default templates and add them to the organized object\r\n                    defaultTemplates.forEach(template => {\r\n                        // Add a flag to indicate this is a default template (for UI display)\r\n                        template.isDefault = true;\r\n                        categorizeTemplate(template, organized);\r\n                    });\r\n                } else {\r\n                    console.warn(`Failed to fetch default templates: ${defaultResponse.status}`);\r\n                }\r\n                \r\n                // If we have templates from either source\r\n                if (organized.selection.length > 0 || organized.extraction.length > 0 || organized.generation.length > 0) {\r\n                    setAvailableTemplates(organized);\r\n                    console.log(\"Templates fetched and organized:\", organized);\r\n                } else {\r\n                    throw new Error(\"No templates found from any source\");\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Error fetching templates:\", err);\r\n                setError(err.message || \"Failed to load templates. Cannot create/edit stage.\");\r\n                setAvailableTemplates({ selection: [], extraction: [], generation: [] }); // Ensure empty on error\r\n            } finally {\r\n                // Don't set isLoading to false here if in edit mode, wait for stage data\r\n                if (!isEditMode) {\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n        };\r\n        \r\n        // Helper function to categorize a template into the right bucket\r\n        const categorizeTemplate = (template, organized) => {\r\n            const type = template.template_type || '';\r\n            \r\n            // Map template types to categories\r\n            if (type === 'stage_selection' || type === 'default_stage_selection' || \r\n                type.includes('selection')) {\r\n                organized.selection.push(template);\r\n            } \r\n            else if (type === 'data_extraction' || type === 'default_data_extraction' || \r\n                     type.includes('extract')) {\r\n                organized.extraction.push(template);\r\n            } \r\n            else if (type === 'response_generation' || type === 'default_response_generation' || \r\n                     type.includes('response') || type.includes('generation')) {\r\n                organized.generation.push(template);\r\n            }\r\n            // For templates with no type, try to infer from name\r\n            else if (type === '' || type === 'generic') {\r\n                const name = (template.template_name || template.name || '').toLowerCase();\r\n                if (name.includes('selection')) {\r\n                    organized.selection.push(template);\r\n                } else if (name.includes('extract')) {\r\n                    organized.extraction.push(template);\r\n                } else if (name.includes('response') || name.includes('generation')) {\r\n                    organized.generation.push(template);\r\n                }\r\n            }\r\n        };\r\n        \r\n        fetchTemplates();\r\n    }, [isEditMode]); // Fetch templates on mount\r\n\r\n    // 3. Fetch stage data if in Edit mode (after templates are loaded)\r\n    useEffect(() => {\r\n        const fetchStageDetails = async () => {\r\n            if (!isEditMode) return;\r\n\r\n            const { businessId, businessApiKey } = getStoredCredentials();\r\n            \r\n            if (!businessId || !businessApiKey) {\r\n                setError('Authentication required. Please log in.');\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Continue loading state from template fetch until stage data is loaded/failed\r\n            setIsLoading(true);\r\n            setError(null); // Clear template fetch errors if any\r\n            console.log(`Fetching details for stage ID: ${stageId}, Business ID: ${businessId}`);\r\n\r\n            try {\r\n                // Fetch the specific stage\r\n                const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STAGES}/${stageId}?business_id=${businessId}`, {\r\n                    method: 'GET',\r\n                    headers: { \r\n                        'Accept': 'application/json',\r\n                        'Authorization': `Bearer ${businessApiKey}`\r\n                    }\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    const errorData = await response.json().catch(() => ({}));\r\n                    throw new Error(`HTTP error ${response.status}: ${errorData.message || 'Failed to fetch stage details'}`);\r\n                }\r\n                \r\n                const stageData = await response.json();\r\n                console.log(\"Stage data fetched:\", stageData);\r\n\r\n                // Set form data with existing stage details\r\n                setFormData({\r\n                    stage_name: stageData.stage_name || '',\r\n                    stage_description: stageData.stage_description || '',\r\n                    stage_type: stageData.stage_type || '',\r\n                    stage_selection_template_id: stageData.stage_selection_template_id || '',\r\n                    data_extraction_template_id: stageData.data_extraction_template_id || '',\r\n                    response_generation_template_id: stageData.response_generation_template_id || ''\r\n                });\r\n\r\n            } catch (err) {\r\n                console.error(\"Error fetching stage details for edit:\", err);\r\n                setError(err.message || \"Failed to load stage details for editing.\");\r\n                // Clear form data on error\r\n                setFormData({ \r\n                    stage_name: '', \r\n                    stage_description: '', \r\n                    stage_type: '', \r\n                    stage_selection_template_id: '', \r\n                    data_extraction_template_id: '', \r\n                    response_generation_template_id: '' \r\n                });\r\n            } finally {\r\n                setIsLoading(false); // Finish loading indicator\r\n            }\r\n        };\r\n\r\n        // Only run fetchStageDetails if in edit mode and templates are potentially loaded\r\n        if (isEditMode && availableTemplates.selection.length > 0) {\r\n            fetchStageDetails();\r\n        } else if (isEditMode && error) {\r\n            // If template fetch failed, stop loading for edit mode too\r\n            setIsLoading(false);\r\n        }\r\n    }, [isEditMode, stageId, availableTemplates]); // Dependencies for fetching stage data\r\n\r\n    // --- Handlers ---\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log(`Field ${name} changed to: ${value}`);\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsSaving(true);\r\n        setError(null);\r\n        \r\n        const { businessId, businessApiKey } = getStoredCredentials();\r\n        \r\n        if (!businessId || !businessApiKey) {\r\n            setError('Authentication required. Please log in.');\r\n            setIsSaving(false);\r\n            return;\r\n        }\r\n        \r\n        // Log the form state to verify values\r\n        console.log(\"Form state before submission:\", formData);\r\n        \r\n        try {\r\n            const url = isEditMode \r\n                ? `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STAGES}/${stageId}?business_id=${businessId}`\r\n                : `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STAGES}?business_id=${businessId}`;\r\n                \r\n            const method = isEditMode ? 'PUT' : 'POST';\r\n            \r\n            console.log(`Submitting stage data to ${url} using ${method}`);\r\n            \r\n            const response = await fetch(url, {\r\n                method: method,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${businessApiKey}`\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(`HTTP error ${response.status}: ${errorData.message || 'Failed to save stage'}`);\r\n            }\r\n            \r\n            const result = await response.json();\r\n            console.log(`Stage ${isEditMode ? 'updated' : 'created'} successfully:`, result);\r\n            \r\n            // Navigate to the stage editor for the newly created stage\r\n            if (!isEditMode && result.stage_id) {\r\n                navigate(`/stage-editor/${result.stage_id}?business_id=${businessId}${agentIdParam ? `&agent_id=${agentIdParam}` : ''}`);\r\n            } else {\r\n                // Show success message and return to stage management\r\n                navigate('/stage-management');\r\n            }\r\n            \r\n        } catch (err) {\r\n            console.error(`Error ${isEditMode ? 'updating' : 'creating'} stage:`, err);\r\n            setError(err.message || `An unexpected error occurred while ${isEditMode ? 'saving' : 'creating'} the stage.`);\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        navigate('/stage-management');\r\n    };\r\n\r\n    // --- Render ---\r\n    if (isLoading) {\r\n        return (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}>\r\n                <CircularProgress />\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    // If edit mode failed to load stage data\r\n    if (isEditMode && !formData.stage_name && error) {\r\n        return (\r\n            <Box>\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                    {error}\r\n                </Alert>\r\n                <Button variant=\"outlined\" onClick={handleCancel} sx={{ mt: 2 }}>\r\n                    Return to Stage Management\r\n                </Button>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    {isEditMode ? 'Edit Stage' : 'Add New Stage'}\r\n                </Typography>\r\n                \r\n                {error && (\r\n                    <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n                \r\n                <Grid container spacing={3}>\r\n                    {/* Basic Information */}\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" gutterBottom>\r\n                            Basic Information\r\n                        </Typography>\r\n                        <Divider sx={{ mb: 2 }} />\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            required\r\n                            fullWidth\r\n                            id=\"stage_name\"\r\n                            name=\"stage_name\"\r\n                            label=\"Stage Name\"\r\n                            value={formData.stage_name}\r\n                            onChange={handleInputChange}\r\n                            error={!formData.stage_name}\r\n                            helperText={!formData.stage_name ? \"Stage name is required\" : \"\"}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl fullWidth required>\r\n                            <InputLabel id=\"stage_type_label\">Stage Type</InputLabel>\r\n                            <Select\r\n                                labelId=\"stage_type_label\"\r\n                                id=\"stage_type\"\r\n                                name=\"stage_type\"\r\n                                value={formData.stage_type}\r\n                                label=\"Stage Type\"\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                <MenuItem value=\"conversation\">Conversation</MenuItem>\r\n                                <MenuItem value=\"response\">Response</MenuItem>\r\n                                <MenuItem value=\"input\">Input</MenuItem>\r\n                                <MenuItem value=\"processing\">Processing</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            fullWidth\r\n                            multiline\r\n                            rows={4}\r\n                            id=\"stage_description\"\r\n                            name=\"stage_description\"\r\n                            label=\"Stage Description\"\r\n                            value={formData.stage_description}\r\n                            onChange={handleInputChange}\r\n                            error={!formData.stage_description}\r\n                            helperText={!formData.stage_description ? \"Stage description is required\" : \"\"}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                    {/* Template Information */}\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" gutterBottom sx={{ mt: 2 }}>\r\n                            Template Information\r\n                        </Typography>\r\n                        <Divider sx={{ mb: 2 }} />\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} md={4}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id=\"stage_selection_template_id_label\">Stage Selection Template</InputLabel>\r\n                            <Select\r\n                                labelId=\"stage_selection_template_id_label\"\r\n                                id=\"stage_selection_template_id\"\r\n                                name=\"stage_selection_template_id\"\r\n                                value={formData.stage_selection_template_id}\r\n                                label=\"Stage Selection Template\"\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {availableTemplates.selection.map((template) => (\r\n                                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                                        {template.template_name || template.name || template.template_id}\r\n                                        {template.isDefault ? ' (Default)' : ''}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} md={4}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id=\"data_extraction_template_id_label\">Data Extraction Template</InputLabel>\r\n                            <Select\r\n                                labelId=\"data_extraction_template_id_label\"\r\n                                id=\"data_extraction_template_id\"\r\n                                name=\"data_extraction_template_id\"\r\n                                value={formData.data_extraction_template_id}\r\n                                label=\"Data Extraction Template\"\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {availableTemplates.extraction.map((template) => (\r\n                                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                                        {template.template_name || template.name || template.template_id}\r\n                                        {template.isDefault ? ' (Default)' : ''}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} md={4}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id=\"response_generation_template_id_label\">Response Generation Template</InputLabel>\r\n                            <Select\r\n                                labelId=\"response_generation_template_id_label\"\r\n                                id=\"response_generation_template_id\"\r\n                                name=\"response_generation_template_id\"\r\n                                value={formData.response_generation_template_id}\r\n                                label=\"Response Generation Template\"\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {availableTemplates.generation.map((template) => (\r\n                                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                                        {template.template_name || template.name || template.template_id}\r\n                                        {template.isDefault ? ' (Default)' : ''}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={handleCancel}\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isSaving || !formData.stage_name || !formData.stage_description}\r\n                    >\r\n                        {isSaving ? 'Saving...' : (isEditMode ? 'Update Stage' : 'Create Stage')}\r\n                    </Button>\r\n                </Box>\r\n            </Paper>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AddEditStageForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}