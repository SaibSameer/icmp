{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTemplateManagement.js\nimport { useState, useCallback } from 'react';\nimport { fetchTemplates as fetchTemplatesApi } from '../services/testService';\nconst useTemplateManagement = (apiKey, handleSnackbarOpen) => {\n  _s();\n  const [templateID, setTemplateID] = useState('');\n  const [templateName, setTemplateName] = useState('');\n  const [templateText, setTemplateText] = useState('');\n  const [templateOutput, setTemplateOutput] = useState('');\n  const [availableVariable, setAvailableVariable] = useState([]);\n  const [selectedVariable, setSelectedVariable] = useState('');\n  const [defaultTemplates, setDefaultTemplates] = useState([]);\n  const loadTemplates = useCallback(async () => {\n    try {\n      const templates = await fetchTemplatesApi(apiKey);\n      setDefaultTemplates(templates);\n      setTemplateOutput(\"Templates Fetched!\");\n      handleSnackbarOpen(\"Templates Fetched!\", \"success\");\n    } catch (error) {\n      setTemplateOutput(`Error fetching templates: ${error.message}`);\n      handleSnackbarOpen(`Error fetching templates: ${error.message}`, \"error\");\n    }\n  }, [apiKey, handleSnackbarOpen]);\n  const handleTemplateSelection = event => {\n    const selectedTemplateId = event.target.value;\n    setTemplateID(selectedTemplateId);\n    const selectedTemplate = defaultTemplates.find(template => template.template_id === selectedTemplateId);\n    if (selectedTemplate) {\n      setTemplateText(selectedTemplate.template_text);\n    } else {\n      setTemplateText('');\n    }\n  };\n  const handleVariableSelection = event => {\n    setSelectedVariable(event.target.value);\n  };\n  const addVariableToTemplate = () => {\n    let newTemplateText = templateText + \"{\" + selectedVariable + \"}\";\n    setTemplateText(newTemplateText);\n  };\n\n  // useEffect to load templates when the component mounts\n  // Add logic createTemplate and saveDefaultTemplate\n  return {\n    templateID,\n    setTemplateID,\n    templateName,\n    setTemplateName,\n    templateText,\n    setTemplateText,\n    templateOutput,\n    setTemplateOutput,\n    availableVariable,\n    setAvailableVariable,\n    selectedVariable,\n    setSelectedVariable,\n    addVariableToTemplate,\n    handleTemplateSelection,\n    handleVariableSelection,\n    loadTemplates\n  };\n};\n_s(useTemplateManagement, \"3yL1EbFhFy+qW0CBi5FpwOCRtF8=\");\nexport default useTemplateManagement;","map":{"version":3,"names":["useState","useCallback","fetchTemplates","fetchTemplatesApi","useTemplateManagement","apiKey","handleSnackbarOpen","_s","templateID","setTemplateID","templateName","setTemplateName","templateText","setTemplateText","templateOutput","setTemplateOutput","availableVariable","setAvailableVariable","selectedVariable","setSelectedVariable","defaultTemplates","setDefaultTemplates","loadTemplates","templates","error","message","handleTemplateSelection","event","selectedTemplateId","target","value","selectedTemplate","find","template","template_id","template_text","handleVariableSelection","addVariableToTemplate","newTemplateText"],"sources":["C:/icmp_events_api/front-end/src/hooks/useTemplateManagement.js"],"sourcesContent":["// src/hooks/useTemplateManagement.js\r\nimport { useState, useCallback } from 'react';\r\nimport { fetchTemplates as fetchTemplatesApi } from '../services/testService';\r\n\r\nconst useTemplateManagement = (apiKey, handleSnackbarOpen) => {\r\n    const [templateID, setTemplateID] = useState('');\r\n    const [templateName, setTemplateName] = useState('');\r\n    const [templateText, setTemplateText] = useState('');\r\n    const [templateOutput, setTemplateOutput] = useState('');\r\n    const [availableVariable, setAvailableVariable] = useState([]);\r\n    const [selectedVariable, setSelectedVariable] = useState('');\r\n    const [defaultTemplates, setDefaultTemplates] = useState([]);\r\n\r\n    const loadTemplates = useCallback(async () => {\r\n        try {\r\n            const templates = await fetchTemplatesApi(apiKey);\r\n            setDefaultTemplates(templates);\r\n            setTemplateOutput(\"Templates Fetched!\");\r\n            handleSnackbarOpen(\"Templates Fetched!\", \"success\");\r\n        } catch (error) {\r\n            setTemplateOutput(`Error fetching templates: ${error.message}`);\r\n            handleSnackbarOpen(`Error fetching templates: ${error.message}`, \"error\");\r\n        }\r\n    }, [apiKey, handleSnackbarOpen]);\r\n\r\n    const handleTemplateSelection = (event) => {\r\n        const selectedTemplateId = event.target.value;\r\n        setTemplateID(selectedTemplateId);\r\n        const selectedTemplate = defaultTemplates.find(template => template.template_id === selectedTemplateId);\r\n\r\n        if (selectedTemplate) {\r\n            setTemplateText(selectedTemplate.template_text);\r\n        } else {\r\n            setTemplateText('');\r\n        }\r\n    };\r\n\r\n    const handleVariableSelection = (event) => {\r\n        setSelectedVariable(event.target.value);\r\n    };\r\n\r\n    const addVariableToTemplate = () => {\r\n        let newTemplateText = templateText + \"{\" + selectedVariable + \"}\";\r\n        setTemplateText(newTemplateText);\r\n    };\r\n\r\n    // useEffect to load templates when the component mounts\r\n    // Add logic createTemplate and saveDefaultTemplate\r\n    return {\r\n        templateID,\r\n        setTemplateID,\r\n        templateName,\r\n        setTemplateName,\r\n        templateText,\r\n        setTemplateText,\r\n        templateOutput,\r\n        setTemplateOutput,\r\n        availableVariable,\r\n        setAvailableVariable,\r\n        selectedVariable,\r\n        setSelectedVariable,\r\n        addVariableToTemplate,\r\n        handleTemplateSelection,\r\n        handleVariableSelection,\r\n        loadTemplates\r\n    };\r\n};\r\n\r\nexport default useTemplateManagement;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,cAAc,IAAIC,iBAAiB,QAAQ,yBAAyB;AAE7E,MAAMC,qBAAqB,GAAGA,CAACC,MAAM,EAAEC,kBAAkB,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACgB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACoB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMsB,aAAa,GAAGrB,WAAW,CAAC,YAAY;IAC1C,IAAI;MACA,MAAMsB,SAAS,GAAG,MAAMpB,iBAAiB,CAACE,MAAM,CAAC;MACjDgB,mBAAmB,CAACE,SAAS,CAAC;MAC9BR,iBAAiB,CAAC,oBAAoB,CAAC;MACvCT,kBAAkB,CAAC,oBAAoB,EAAE,SAAS,CAAC;IACvD,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACZT,iBAAiB,CAAC,6BAA6BS,KAAK,CAACC,OAAO,EAAE,CAAC;MAC/DnB,kBAAkB,CAAC,6BAA6BkB,KAAK,CAACC,OAAO,EAAE,EAAE,OAAO,CAAC;IAC7E;EACJ,CAAC,EAAE,CAACpB,MAAM,EAAEC,kBAAkB,CAAC,CAAC;EAEhC,MAAMoB,uBAAuB,GAAIC,KAAK,IAAK;IACvC,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IAC7CrB,aAAa,CAACmB,kBAAkB,CAAC;IACjC,MAAMG,gBAAgB,GAAGX,gBAAgB,CAACY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,WAAW,KAAKN,kBAAkB,CAAC;IAEvG,IAAIG,gBAAgB,EAAE;MAClBlB,eAAe,CAACkB,gBAAgB,CAACI,aAAa,CAAC;IACnD,CAAC,MAAM;MACHtB,eAAe,CAAC,EAAE,CAAC;IACvB;EACJ,CAAC;EAED,MAAMuB,uBAAuB,GAAIT,KAAK,IAAK;IACvCR,mBAAmB,CAACQ,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;EAC3C,CAAC;EAED,MAAMO,qBAAqB,GAAGA,CAAA,KAAM;IAChC,IAAIC,eAAe,GAAG1B,YAAY,GAAG,GAAG,GAAGM,gBAAgB,GAAG,GAAG;IACjEL,eAAe,CAACyB,eAAe,CAAC;EACpC,CAAC;;EAED;EACA;EACA,OAAO;IACH9B,UAAU;IACVC,aAAa;IACbC,YAAY;IACZC,eAAe;IACfC,YAAY;IACZC,eAAe;IACfC,cAAc;IACdC,iBAAiB;IACjBC,iBAAiB;IACjBC,oBAAoB;IACpBC,gBAAgB;IAChBC,mBAAmB;IACnBkB,qBAAqB;IACrBX,uBAAuB;IACvBU,uBAAuB;IACvBd;EACJ,CAAC;AACL,CAAC;AAACf,EAAA,CA9DIH,qBAAqB;AAgE3B,eAAeA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}