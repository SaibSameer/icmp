{"ast":null,"code":"var _jsxFileName = \"C:\\\\icmp_events_api\\\\front-end\\\\src\\\\components\\\\StageManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Container, Typography, Paper, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, CircularProgress, Grid, Box, IconButton, Divider, Alert, Snackbar, List, ListItem, ListItemText, ListItemSecondaryAction, Tooltip, FormControl, InputLabel, MenuItem, Select, Card, CardContent, FormHelperText } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport SaveIcon from '@mui/icons-material/Save';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { fetchStages, createStage, updateStage, deleteStage } from '../services/stageService';\nimport { getAuthHeaders } from '../services/authService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StageManager = () => {\n  _s();\n  // Get parameters from URL and location\n  const {\n    businessId: paramBusinessId,\n    agentId: paramAgentId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract query parameters if not using path params\n  const queryParams = new URLSearchParams(location.search);\n  const queryBusinessId = queryParams.get('business_id');\n  const queryAgentId = queryParams.get('agent_id');\n\n  // Use params or query params, then fallback to localStorage\n  const businessId = paramBusinessId || queryBusinessId || localStorage.getItem('businessId');\n  const agentId = paramAgentId || queryAgentId || localStorage.getItem('agentId');\n\n  // States for stages and templates\n  const [stages, setStages] = useState([]);\n  const [selectedStage, setSelectedStage] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [openDialog, setOpenDialog] = useState(false);\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\n  const [stageToDelete, setStageToDelete] = useState(null);\n  const [newStageName, setNewStageName] = useState('');\n  const [stageDescription, setStageDescription] = useState('');\n  const [stageType, setStageType] = useState('conversation');\n  const [availableTemplates, setAvailableTemplates] = useState({\n    stage_selection: [],\n    data_extraction: [],\n    response_generation: []\n  });\n  const [selectedTemplates, setSelectedTemplates] = useState({\n    stage_selection: '',\n    data_extraction: '',\n    response_generation: ''\n  });\n  const [defaultTemplates, setDefaultTemplates] = useState({\n    stage_selection: '',\n    data_extraction: '',\n    response_generation: ''\n  });\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  const [agentName, setAgentName] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Store current values in localStorage for persistence\n  useEffect(() => {\n    if (businessId) {\n      localStorage.setItem('businessId', businessId);\n    }\n    if (agentId) {\n      localStorage.setItem('agentId', agentId);\n    }\n  }, [businessId, agentId]);\n\n  // Logging for debugging\n  useEffect(() => {\n    console.log(\"StageManager - Current params:\", {\n      paramBusinessId,\n      paramAgentId,\n      queryBusinessId,\n      queryAgentId,\n      resolvedBusinessId: businessId,\n      resolvedAgentId: agentId\n    });\n  }, [paramBusinessId, paramAgentId, queryBusinessId, queryAgentId, businessId, agentId]);\n\n  // Fetch templates for this business\n  const fetchTemplates = async () => {\n    setIsLoading(true);\n    try {\n      console.log(\"Fetching templates for business ID:\", businessId);\n      const headers = getAuthHeaders();\n      console.log(\"[Service] Using headers:\", headers);\n      const response = await fetch(`/templates?business_id=${businessId}`, {\n        method: 'GET',\n        headers: headers,\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to fetch templates');\n      }\n      const templatesData = await response.json();\n      console.log(\"Raw templates data:\", templatesData);\n\n      // Process templates by type\n      const templatesByType = {\n        stage_selection: [],\n        data_extraction: [],\n        response_generation: []\n      };\n\n      // Map old template types to new ones\n      const typeMapping = {\n        'selection': 'stage_selection',\n        'extraction': 'data_extraction',\n        'generation': 'response_generation'\n      };\n      templatesData.forEach(template => {\n        // Ensure required fields exist\n        const normalizedTemplate = {\n          ...template,\n          template_type: typeMapping[template.template_type] || template.template_type,\n          content: template.content || template.template_text || '',\n          system_prompt: template.system_prompt || ''\n        };\n\n        // Put template in the right category\n        const category = normalizedTemplate.template_type;\n        if (templatesByType[category]) {\n          templatesByType[category].push(normalizedTemplate);\n        } else {\n          console.warn(`Unknown template type: ${category} for template: ${normalizedTemplate.template_id}`);\n        }\n      });\n\n      // Sort templates: default templates first, then alphabetically by name\n      for (const type in templatesByType) {\n        templatesByType[type].sort((a, b) => {\n          const aIsDefault = a.template_name.toLowerCase().includes('default');\n          const bIsDefault = b.template_name.toLowerCase().includes('default');\n          if (aIsDefault && !bIsDefault) return -1;\n          if (!aIsDefault && bIsDefault) return 1;\n          return a.template_name.localeCompare(b.template_name);\n        });\n      }\n      console.log(\"Processed templates by type:\", templatesByType);\n      setAvailableTemplates(templatesByType);\n\n      // Set default templates as selected\n      const initialSelectedTemplates = {};\n      for (const type in templatesByType) {\n        const defaultTemplate = templatesByType[type].find(t => t.template_name.toLowerCase().includes('default'));\n        if (defaultTemplate) {\n          initialSelectedTemplates[type] = defaultTemplate.template_id;\n        } else if (templatesByType[type].length > 0) {\n          initialSelectedTemplates[type] = templatesByType[type][0].template_id;\n        }\n      }\n      console.log(\"Initial selected templates:\", initialSelectedTemplates);\n      setSelectedTemplates(initialSelectedTemplates);\n    } catch (error) {\n      console.error('Error fetching templates:', error);\n      showSnackbar('Failed to load templates: ' + error.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle template selection change\n  const handleTemplateChange = (event, templateType) => {\n    const templateId = event.target.value;\n    console.log(`Template changed for ${templateType}: ${templateId}`);\n    setSelectedTemplates(prev => ({\n      ...prev,\n      [templateType]: templateId\n    }));\n  };\n\n  // Fetch stages based on business ID and agent ID\n  const fetchStagesData = useCallback(async () => {\n    if (!businessId) {\n      console.error(\"No business ID available for fetching stages\");\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log(\"Fetching stages for business:\", businessId);\n      const stagesData = await fetchStages(businessId);\n      console.log(\"Fetched stages:\", stagesData);\n      setStages(stagesData);\n    } catch (err) {\n      console.error(\"Error fetching stages:\", err);\n      showSnackbar(err.message, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [businessId]);\n\n  // Fetch agent details\n  const fetchAgentDetails = useCallback(async () => {\n    if (!businessId || !agentId) {\n      return;\n    }\n    try {\n      const response = await fetch(`/agents/${agentId}?business_id=${businessId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch agent details');\n      }\n      const agentData = await response.json();\n      setAgentName(agentData.agent_name || `Agent ${agentId}`);\n    } catch (err) {\n      console.error(\"Error fetching agent details:\", err);\n      setAgentName(`Agent ${agentId}`); // Fallback\n    }\n  }, [businessId, agentId]);\n\n  // Initial data fetch\n  useEffect(() => {\n    if (businessId) {\n      const loadData = async () => {\n        try {\n          setIsLoading(true);\n          // Load templates first\n          await fetchTemplates();\n          // Then load stages\n          await fetchStagesData();\n        } catch (err) {\n          console.error(\"Error in initial data load:\", err);\n          showSnackbar(\"Failed to load initial data: \" + err.message, 'error');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      loadData();\n    }\n  }, [businessId]);\n\n  // Update useEffect to fetch agent details\n  useEffect(() => {\n    if (agentId) {\n      fetchAgentDetails();\n    }\n  }, [agentId, fetchAgentDetails]);\n\n  // Helper function for showing snackbar messages\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbar({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar({\n      ...snackbar,\n      open: false\n    });\n  };\n  const handleNavigateToHome = () => {\n    navigate('/business');\n  };\n  const handleOpenNewStageDialog = () => {\n    console.log(\"Opening new stage dialog with default templates:\", {\n      defaultTemplates,\n      availableTemplates\n    });\n\n    // Check if default templates exist\n    if (!defaultTemplates.stage_selection || !defaultTemplates.data_extraction || !defaultTemplates.response_generation) {\n      console.warn(\"Some default templates are missing:\", defaultTemplates);\n\n      // Try to find default templates manually\n      const manualDefaultTemplates = {\n        stage_selection: '',\n        data_extraction: '',\n        response_generation: ''\n      };\n\n      // Loop through all templates and try to find ones with default_ prefix\n      for (const type in availableTemplates) {\n        const templates = availableTemplates[type];\n        for (const template of templates) {\n          // Check if this is a default template\n          if (template.template_type && template.template_type.startsWith('default_')) {\n            console.log(`Found default template for ${type}:`, template);\n            manualDefaultTemplates[type] = template.template_id;\n          }\n        }\n      }\n      console.log(\"Manually determined default templates:\", manualDefaultTemplates);\n\n      // Use the manual defaults if found\n      if (manualDefaultTemplates.stage_selection || manualDefaultTemplates.data_extraction || manualDefaultTemplates.response_generation) {\n        setSelectedTemplates({\n          stage_selection: manualDefaultTemplates.stage_selection || defaultTemplates.stage_selection,\n          data_extraction: manualDefaultTemplates.data_extraction || defaultTemplates.data_extraction,\n          response_generation: manualDefaultTemplates.response_generation || defaultTemplates.response_generation\n        });\n      } else {\n        // If still not found, just use empty values\n        setSelectedTemplates({\n          stage_selection: defaultTemplates.stage_selection || '',\n          data_extraction: defaultTemplates.data_extraction || '',\n          response_generation: defaultTemplates.response_generation || ''\n        });\n      }\n    } else {\n      // Normal flow if default templates exist\n      setSelectedTemplates({\n        stage_selection: defaultTemplates.stage_selection,\n        data_extraction: defaultTemplates.data_extraction,\n        response_generation: defaultTemplates.response_generation\n      });\n    }\n    setNewStageName('');\n    setStageDescription('');\n    setStageType('conversation');\n    setOpenDialog(true);\n  };\n  const handleCreateStage = async () => {\n    setIsSubmitting(true);\n    try {\n      if (!newStageName || newStageName.trim() === '') {\n        showSnackbar('Please enter a stage name', 'error');\n        setIsSubmitting(false);\n        return;\n      }\n      console.log('Creating stage with templates:', selectedTemplates);\n\n      // Verify all templates are selected\n      const missingTemplates = [];\n      if (!selectedTemplates.stage_selection) missingTemplates.push('Stage Selection');\n      if (!selectedTemplates.data_extraction) missingTemplates.push('Data Extraction');\n      if (!selectedTemplates.response_generation) missingTemplates.push('Response Generation');\n      if (missingTemplates.length > 0) {\n        showSnackbar(`Please select templates for: ${missingTemplates.join(', ')}`, 'error');\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Find the selected templates from our available templates\n      const selectedTemplateObjects = {\n        stage_selection: availableTemplates.stage_selection.find(t => t.template_id === selectedTemplates.stage_selection),\n        data_extraction: availableTemplates.data_extraction.find(t => t.template_id === selectedTemplates.data_extraction),\n        response_generation: availableTemplates.response_generation.find(t => t.template_id === selectedTemplates.response_generation)\n      };\n      console.log('Selected template objects:', selectedTemplateObjects);\n\n      // Check if any templates couldn't be found\n      const notFoundTemplates = [];\n      if (!selectedTemplateObjects.stage_selection) notFoundTemplates.push('Stage Selection');\n      if (!selectedTemplateObjects.data_extraction) notFoundTemplates.push('Data Extraction');\n      if (!selectedTemplateObjects.response_generation) notFoundTemplates.push('Response Generation');\n      if (notFoundTemplates.length > 0) {\n        showSnackbar(`Could not find selected templates for: ${notFoundTemplates.join(', ')}. Please reload and try again.`, 'error');\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Prepare the stage data\n      const stageData = {\n        stage_name: newStageName,\n        agent_id: agentId,\n        business_id: businessId,\n        template_ids: {\n          stage_selection: selectedTemplates.stage_selection,\n          data_extraction: selectedTemplates.data_extraction,\n          response_generation: selectedTemplates.response_generation\n        }\n      };\n      console.log('Creating stage with data:', stageData);\n\n      // Create the stage\n      const response = await fetch('/stages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('businessApiKey')}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(stageData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create stage');\n      }\n      const result = await response.json();\n      console.log('Stage created successfully:', result);\n      showSnackbar('Stage created successfully', 'success');\n\n      // Reset form\n      setNewStageName('');\n\n      // Refresh stages\n      fetchStagesData();\n\n      // Close dialog\n      handleCloseAddDialog();\n    } catch (error) {\n      console.error('Error creating stage:', error);\n      showSnackbar(error.message, 'error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const navigateToStageView = stageId => {\n    // Construct the URL with query parameters\n    let url = `/stages/${stageId}?business_id=${businessId}`;\n    if (agentId) {\n      url += `&agent_id=${agentId}`;\n    }\n    navigate(url);\n  };\n  const handleDeleteStage = async () => {\n    if (!stageToDelete || !businessId) return;\n    try {\n      await deleteStage(stageToDelete, businessId);\n      await fetchStagesData();\n      setOpenDeleteDialog(false);\n      showSnackbar('Stage deleted successfully', 'success');\n    } catch (err) {\n      console.error(\"Error deleting stage:\", err);\n      showSnackbar(err.message, 'error');\n    }\n  };\n  const handleMoveStage = async (stageId, direction) => {\n    try {\n      const currentIndex = stages.findIndex(s => s.stage_id === stageId);\n      if (currentIndex === -1) return;\n\n      // If trying to move first item up or last item down, do nothing\n      if (currentIndex === 0 && direction === 'up' || currentIndex === stages.length - 1 && direction === 'down') {\n        return;\n      }\n      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\n\n      // Swap the order values in the stage_config\n      const updatedStages = [...stages];\n      const currentStage = {\n        ...updatedStages[currentIndex]\n      };\n      const targetStage = {\n        ...updatedStages[targetIndex]\n      };\n\n      // Update stage_config.order values\n      currentStage.stage_config = {\n        ...currentStage.stage_config,\n        order: targetIndex + 1\n      };\n      targetStage.stage_config = {\n        ...targetStage.stage_config,\n        order: currentIndex + 1\n      };\n\n      // Update both stages in the database\n      const currentUpdate = fetch(`/stages/${currentStage.stage_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(currentStage)\n      });\n      const targetUpdate = fetch(`/stages/${targetStage.stage_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(targetStage)\n      });\n      await Promise.all([currentUpdate, targetUpdate]);\n\n      // Refresh stages\n      await fetchStagesData();\n      showSnackbar('Stage order updated', 'success');\n    } catch (err) {\n      showSnackbar(err.message, 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleNavigateToHome,\n          sx: {\n            mr: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h1\",\n          gutterBottom: true,\n          sx: {\n            flexGrow: 1\n          },\n          children: [\"Stage Manager\", businessId && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            component: \"span\",\n            color: \"text.secondary\",\n            children: [` - Business ID: ${businessId}`, agentId && ` - Agent: ${agentName || agentId}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 24\n          }, this),\n          onClick: handleOpenNewStageDialog,\n          sx: {\n            mr: 1\n          },\n          children: \"Create Stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 24\n          }, this),\n          onClick: () => navigate('/templates'),\n          children: \"Manage Templates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        onClose: () => setError(''),\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mb: 2\n        },\n        onClose: () => setSuccess(''),\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          p: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: stages.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"No stages found. Create your first stage to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(List, {\n          sx: {\n            bgcolor: 'background.paper'\n          },\n          children: [...stages].sort((a, b) => {\n            var _a$stage_config, _b$stage_config;\n            return (((_a$stage_config = a.stage_config) === null || _a$stage_config === void 0 ? void 0 : _a$stage_config.order) || Infinity) - (((_b$stage_config = b.stage_config) === null || _b$stage_config === void 0 ? void 0 : _b$stage_config.order) || Infinity);\n          }).map(stage => /*#__PURE__*/_jsxDEV(ListItem, {\n            sx: {\n              mb: 1,\n              bgcolor: 'background.paper'\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: stage.stage_name,\n              secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"span\",\n                  variant: \"body2\",\n                  color: \"text.primary\",\n                  children: stage.stage_description || 'No description'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 626,\n                  columnNumber: 27\n                }, this), stage.stage_config && stage.stage_config.order && ` • Order: ${stage.stage_config.order}`]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Move Up\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"move-up\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleMoveStage(stage.stage_id, 'up');\n                  },\n                  disabled: stages.indexOf(stage) === 0,\n                  children: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 645,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Move Down\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"move-down\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    handleMoveStage(stage.stage_id, 'down');\n                  },\n                  disabled: stages.indexOf(stage) === stages.length - 1,\n                  children: /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 658,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 649,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"View Stage\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"view\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    navigateToStageView(stage.stage_id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 670,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Delete Stage\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"delete\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    setStageToDelete(stage);\n                    setOpenDeleteDialog(true);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 683,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 674,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 21\n            }, this)]\n          }, stage.stage_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: () => setOpenDialog(false),\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Create New Stage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [console.log(\"Dialog rendering with state:\", {\n            selectedTemplates,\n            availableTemplates,\n            defaultTemplates,\n            templatesInfo: {\n              stageSelectionCount: availableTemplates.stage_selection.length,\n              dataExtractionCount: availableTemplates.data_extraction.length,\n              responseGenerationCount: availableTemplates.response_generation.length\n            }\n          }), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Stage Name\",\n              value: newStageName,\n              onChange: e => setNewStageName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              multiline: true,\n              rows: 2,\n              label: \"Stage Description\",\n              value: stageDescription,\n              onChange: e => setStageDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Stage Selection Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              value: selectedTemplates.stage_selection,\n              onChange: e => handleTemplateChange(e, 'stage_selection'),\n              children: availableTemplates.stage_selection.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"No templates available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 750,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 749,\n                columnNumber: 19\n              }, this) : availableTemplates.stage_selection.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name, \" (\", template.template_type, \")\"]\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 754,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Template for determining if this stage should handle the message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Data Extraction Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              value: selectedTemplates.data_extraction,\n              onChange: e => handleTemplateChange(e, 'data_extraction'),\n              children: availableTemplates.data_extraction.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"No templates available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 773,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 19\n              }, this) : availableTemplates.data_extraction.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name, \" (\", template.template_type, \")\"]\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Template for extracting data from the message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Response Generation Template\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              fullWidth: true,\n              value: selectedTemplates.response_generation,\n              onChange: e => handleTemplateChange(e, 'response_generation'),\n              children: availableTemplates.response_generation.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"em\", {\n                  children: \"No templates available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 796,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 795,\n                columnNumber: 19\n              }, this) : availableTemplates.response_generation.map(template => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: template.template_id,\n                children: [template.template_name, \" (\", template.template_type, \")\"]\n              }, template.template_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Template for generating responses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCreateStage,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !newStageName.trim(),\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 24\n          }, this),\n          children: \"Create & Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDeleteDialog,\n      onClose: () => setOpenDeleteDialog(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Confirm Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Are you sure you want to delete the stage \\\"\", stageToDelete === null || stageToDelete === void 0 ? void 0 : stageToDelete.stage_name, \"\\\"? This action cannot be undone.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpenDeleteDialog(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDeleteStage,\n          variant: \"contained\",\n          color: \"error\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: snackbar.severity,\n        onClose: handleCloseSnackbar,\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 554,\n    columnNumber: 5\n  }, this);\n};\n_s(StageManager, \"WuKnhkIoD/+HxgeyzaPW1REuHKE=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = StageManager;\nexport default StageManager;\nvar _c;\n$RefreshReg$(_c, \"StageManager\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","Container","Typography","Paper","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","CircularProgress","Grid","Box","IconButton","Divider","Alert","Snackbar","List","ListItem","ListItemText","ListItemSecondaryAction","Tooltip","FormControl","InputLabel","MenuItem","Select","Card","CardContent","FormHelperText","AddIcon","DeleteIcon","ArrowUpwardIcon","ArrowDownwardIcon","ArrowBackIcon","SaveIcon","DescriptionIcon","VisibilityIcon","fetchStages","createStage","updateStage","deleteStage","getAuthHeaders","jsxDEV","_jsxDEV","Fragment","_Fragment","StageManager","_s","businessId","paramBusinessId","agentId","paramAgentId","location","navigate","queryParams","URLSearchParams","search","queryBusinessId","get","queryAgentId","localStorage","getItem","stages","setStages","selectedStage","setSelectedStage","isLoading","setIsLoading","error","setError","success","setSuccess","openDialog","setOpenDialog","openDeleteDialog","setOpenDeleteDialog","stageToDelete","setStageToDelete","newStageName","setNewStageName","stageDescription","setStageDescription","stageType","setStageType","availableTemplates","setAvailableTemplates","stage_selection","data_extraction","response_generation","selectedTemplates","setSelectedTemplates","defaultTemplates","setDefaultTemplates","snackbar","setSnackbar","open","message","severity","agentName","setAgentName","isSubmitting","setIsSubmitting","setItem","console","log","resolvedBusinessId","resolvedAgentId","fetchTemplates","headers","response","fetch","method","credentials","ok","json","Error","templatesData","templatesByType","typeMapping","forEach","template","normalizedTemplate","template_type","content","template_text","system_prompt","category","push","warn","template_id","type","sort","a","b","aIsDefault","template_name","toLowerCase","includes","bIsDefault","localeCompare","initialSelectedTemplates","defaultTemplate","find","t","length","showSnackbar","handleTemplateChange","event","templateType","templateId","target","value","prev","fetchStagesData","stagesData","err","fetchAgentDetails","agentData","agent_name","loadData","handleCloseSnackbar","handleNavigateToHome","handleOpenNewStageDialog","manualDefaultTemplates","templates","startsWith","handleCreateStage","trim","missingTemplates","join","selectedTemplateObjects","notFoundTemplates","stageData","stage_name","agent_id","business_id","template_ids","body","JSON","stringify","errorData","result","handleCloseAddDialog","navigateToStageView","stageId","url","handleDeleteStage","handleMoveStage","direction","currentIndex","findIndex","s","stage_id","targetIndex","updatedStages","currentStage","targetStage","stage_config","order","currentUpdate","targetUpdate","Promise","all","maxWidth","sx","mt","mb","children","p","display","alignItems","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","gutterBottom","flexGrow","color","startIcon","onClose","justifyContent","bgcolor","_a$stage_config","_b$stage_config","Infinity","map","stage","primary","secondary","stage_description","title","edge","e","stopPropagation","disabled","indexOf","fullWidth","container","spacing","templatesInfo","stageSelectionCount","dataExtractionCount","responseGenerationCount","item","xs","label","onChange","required","multiline","rows","autoHideDuration","_c","$RefreshReg$"],"sources":["C:/icmp_events_api/front-end/src/components/StageManager.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  CircularProgress,\r\n  Grid,\r\n  Box,\r\n  IconButton,\r\n  Divider,\r\n  Alert,\r\n  Snackbar,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport { fetchStages, createStage, updateStage, deleteStage } from '../services/stageService';\r\nimport { getAuthHeaders } from '../services/authService';\r\n\r\nconst StageManager = () => {\r\n  // Get parameters from URL and location\r\n  const { businessId: paramBusinessId, agentId: paramAgentId } = useParams();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  \r\n  // Extract query parameters if not using path params\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const queryBusinessId = queryParams.get('business_id');\r\n  const queryAgentId = queryParams.get('agent_id');\r\n  \r\n  // Use params or query params, then fallback to localStorage\r\n  const businessId = paramBusinessId || queryBusinessId || localStorage.getItem('businessId');\r\n  const agentId = paramAgentId || queryAgentId || localStorage.getItem('agentId');\r\n  \r\n  // States for stages and templates\r\n  const [stages, setStages] = useState([]);\r\n  const [selectedStage, setSelectedStage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n  const [stageToDelete, setStageToDelete] = useState(null);\r\n  const [newStageName, setNewStageName] = useState('');\r\n  const [stageDescription, setStageDescription] = useState('');\r\n  const [stageType, setStageType] = useState('conversation');\r\n  const [availableTemplates, setAvailableTemplates] = useState({\r\n    stage_selection: [],\r\n    data_extraction: [],\r\n    response_generation: []\r\n  });\r\n  const [selectedTemplates, setSelectedTemplates] = useState({\r\n    stage_selection: '',\r\n    data_extraction: '',\r\n    response_generation: ''\r\n  });\r\n  const [defaultTemplates, setDefaultTemplates] = useState({\r\n    stage_selection: '',\r\n    data_extraction: '',\r\n    response_generation: ''\r\n  });\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  const [agentName, setAgentName] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Store current values in localStorage for persistence\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      localStorage.setItem('businessId', businessId);\r\n    }\r\n    if (agentId) {\r\n      localStorage.setItem('agentId', agentId);\r\n    }\r\n  }, [businessId, agentId]);\r\n\r\n  // Logging for debugging\r\n  useEffect(() => {\r\n    console.log(\"StageManager - Current params:\", { \r\n      paramBusinessId, \r\n      paramAgentId,\r\n      queryBusinessId,\r\n      queryAgentId,\r\n      resolvedBusinessId: businessId,\r\n      resolvedAgentId: agentId\r\n    });\r\n  }, [\r\n    paramBusinessId, \r\n    paramAgentId, \r\n    queryBusinessId, \r\n    queryAgentId, \r\n    businessId, \r\n    agentId\r\n  ]);\r\n\r\n  // Fetch templates for this business\r\n  const fetchTemplates = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      console.log(\"Fetching templates for business ID:\", businessId);\r\n      const headers = getAuthHeaders();\r\n      console.log(\"[Service] Using headers:\", headers);\r\n      \r\n      const response = await fetch(`/templates?business_id=${businessId}`, {\r\n        method: 'GET',\r\n        headers: headers,\r\n        credentials: 'include'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to fetch templates');\r\n      }\r\n\r\n      const templatesData = await response.json();\r\n      console.log(\"Raw templates data:\", templatesData);\r\n\r\n      // Process templates by type\r\n      const templatesByType = {\r\n        stage_selection: [],\r\n        data_extraction: [],\r\n        response_generation: []\r\n      };\r\n\r\n      // Map old template types to new ones\r\n      const typeMapping = {\r\n        'selection': 'stage_selection',\r\n        'extraction': 'data_extraction',\r\n        'generation': 'response_generation'\r\n      };\r\n\r\n      templatesData.forEach(template => {\r\n        // Ensure required fields exist\r\n        const normalizedTemplate = {\r\n          ...template,\r\n          template_type: typeMapping[template.template_type] || template.template_type,\r\n          content: template.content || template.template_text || '',\r\n          system_prompt: template.system_prompt || ''\r\n        };\r\n\r\n        // Put template in the right category\r\n        const category = normalizedTemplate.template_type;\r\n        if (templatesByType[category]) {\r\n          templatesByType[category].push(normalizedTemplate);\r\n        } else {\r\n          console.warn(`Unknown template type: ${category} for template: ${normalizedTemplate.template_id}`);\r\n        }\r\n      });\r\n\r\n      // Sort templates: default templates first, then alphabetically by name\r\n      for (const type in templatesByType) {\r\n        templatesByType[type].sort((a, b) => {\r\n          const aIsDefault = a.template_name.toLowerCase().includes('default');\r\n          const bIsDefault = b.template_name.toLowerCase().includes('default');\r\n          \r\n          if (aIsDefault && !bIsDefault) return -1;\r\n          if (!aIsDefault && bIsDefault) return 1;\r\n          return a.template_name.localeCompare(b.template_name);\r\n        });\r\n      }\r\n\r\n      console.log(\"Processed templates by type:\", templatesByType);\r\n      setAvailableTemplates(templatesByType);\r\n\r\n      // Set default templates as selected\r\n      const initialSelectedTemplates = {};\r\n      for (const type in templatesByType) {\r\n        const defaultTemplate = templatesByType[type].find(t => \r\n          t.template_name.toLowerCase().includes('default')\r\n        );\r\n        \r\n        if (defaultTemplate) {\r\n          initialSelectedTemplates[type] = defaultTemplate.template_id;\r\n        } else if (templatesByType[type].length > 0) {\r\n          initialSelectedTemplates[type] = templatesByType[type][0].template_id;\r\n        }\r\n      }\r\n\r\n      console.log(\"Initial selected templates:\", initialSelectedTemplates);\r\n      setSelectedTemplates(initialSelectedTemplates);\r\n    } catch (error) {\r\n      console.error('Error fetching templates:', error);\r\n      showSnackbar('Failed to load templates: ' + error.message, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle template selection change\r\n  const handleTemplateChange = (event, templateType) => {\r\n    const templateId = event.target.value;\r\n    console.log(`Template changed for ${templateType}: ${templateId}`);\r\n    \r\n    setSelectedTemplates(prev => ({\r\n      ...prev,\r\n      [templateType]: templateId\r\n    }));\r\n  };\r\n\r\n  // Fetch stages based on business ID and agent ID\r\n  const fetchStagesData = useCallback(async () => {\r\n    if (!businessId) {\r\n      console.error(\"No business ID available for fetching stages\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      console.log(\"Fetching stages for business:\", businessId);\r\n      const stagesData = await fetchStages(businessId);\r\n      console.log(\"Fetched stages:\", stagesData);\r\n      setStages(stagesData);\r\n    } catch (err) {\r\n      console.error(\"Error fetching stages:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [businessId]);\r\n\r\n  // Fetch agent details\r\n  const fetchAgentDetails = useCallback(async () => {\r\n    if (!businessId || !agentId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/agents/${agentId}?business_id=${businessId}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch agent details');\r\n      }\r\n      \r\n      const agentData = await response.json();\r\n      setAgentName(agentData.agent_name || `Agent ${agentId}`);\r\n    } catch (err) {\r\n      console.error(\"Error fetching agent details:\", err);\r\n      setAgentName(`Agent ${agentId}`); // Fallback\r\n    }\r\n  }, [businessId, agentId]);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    if (businessId) {\r\n      const loadData = async () => {\r\n        try {\r\n          setIsLoading(true);\r\n          // Load templates first\r\n          await fetchTemplates();\r\n          // Then load stages\r\n          await fetchStagesData();\r\n        } catch (err) {\r\n          console.error(\"Error in initial data load:\", err);\r\n          showSnackbar(\"Failed to load initial data: \" + err.message, 'error');\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n      \r\n      loadData();\r\n    }\r\n  }, [businessId]);\r\n\r\n  // Update useEffect to fetch agent details\r\n  useEffect(() => {\r\n    if (agentId) {\r\n      fetchAgentDetails();\r\n    }\r\n  }, [agentId, fetchAgentDetails]);\r\n\r\n  // Helper function for showing snackbar messages\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({\r\n      ...snackbar,\r\n      open: false\r\n    });\r\n  };\r\n\r\n  const handleNavigateToHome = () => {\r\n    navigate('/business');\r\n  };\r\n\r\n  const handleOpenNewStageDialog = () => {\r\n    console.log(\"Opening new stage dialog with default templates:\", {\r\n      defaultTemplates,\r\n      availableTemplates\r\n    });\r\n    \r\n    // Check if default templates exist\r\n    if (!defaultTemplates.stage_selection || !defaultTemplates.data_extraction || !defaultTemplates.response_generation) {\r\n      console.warn(\"Some default templates are missing:\", defaultTemplates);\r\n      \r\n      // Try to find default templates manually\r\n      const manualDefaultTemplates = {\r\n        stage_selection: '',\r\n        data_extraction: '',\r\n        response_generation: ''\r\n      };\r\n      \r\n      // Loop through all templates and try to find ones with default_ prefix\r\n      for (const type in availableTemplates) {\r\n        const templates = availableTemplates[type];\r\n        for (const template of templates) {\r\n          // Check if this is a default template\r\n          if (template.template_type && template.template_type.startsWith('default_')) {\r\n            console.log(`Found default template for ${type}:`, template);\r\n            manualDefaultTemplates[type] = template.template_id;\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log(\"Manually determined default templates:\", manualDefaultTemplates);\r\n      \r\n      // Use the manual defaults if found\r\n      if (manualDefaultTemplates.stage_selection || manualDefaultTemplates.data_extraction || manualDefaultTemplates.response_generation) {\r\n        setSelectedTemplates({\r\n          stage_selection: manualDefaultTemplates.stage_selection || defaultTemplates.stage_selection,\r\n          data_extraction: manualDefaultTemplates.data_extraction || defaultTemplates.data_extraction,\r\n          response_generation: manualDefaultTemplates.response_generation || defaultTemplates.response_generation\r\n        });\r\n      } else {\r\n        // If still not found, just use empty values\r\n        setSelectedTemplates({\r\n          stage_selection: defaultTemplates.stage_selection || '',\r\n          data_extraction: defaultTemplates.data_extraction || '',\r\n          response_generation: defaultTemplates.response_generation || ''\r\n        });\r\n      }\r\n    } else {\r\n      // Normal flow if default templates exist\r\n      setSelectedTemplates({\r\n        stage_selection: defaultTemplates.stage_selection,\r\n        data_extraction: defaultTemplates.data_extraction,\r\n        response_generation: defaultTemplates.response_generation\r\n      });\r\n    }\r\n    \r\n    setNewStageName('');\r\n    setStageDescription('');\r\n    setStageType('conversation');\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCreateStage = async () => {\r\n    setIsSubmitting(true);\r\n    \r\n    try {\r\n      if (!newStageName || newStageName.trim() === '') {\r\n        showSnackbar('Please enter a stage name', 'error');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      console.log('Creating stage with templates:', selectedTemplates);\r\n      \r\n      // Verify all templates are selected\r\n      const missingTemplates = [];\r\n      if (!selectedTemplates.stage_selection) missingTemplates.push('Stage Selection');\r\n      if (!selectedTemplates.data_extraction) missingTemplates.push('Data Extraction');\r\n      if (!selectedTemplates.response_generation) missingTemplates.push('Response Generation');\r\n      \r\n      if (missingTemplates.length > 0) {\r\n        showSnackbar(`Please select templates for: ${missingTemplates.join(', ')}`, 'error');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // Find the selected templates from our available templates\r\n      const selectedTemplateObjects = {\r\n        stage_selection: availableTemplates.stage_selection.find(t => t.template_id === selectedTemplates.stage_selection),\r\n        data_extraction: availableTemplates.data_extraction.find(t => t.template_id === selectedTemplates.data_extraction),\r\n        response_generation: availableTemplates.response_generation.find(t => t.template_id === selectedTemplates.response_generation)\r\n      };\r\n      \r\n      console.log('Selected template objects:', selectedTemplateObjects);\r\n      \r\n      // Check if any templates couldn't be found\r\n      const notFoundTemplates = [];\r\n      if (!selectedTemplateObjects.stage_selection) notFoundTemplates.push('Stage Selection');\r\n      if (!selectedTemplateObjects.data_extraction) notFoundTemplates.push('Data Extraction');\r\n      if (!selectedTemplateObjects.response_generation) notFoundTemplates.push('Response Generation');\r\n      \r\n      if (notFoundTemplates.length > 0) {\r\n        showSnackbar(`Could not find selected templates for: ${notFoundTemplates.join(', ')}. Please reload and try again.`, 'error');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      // Prepare the stage data\r\n      const stageData = {\r\n        stage_name: newStageName,\r\n        agent_id: agentId,\r\n        business_id: businessId,\r\n        template_ids: {\r\n          stage_selection: selectedTemplates.stage_selection,\r\n          data_extraction: selectedTemplates.data_extraction,\r\n          response_generation: selectedTemplates.response_generation\r\n        }\r\n      };\r\n      \r\n      console.log('Creating stage with data:', stageData);\r\n\r\n      // Create the stage\r\n      const response = await fetch('/stages', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('businessApiKey')}`\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(stageData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to create stage');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Stage created successfully:', result);\r\n      \r\n      showSnackbar('Stage created successfully', 'success');\r\n      \r\n      // Reset form\r\n      setNewStageName('');\r\n      \r\n      // Refresh stages\r\n      fetchStagesData();\r\n      \r\n      // Close dialog\r\n      handleCloseAddDialog();\r\n    } catch (error) {\r\n      console.error('Error creating stage:', error);\r\n      showSnackbar(error.message, 'error');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const navigateToStageView = (stageId) => {\r\n    // Construct the URL with query parameters\r\n    let url = `/stages/${stageId}?business_id=${businessId}`;\r\n    if (agentId) {\r\n      url += `&agent_id=${agentId}`;\r\n    }\r\n    navigate(url);\r\n  };\r\n\r\n  const handleDeleteStage = async () => {\r\n    if (!stageToDelete || !businessId) return;\r\n\r\n    try {\r\n      await deleteStage(stageToDelete, businessId);\r\n      await fetchStagesData();\r\n      setOpenDeleteDialog(false);\r\n      showSnackbar('Stage deleted successfully', 'success');\r\n    } catch (err) {\r\n      console.error(\"Error deleting stage:\", err);\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  const handleMoveStage = async (stageId, direction) => {\r\n    try {\r\n      const currentIndex = stages.findIndex(s => s.stage_id === stageId);\r\n      if (currentIndex === -1) return;\r\n      \r\n      // If trying to move first item up or last item down, do nothing\r\n      if ((currentIndex === 0 && direction === 'up') || \r\n          (currentIndex === stages.length - 1 && direction === 'down')) {\r\n        return;\r\n      }\r\n      \r\n      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\r\n      \r\n      // Swap the order values in the stage_config\r\n      const updatedStages = [...stages];\r\n      const currentStage = { ...updatedStages[currentIndex] };\r\n      const targetStage = { ...updatedStages[targetIndex] };\r\n      \r\n      // Update stage_config.order values\r\n      currentStage.stage_config = { ...currentStage.stage_config, order: targetIndex + 1 };\r\n      targetStage.stage_config = { ...targetStage.stage_config, order: currentIndex + 1 };\r\n      \r\n      // Update both stages in the database\r\n      const currentUpdate = fetch(`/stages/${currentStage.stage_id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(currentStage),\r\n      });\r\n      \r\n      const targetUpdate = fetch(`/stages/${targetStage.stage_id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(targetStage),\r\n      });\r\n      \r\n      await Promise.all([currentUpdate, targetUpdate]);\r\n      \r\n      // Refresh stages\r\n      await fetchStagesData();\r\n      showSnackbar('Stage order updated', 'success');\r\n    } catch (err) {\r\n      showSnackbar(err.message, 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n          <IconButton onClick={handleNavigateToHome} sx={{ mr: 1 }}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" component=\"h1\" gutterBottom sx={{ flexGrow: 1 }}>\r\n            Stage Manager\r\n            {businessId && <Typography variant=\"subtitle1\" component=\"span\" color=\"text.secondary\">\r\n              {` - Business ID: ${businessId}`}\r\n              {agentId && ` - Agent: ${agentName || agentId}`}\r\n            </Typography>}\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleOpenNewStageDialog}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            Create Stage\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            startIcon={<DescriptionIcon />}\r\n            onClick={() => navigate('/templates')}\r\n          >\r\n            Manage Templates\r\n          </Button>\r\n        </Box>\r\n        \r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n        \r\n        {isLoading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            {stages.length === 0 ? (\r\n              <Alert severity=\"info\">\r\n                No stages found. Create your first stage to get started.\r\n              </Alert>\r\n            ) : (\r\n              <List sx={{ bgcolor: 'background.paper' }}>\r\n                {[...stages].sort((a, b) => \r\n                  (a.stage_config?.order || Infinity) - (b.stage_config?.order || Infinity)\r\n                ).map((stage) => (\r\n                  <ListItem \r\n                    key={stage.stage_id}\r\n                    sx={{ \r\n                      mb: 1,\r\n                      bgcolor: 'background.paper'\r\n                    }}\r\n                  >\r\n                    <ListItemText\r\n                      primary={stage.stage_name}\r\n                      secondary={\r\n                        <>\r\n                          <Typography component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                            {stage.stage_description || 'No description'}\r\n                          </Typography>\r\n                          {stage.stage_config && stage.stage_config.order && \r\n                            ` • Order: ${stage.stage_config.order}`}\r\n                        </>\r\n                      }\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Tooltip title=\"Move Up\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"move-up\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleMoveStage(stage.stage_id, 'up');\r\n                          }}\r\n                          disabled={stages.indexOf(stage) === 0}\r\n                        >\r\n                          <ArrowUpwardIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Move Down\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"move-down\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleMoveStage(stage.stage_id, 'down');\r\n                          }}\r\n                          disabled={stages.indexOf(stage) === stages.length - 1}\r\n                        >\r\n                          <ArrowDownwardIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"View Stage\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"view\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            navigateToStageView(stage.stage_id);\r\n                          }}\r\n                        >\r\n                          <VisibilityIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Delete Stage\">\r\n                        <IconButton \r\n                          edge=\"end\" \r\n                          aria-label=\"delete\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            setStageToDelete(stage);\r\n                            setOpenDeleteDialog(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            )}\r\n          </>\r\n        )}\r\n      </Paper>\r\n      \r\n      {/* Create Stage Dialog */}\r\n      <Dialog \r\n        open={openDialog} \r\n        onClose={() => setOpenDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Create New Stage</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            {/* Add console logs to help debug */}\r\n            {console.log(\"Dialog rendering with state:\", {\r\n              selectedTemplates,\r\n              availableTemplates,\r\n              defaultTemplates,\r\n              templatesInfo: {\r\n                stageSelectionCount: availableTemplates.stage_selection.length,\r\n                dataExtractionCount: availableTemplates.data_extraction.length,\r\n                responseGenerationCount: availableTemplates.response_generation.length,\r\n              }\r\n            })}\r\n            \r\n            {/* Stage Name */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Stage Name\"\r\n                value={newStageName}\r\n                onChange={(e) => setNewStageName(e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Stage Description */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={2}\r\n                label=\"Stage Description\"\r\n                value={stageDescription}\r\n                onChange={(e) => setStageDescription(e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Stage Selection */}\r\n            <Grid item xs={12}>\r\n              <InputLabel>Stage Selection Template</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                value={selectedTemplates.stage_selection}\r\n                onChange={(e) => handleTemplateChange(e, 'stage_selection')}\r\n              >\r\n                {availableTemplates.stage_selection.length === 0 ? (\r\n                  <MenuItem value=\"\">\r\n                    <em>No templates available</em>\r\n                  </MenuItem>\r\n                ) : (\r\n                  availableTemplates.stage_selection.map((template) => (\r\n                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                      {template.template_name} ({template.template_type})\r\n                    </MenuItem>\r\n                  ))\r\n                )}\r\n              </Select>\r\n              <FormHelperText>Template for determining if this stage should handle the message</FormHelperText>\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Data Extraction */}\r\n            <Grid item xs={12}>\r\n              <InputLabel>Data Extraction Template</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                value={selectedTemplates.data_extraction}\r\n                onChange={(e) => handleTemplateChange(e, 'data_extraction')}\r\n              >\r\n                {availableTemplates.data_extraction.length === 0 ? (\r\n                  <MenuItem value=\"\">\r\n                    <em>No templates available</em>\r\n                  </MenuItem>\r\n                ) : (\r\n                  availableTemplates.data_extraction.map((template) => (\r\n                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                      {template.template_name} ({template.template_type})\r\n                    </MenuItem>\r\n                  ))\r\n                )}\r\n              </Select>\r\n              <FormHelperText>Template for extracting data from the message</FormHelperText>\r\n            </Grid>\r\n            \r\n            {/* Template Selection Dropdown - Response Generation */}\r\n            <Grid item xs={12}>\r\n              <InputLabel>Response Generation Template</InputLabel>\r\n              <Select\r\n                fullWidth\r\n                value={selectedTemplates.response_generation}\r\n                onChange={(e) => handleTemplateChange(e, 'response_generation')}\r\n              >\r\n                {availableTemplates.response_generation.length === 0 ? (\r\n                  <MenuItem value=\"\">\r\n                    <em>No templates available</em>\r\n                  </MenuItem>\r\n                ) : (\r\n                  availableTemplates.response_generation.map((template) => (\r\n                    <MenuItem key={template.template_id} value={template.template_id}>\r\n                      {template.template_name} ({template.template_type})\r\n                    </MenuItem>\r\n                  ))\r\n                )}\r\n              </Select>\r\n              <FormHelperText>Template for generating responses</FormHelperText>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleCreateStage} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!newStageName.trim()}\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Create & Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={openDeleteDialog}\r\n        onClose={() => setOpenDeleteDialog(false)}\r\n      >\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete the stage \"{stageToDelete?.stage_name}\"?\r\n            This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteDialog(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleDeleteStage} \r\n            variant=\"contained\" \r\n            color=\"error\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert severity={snackbar.severity} onClose={handleCloseSnackbar}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StageManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}