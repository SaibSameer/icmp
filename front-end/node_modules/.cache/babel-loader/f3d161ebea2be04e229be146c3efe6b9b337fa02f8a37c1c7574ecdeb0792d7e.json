{"ast":null,"code":"// File: src/services/testService.js\n// Last Modified: 2026-03-29\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Helper function to handle API calls and error responses\nconst handleApiCall = async (url, method, data = null) => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  try {\n    const response = await axios({\n      method: method,\n      url: url,\n      headers: headers,\n      data: data,\n      withCredentials: true\n    });\n    if (response.status >= 200 && response.status < 300) {\n      return response.data;\n    } else {\n      console.error(\"API call failed:\", response);\n      throw new Error(`API call failed with status ${response.status}`);\n    }\n  } catch (error) {\n    console.error(\"API call failed:\", error);\n    throw error; // Re-throw the error for the component to handle\n  }\n};\n\n// --------------------------------------------------------\n// Configuration Service (Saving to localStorage - Insecure)\n// --------------------------------------------------------\nexport const saveConfig = async (apiKey, userId, businessId, businessApiKey) => {\n  // This function doesn't actually call an API. It only saves to localStorage.\n  return new Promise(resolve => {\n    localStorage.setItem('icmpApiKey', apiKey);\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('businessId', businessId);\n    localStorage.setItem('businessApiKey', businessApiKey);\n    resolve({\n      success: true,\n      message: 'Configuration saved to localStorage'\n    });\n  });\n};\n\n// --------------------------------------------------------\n// User Management Service (Simulated)\n// --------------------------------------------------------\nexport const createUser = async (firstName, lastName, email) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/users`, 'POST', {\n      firstName,\n      lastName,\n      email\n    });\n  } catch (error) {\n    console.error(\"createUser API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Business Management Service\n// --------------------------------------------------------\nexport const fetchBusinessDetails = async businessId => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/businesses/${businessId}`, 'GET');\n  } catch (error) {\n    console.error(\"fetchBusinessDetails API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Template Management Service\n// --------------------------------------------------------\nexport const createTemplate = async templateData => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/templates`, 'POST', templateData);\n  } catch (error) {\n    console.error(\"createTemplate API call failed:\", error);\n    throw error;\n  }\n};\nexport const fetchTemplates = async () => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/templates/defaultTemplates`, 'GET');\n  } catch (error) {\n    console.error(\"fetchTemplates API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Stage Management Service\n// --------------------------------------------------------\nexport const createStage = async stageData => {\n  try {\n    const API_ENDPOINT = `${API_BASE_URL}/stages`;\n    return await handleApiCall(API_ENDPOINT, 'POST', stageData);\n  } catch (error) {\n    console.error(\"createStage API call failed:\", error);\n    throw error;\n  }\n};\nexport const fetchStages = async businessId => {\n  try {\n    const API_ENDPOINT = `${API_BASE_URL}/stages`;\n    return await handleApiCall(API_ENDPOINT, 'GET');\n  } catch (error) {\n    console.error(\"fetchStages API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// Message Handling Service\n// --------------------------------------------------------\nexport const processMessage = async messageData => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/message`, 'POST', messageData);\n  } catch (error) {\n    console.error(\"processMessage API call failed:\", error);\n    throw error;\n  }\n};\n\n// --------------------------------------------------------\n// defaultTemplates Management Service\n// --------------------------------------------------------\nexport const getDefaultTemplates = async () => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/templates/defaultTemplates`, 'GET');\n  } catch (error) {\n    console.error(\"getDefaultTemplates API call failed:\", error);\n    throw error;\n  }\n};\nexport const saveDefaultTemplate = async templateData => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/templates/defaultTemplates`, 'POST', templateData);\n  } catch (error) {\n    console.error(\"saveDefaultTemplate API call failed:\", error);\n    throw error;\n  }\n};\nexport const getStage = async stageId => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/stage/${stageId}`, 'GET');\n  } catch (error) {\n    console.error(\"getStage API call failed:\", error);\n    throw error;\n  }\n};\nexport const updateStage = async (stageId, stageData) => {\n  try {\n    return await handleApiCall(`${API_BASE_URL}/stage/${stageId}`, 'PUT', stageData);\n  } catch (error) {\n    console.error(\"updateStage API call failed:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","handleApiCall","url","method","data","headers","response","withCredentials","status","console","error","Error","saveConfig","apiKey","userId","businessId","businessApiKey","Promise","resolve","localStorage","setItem","success","message","createUser","firstName","lastName","email","fetchBusinessDetails","createTemplate","templateData","fetchTemplates","createStage","stageData","API_ENDPOINT","fetchStages","processMessage","messageData","getDefaultTemplates","saveDefaultTemplate","getStage","stageId","updateStage"],"sources":["C:/icmp_events_api/front-end/src/services/testService.js"],"sourcesContent":["// File: src/services/testService.js\r\n// Last Modified: 2026-03-29\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\n// Helper function to handle API calls and error responses\r\nconst handleApiCall = async (url, method, data = null) => {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n    };\r\n\r\n    try {\r\n        const response = await axios({\r\n            method: method,\r\n            url: url,\r\n            headers: headers,\r\n            data: data,\r\n            withCredentials: true\r\n        });\r\n\r\n        if (response.status >= 200 && response.status < 300) {\r\n            return response.data;\r\n        } else {\r\n            console.error(\"API call failed:\", response);\r\n            throw new Error(`API call failed with status ${response.status}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"API call failed:\", error);\r\n        throw error; // Re-throw the error for the component to handle\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Configuration Service (Saving to localStorage - Insecure)\r\n// --------------------------------------------------------\r\nexport const saveConfig = async (apiKey, userId, businessId, businessApiKey) => {\r\n    // This function doesn't actually call an API. It only saves to localStorage.\r\n    return new Promise((resolve) => {\r\n        localStorage.setItem('icmpApiKey', apiKey);\r\n        localStorage.setItem('userId', userId);\r\n        localStorage.setItem('businessId', businessId);\r\n         localStorage.setItem('businessApiKey', businessApiKey);\r\n        resolve({ success: true, message: 'Configuration saved to localStorage' });\r\n    });\r\n};\r\n\r\n// --------------------------------------------------------\r\n// User Management Service (Simulated)\r\n// --------------------------------------------------------\r\nexport const createUser = async (firstName, lastName, email) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/users`, 'POST', {\r\n            firstName,\r\n            lastName,\r\n            email\r\n        });\r\n    } catch (error) {\r\n        console.error(\"createUser API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Business Management Service\r\n// --------------------------------------------------------\r\nexport const fetchBusinessDetails = async (businessId) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/businesses/${businessId}`, 'GET');\r\n    } catch (error) {\r\n        console.error(\"fetchBusinessDetails API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Template Management Service\r\n// --------------------------------------------------------\r\nexport const createTemplate = async (templateData) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/templates`, 'POST', templateData);\r\n    } catch (error) {\r\n        console.error(\"createTemplate API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchTemplates = async () => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/templates/defaultTemplates`, 'GET');\r\n    } catch (error) {\r\n        console.error(\"fetchTemplates API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Stage Management Service\r\n// --------------------------------------------------------\r\nexport const createStage = async (stageData) => {\r\n    try {\r\n        const API_ENDPOINT = `${API_BASE_URL}/stages`;\r\n        return await handleApiCall(API_ENDPOINT, 'POST', stageData);\r\n    } catch (error) {\r\n        console.error(\"createStage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchStages = async (businessId) => {\r\n    try {\r\n        const API_ENDPOINT = `${API_BASE_URL}/stages`;\r\n        return await handleApiCall(API_ENDPOINT, 'GET');\r\n    } catch (error) {\r\n        console.error(\"fetchStages API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// Message Handling Service\r\n// --------------------------------------------------------\r\nexport const processMessage = async (messageData) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/message`, 'POST', messageData);\r\n    } catch (error) {\r\n        console.error(\"processMessage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --------------------------------------------------------\r\n// defaultTemplates Management Service\r\n// --------------------------------------------------------\r\nexport const getDefaultTemplates = async () => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/templates/defaultTemplates`, 'GET');\r\n    } catch (error) {\r\n        console.error(\"getDefaultTemplates API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const saveDefaultTemplate = async (templateData) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/templates/defaultTemplates`, 'POST', templateData);\r\n    } catch (error) {\r\n        console.error(\"saveDefaultTemplate API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getStage = async (stageId) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/stage/${stageId}`, 'GET');\r\n    } catch (error) {\r\n        console.error(\"getStage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateStage = async (stageId, stageData) => {\r\n    try {\r\n        return await handleApiCall(`${API_BASE_URL}/stage/${stageId}`, 'PUT', stageData);\r\n    } catch (error) {\r\n        console.error(\"updateStage API call failed:\", error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}