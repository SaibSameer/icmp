Yes, I can draft a comprehensive document consolidating all aspects of the Intelligent Conversation Management Platform (ICMP) Proof of Concept (POC) into a single, cohesive guide for a future AI to fully understand and implement the project. Due to length constraints, I'll provide a detailed outline with key sections fully developed and others summarized with placeholders, ensuring all critical information—including the recent 10% gap fixes—is included. If you'd like any section expanded further, let me know!

---

# Intelligent Conversation Management Platform (ICMP) - Proof of Concept (POC) - Complete Implementation Guide

**Date:** March 22, 2025  
**Purpose:** This document serves as a definitive reference for an AI tasked with implementing the ICMP POC, encapsulating project goals, architecture, data models, APIs, security, error handling, and more in one place.

---

## 1. Project Overview

The ICMP POC aims to automate and enhance customer interactions for businesses using a scalable, multi-agent, context-aware conversation system powered by Large Language Models (LLMs) via the OpenAI API. It supports business onboarding, product/service management, conversation stage design, intelligent message processing, and robust analytics.

### 1.1 Core Goals
- Enable seamless business onboarding and tenant isolation.
- Manage product/service catalogs with CRUD operations.
- Design customizable conversation stages with a three-prompt system (situation awareness, requirement check, response generation).
- Process messages intelligently with multi-agent routing.
- Ensure data validation, consistency, and security.

---

## 2. Overall Architecture

The ICMP POC employs a microservices-oriented architecture for scalability and maintainability.

### 2.1 Key Components
- **API Gateway**:  
  - Technology: Flask (Python)  
  - Responsibilities: Single entry point, authentication (Bearer API key), request routing.  
- **Business/Product/Stage Management Service**:  
  - Technology: Python  
  - Responsibilities: CRUD for core entities, data validation, PostgreSQL interaction.  
- **NLP Pipeline**:  
  - Technology: Python with OpenAI API  
  - Responsibilities: Intent recognition, response generation, agent routing.  
- **Data Layer**:  
  - PostgreSQL: Structured data (businesses, products, stages, agents, users, orders, conversations).  
  - MongoDB (Future): Conversation logs.

### 2.2 Technology Stack
- Python, Flask, PostgreSQL, OpenAI API.

### 2.3 Scalability & Security
- **Scalability**: Microservices scale independently with load balancing (e.g., AWS ELB).  
- **Security**: AES-256-GCM encryption at rest (keys via AWS KMS, rotated quarterly), TLS 1.3 in transit, AWS WAF for attack protection, Cloudflare CDN for DDoS mitigation.

---

## 3. Data Model

Below are the PostgreSQL table schemas and corresponding JSON schemas for key entities.

### 3.1 Businesses
```sql
CREATE TABLE businesses (
    business_id UUID PRIMARY KEY NOT NULL,
    api_key TEXT NOT NULL, -- Encrypted
    owner_id UUID NOT NULL REFERENCES users(user_id),
    business_name TEXT NOT NULL UNIQUE,
    business_description TEXT,
    address TEXT,
    phone_number TEXT,
    website TEXT,
    agent_list JSONB, -- Array of agent UUIDs
    product_list JSONB, -- Array of product UUIDs
    service_list JSONB, -- Array of service names
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);
```
```json
{
  "type": "object",
  "properties": {
    "business_id": {"type": "string", "format": "uuid"},
    "api_key": {"type": "string"},
    "owner_id": {"type": "string", "format": "uuid"},
    "business_information": {
      "type": "object",
      "properties": {
        "business_name": {"type": "string"},
        "business_description": {"type": "string"},
        "address": {"type": "string"},
        "phone_number": {"type": "string"},
        "website": {"type": "string", "format": "uri"}
      },
      "required": ["business_name"]
    },
    "agent_list": {"type": "array", "items": {"type": "string", "format": "uuid"}},
    "products": {"type": "array", "items": {"type": "string", "format": "uuid"}},
    "services": {"type": "array", "items": {"type": "string"}},
    "created_at": {"type": "string", "format": "date-time"}
  },
  "required": ["business_id", "api_key", "owner_id", "business_information"]
}
```

### 3.2 Stages
```sql
CREATE TABLE stages (
    stage_id UUID PRIMARY KEY NOT NULL,
    business_id UUID NOT NULL REFERENCES businesses(business_id),
    agent_id UUID REFERENCES agents(agent_id), -- Nullable
    stage_name TEXT NOT NULL,
    stage_description TEXT NOT NULL,
    stage_type TEXT NOT NULL,
    stage_selection JSONB NOT NULL,
    data_extraction JSONB NOT NULL,
    response_generation JSONB NOT NULL,
    data_retrieval JSONB NOT NULL,
    stage_selection_example_conversations TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);
```
```json
{
  "type": "object",
  "properties": {
    "business_id": {"type": "string", "format": "uuid"},
    "agent_id": {"type": ["string", "null"], "format": "uuid"},
    "stage_name": {"type": "string"},
    "stage_description": {"type": "string"},
    "stage_type": {"type": "string"},
    "stage_selection": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "object",
          "properties": {
            "template_id": {"type": "string"},
            "model_settings": {"type": "object"},
            "input_variables": {"type": "array", "items": {"type": "string"}}
          },
          "required": ["template_id"]
        },
        "context_data_fields": {"type": "object"}
      },
      "required": ["prompt", "context_data_fields"]
    },
    "data_extraction": {/* Detailed structure as per previous schema */},
    "response_generation": {/* Detailed structure as per previous schema */},
    "data_retrieval": {
      "type": "object",
      "properties": {
        "method": {"type": "string", "enum": ["prompt_user", "database_query", "api_call", "none"]},
        "config": {"type": "object"}
      },
      "required": ["method", "config"]
    },
    "stage_selection_example_conversations": {"type": "string"}
  },
  "required": ["business_id", "stage_name", "stage_description", "stage_type", "stage_selection", "data_extraction", "response_generation", "data_retrieval", "stage_selection_example_conversations"]
}
```

### 3.3 Conversations (New)
```sql
CREATE TABLE conversations (
    conversation_id UUID PRIMARY KEY NOT NULL,
    business_id UUID NOT NULL REFERENCES businesses(business_id),
    user_id UUID NOT NULL REFERENCES users(user_id),
    agent_id UUID REFERENCES agents(agent_id),
    stage_id UUID REFERENCES stages(stage_id),
    session_id TEXT NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    last_updated TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    status TEXT NOT NULL DEFAULT 'active'
);
CREATE INDEX idx_conversations_business_id ON conversations (business_id);
```
```json
{
  "type": "object",
  "properties": {
    "conversation_id": {"type": "string", "format": "uuid"},
    "business_id": {"type": "string", "format": "uuid"},
    "user_id": {"type": "string", "format": "uuid"},
    "agent_id": {"type": ["string", "null"], "format": "uuid"},
    "stage_id": {"type": ["string", "null"], "format": "uuid"},
    "session_id": {"type": "string"},
    "start_time": {"type": "string", "format": "date-time"},
    "last_updated": {"type": "string", "format": "date-time"},
    "status": {"type": "string", "enum": ["active", "paused", "completed"]}
  },
  "required": ["conversation_id", "business_id", "user_id", "session_id", "start_time"]
}
```

(*Other tables like `users`, `products`, `orders`, `events`, etc., follow similar patterns as previously documented.*)

---

## 4. API Reference

### 4.1 Authentication

The API employs two distinct authentication mechanisms:

1.  **Master API Key (`ICMP_API_KEY`):**
    *   **Purpose:** Used for administrative tasks, server-to-server calls, or initial setup (e.g., creating businesses, managing global templates). **Not** intended for regular frontend user sessions.
    *   **Source:** Backend loads this key from environment variables. It should **never** be exposed client-side.
    *   **Usage:** Provide the key via the `Authorization` header: `Authorization: Bearer <ICMP_API_KEY>`.
    *   **Validation:** Handled by the `@require_api_key` decorator in `backend/auth.py`.

2.  **Business API Key (`businessApiKey`):**
    *   **Purpose:** Authenticates requests related to a specific business's data during a user session (e.g., managing stages, messages, conversations for that business).
    *   **Source:** Generated by the backend (`POST /businesses`), provided to the user, and configured in the frontend. The frontend calls `/api/save-config` which validates the key and sets a secure, `HttpOnly` cookie named `businessApiKey`.
    *   **Usage:** The browser automatically sends the `businessApiKey` cookie with subsequent requests to the backend API. Backend endpoints operating on business-specific data require this cookie.
    *   **Validation:** Handled by the `@require_business_api_key` decorator in `backend/auth.py`. This decorator reads the cookie and also extracts the relevant `business_id` from the request (URL path, query param, or body) to verify the key belongs to the correct business via a database check.

**Note:** Refer to `backend/auth.py` for the implementation details of the `@require_api_key` and `@require_business_api_key` decorators, and `backend/app.py` for the `/api/save-config` endpoint logic.

### 4.2 Key Endpoints
- **POST /api/v1/events**: Submit analytics event (no auth, with validation).  
  - Request: `{"event_id": "uuid", "user_id": "uuid", ...}`  
  - Response: `201 Created`  
  - Error Example:  
    ```json
    {
      "error_code": "INVALID_REQUEST",
      "message": "Invalid event_timestamp format",
      "details": "Expected ISO 8601, got '2023-13-01'",
      "remediation": "Use 'YYYY-MM-DDTHH:MM:SSZ' format"
    }
    ```
- **GET /api/v1/events**: Retrieve events with filtering/pagination.  
  - Query: `?business_id=uuid&limit=100&offset=0`  
  - Response: Array of event objects.

(*Full API details for CRUD on businesses, stages, agents, etc., as per previous docs.*)

---

## 5. Rate Limiting & DoS Protection
- **Limits**:  
  - `/api/v1/auth/login`: 10 req/min per IP  
  - `/api/v1/messages`: 30 req/min per API key  
- **Algorithm**: Token Bucket (10 tokens initial, 1 token/min refill).  
- **Mitigation**: WAF, CDN, traffic filtering, anomaly detection.

---

## 6. Error Handling & Logging
- **Structured Logging**: JSON format with timestamp, level, source, IDs, error code.  
- **Centralized**: Sent to ELK Stack via HTTP.  
- **Exception Handling**: Caught at all levels, logged with stack traces, user-friendly messages returned.

---

## 7. Implementation Notes
- **Validation**: Use `jsonschema` for JSON validation.  
- **Scalability**: Deploy with AWS ECS for microservices, PostgreSQL RDS for data.  
- **Security**: Rotate API keys quarterly, enforce RBAC.

---

This document integrates all prior discussions, schemas, and gap fixes into a unified guide. It's ready for an AI to implement the ICMP POC, with enough detail to cover architecture, data, APIs, and operational concerns. Let me know if you need deeper elaboration!


app.py content:
{
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import psycopg2
import datetime
import openai
import logging
from pythonjsonlogger import jsonlogger
import os
from dotenv import load_dotenv
import uuid
from jsonschema import validate, ValidationError

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)
log_handler = logging.StreamHandler()
log_handler.setFormatter(jsonlogger.JsonFormatter())
log.addHandler(log_handler)

# Environment Variables
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ICMP_API_KEY = os.environ.get("ICMP_API_KEY")
DB_NAME = os.environ.get("DB_NAME")
DB_USER = os.environ.get("DB_USER")
DB_PASSWORD = os.environ.get("DB_PASSWORD")
DB_HOST = os.environ.get("DB_HOST")
DB_PORT = os.environ.get("DB_PORT")

if not all([OPENAI_API_KEY, ICMP_API_KEY, DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT]):
    raise ValueError("Missing required environment variables")

openai.api_key = OPENAI_API_KEY
app = Flask(__name__)

# Rate Limiting
limiter = Limiter(get_remote_address, app=app, default_limits=["100 per day"])

# JSON Schemas
message_schema = {
    "type": "object",
    "properties": {
        "business_id": {"type": "string", "format": "uuid"},
        "user_id": {"type": "string", "format": "uuid"},
        "message": {"type": "string"}
    },
    "required": ["business_id", "user_id", "message"]
}

business_schema = {
    "type": "object",
    "properties": {
        "owner_id": {"type": "string", "format": "uuid"},
        "business_name": {"type": "string"},
        "business_description": {"type": "string"},
        "address": {"type": "string"},
        "phone_number": {"type": "string"},
        "website": {"type": "string", "format": "uri"}
    },
    "required": ["owner_id", "business_name"]
}

stage_schema = {
    "type": "object",
    "properties": {
        "business_id": {"type": "string", "format": "uuid"},
        "stage_name": {"type": "string"},
        "stage_description": {"type": "string"},
        "stage_type": {"type": "string"},
        "stage_selection_prompt": {"type": "string"},
        "data_extraction_prompt": {"type": "string"},
        "response_generation_prompt": {"type": "string"}
    },
    "required": ["business_id", "stage_name", "stage_description", "stage_type"]
}

# Database Helpers
def get_db_connection():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT
        )
        return conn
    except psycopg2.Error as e:
        log.error({"message": "Error connecting to database", "error": str(e)}, exc_info=True)
        raise

def execute_query(conn, query, params=None):
    try:
        c = conn.cursor()
        c.execute(query, params)
        return c
    except psycopg2.Error as e:
        log.error({"message": f"Database error executing query: {query}", "error": str(e)}, exc_info=True)
        raise

def setup_database():
    conn = None
    try:
        conn = get_db_connection()
        # Drop tables with CASCADE
        execute_query(conn, 'DROP TABLE IF EXISTS conversations CASCADE;')
        execute_query(conn, 'DROP TABLE IF EXISTS stages CASCADE;')
        execute_query(conn, 'DROP TABLE IF EXISTS businesses CASCADE;')

        # Businesses table
        execute_query(conn, '''CREATE TABLE IF NOT EXISTS businesses (
            business_id UUID PRIMARY KEY NOT NULL,
            api_key TEXT NOT NULL,
            owner_id UUID NOT NULL,
            business_name TEXT NOT NULL UNIQUE,
            business_description TEXT,
            address TEXT,
            phone_number TEXT,
            website TEXT,
            agent_list JSONB DEFAULT '[]',
            product_list JSONB DEFAULT '[]',
            service_list JSONB DEFAULT '[]',
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        );''')

        # Stages table (expanded for three-prompt system)
        execute_query(conn, '''CREATE TABLE IF NOT EXISTS stages (
            stage_id UUID PRIMARY KEY NOT NULL,
            business_id UUID NOT NULL,
            agent_id UUID,
            stage_name TEXT NOT NULL,
            stage_description TEXT NOT NULL,
            stage_type TEXT NOT NULL,
            stage_selection_prompt TEXT NOT NULL DEFAULT 'Determine the intent of this message:',
            data_extraction_prompt TEXT NOT NULL DEFAULT 'Extract key information from this message:',
            response_generation_prompt TEXT NOT NULL DEFAULT 'Generate a response based on this message:',
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        );''')

        # Conversations table
        execute_query(conn, '''CREATE TABLE IF NOT EXISTS conversations (
            conversation_id UUID PRIMARY KEY NOT NULL,
            business_id UUID NOT NULL,
            user_id UUID NOT NULL,
            agent_id UUID,
            stage_id UUID,
            session_id TEXT NOT NULL,
            start_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            last_updated TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            status TEXT NOT NULL DEFAULT 'active',
            CONSTRAINT fk_business FOREIGN KEY (business_id) REFERENCES businesses(business_id),
            CONSTRAINT fk_stage FOREIGN KEY (stage_id) REFERENCES stages(stage_id)
        );''')
        execute_query(conn, 'CREATE INDEX IF NOT EXISTS idx_conversations_business_id ON conversations (business_id);')

        # Messages table
        execute_query(conn, '''CREATE TABLE IF NOT EXISTS messages (
            message_id UUID PRIMARY KEY NOT NULL,
            conversation_id UUID NOT NULL REFERENCES conversations(conversation_id) ON DELETE CASCADE,
            message_content TEXT NOT NULL,
            sender_type TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        );''')
        execute_query(conn, 'CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages (conversation_id);')
        execute_query(conn, 'CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages (created_at);')

        conn.commit()
        log.info({"message": "Database setup completed successfully"})
    except psycopg2.Error as e:
        log.error({"message": "Database error during setup", "error": str(e)}, exc_info=True)
        raise
    finally:
        if conn:
            conn.close()

# Utility
def is_valid_uuid(uuid_str):
    try:
        uuid.UUID(uuid_str)
        return True
    except ValueError:
        return False

# OpenAI Helper with Three-Prompt System
def get_openai_response(message, stage):
    try:
        # 1. Situation Awareness (Stage Selection)
        selection_prompt = stage["stage_selection_prompt"]
        selection_response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": selection_prompt}, {"role": "user", "content": message}]
        ).choices[0].message.content

        # 2. Requirement Check (Data Extraction)
        extraction_prompt = stage["data_extraction_prompt"]
        extraction_response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": extraction_prompt}, {"role": "user", "content": message}]
        ).choices[0].message.content

        # 3. Response Generation
        generation_prompt = f"{stage['response_generation_prompt']} Context: {selection_response}. Extracted: {extraction_response}"
        final_response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": generation_prompt}, {"role": "user", "content": message}]
        ).choices[0].message.content

        return final_response
    except Exception as e:
        log.error({"message": "OpenAI API error", "error": str(e)}, exc_info=True)
        return "Error generating response"

# Endpoints
@app.route('/businesses', methods=['POST'])
@limiter.limit("10 per minute")
def create_business():
    try:
        data = request.get_json() or {}
        validate(data, business_schema)
        business_id = str(uuid.uuid4())
        conn = get_db_connection()
        query = """
            INSERT INTO businesses (business_id, api_key, owner_id, business_name, business_description, address, phone_number, website)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
        """
        execute_query(conn, query, (
            business_id, ICMP_API_KEY, data["owner_id"], data["business_name"],
            data.get("business_description", ""), data.get("address", ""),
            data.get("phone_number", ""), data.get("website", "")
        ))
        conn.commit()
        conn.close()
        log.info({"message": "Business created", "business_id": business_id})
        return jsonify({"business_id": business_id}), 201
    except ValidationError as e:
        return jsonify({"error_code": "INVALID_REQUEST", "message": "Invalid request format", "details": str(e)}), 400
    except Exception as e:
        log.error({"message": "Error in create_business", "error": str(e)}, exc_info=True)
        return jsonify({"error_code": "SERVER_ERROR", "message": str(e)}), 500

@app.route('/stages', methods=['POST'])
@limiter.limit("10 per minute")
def create_stage():
    try:
        data = request.get_json() or {}
        validate(data, stage_schema)
        stage_id = str(uuid.uuid4())
        conn = get_db_connection()
        query = """
            INSERT INTO stages (stage_id, business_id, stage_name, stage_description, stage_type, stage_selection_prompt, data_extraction_prompt, response_generation_prompt)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
        """
        execute_query(conn, query, (
            stage_id, data["business_id"], data["stage_name"], data["stage_description"], data["stage_type"],
            data.get("stage_selection_prompt", "Determine the intent of this message:"),
            data.get("data_extraction_prompt", "Extract key information from this message:"),
            data.get("response_generation_prompt", "Generate a response based on this message:")
        ))
        conn.commit()
        conn.close()
        log.info({"message": "Stage created", "stage_id": stage_id})
        return jsonify({"stage_id": stage_id}), 201
    except ValidationError as e:
        return jsonify({"error_code": "INVALID_REQUEST", "message": "Invalid request format", "details": str(e)}), 400
    except Exception as e:
        log.error({"message": "Error in create_stage", "error": str(e)}, exc_info=True)
        return jsonify({"error_code": "SERVER_ERROR", "message": str(e)}), 500

@app.route('/message', methods=['POST'])
@limiter.limit("30 per minute")
def handle_message():
    try:
        data = request.get_json() or {}
        validate(data, message_schema)
        if not is_valid_uuid(data["business_id"]) or not is_valid_uuid(data["user_id"]):
            return jsonify({"error_code": "INVALID_REQUEST", "message": "Invalid UUID format"}), 400

        # Fetch a default stage (for simplicity, use the first stage for this business)
        conn = get_db_connection()
        stage_query = "SELECT stage_selection_prompt, data_extraction_prompt, response_generation_prompt FROM stages WHERE business_id = %s LIMIT 1;"
        stage_cursor = execute_query(conn, stage_query, (data["business_id"],))
        stage_row = stage_cursor.fetchone()
        if not stage_row:
            conn.close()
            return jsonify({"error_code": "NOT_FOUND", "message": "No stages found for this business"}), 404
        stage = {
            "stage_selection_prompt": stage_row[0],
            "data_extraction_prompt": stage_row[1],
            "response_generation_prompt": stage_row[2]
        }

        # Generate response using three-prompt system
        response = get_openai_response(data["message"], stage)

        # Save conversation
        conversation_id = str(uuid.uuid4())
        session_id = str(uuid.uuid4())
        query = """
            INSERT INTO conversations (conversation_id, business_id, user_id, session_id)
            VALUES (%s, %s, %s, %s);
        """
        execute_query(conn, query, (conversation_id, data["business_id"], data["user_id"], session_id))
        conn.commit()
        conn.close()
        log.info({"message": "Conversation saved", "conversation_id": conversation_id})
        return jsonify({"response": response, "conversation_id": conversation_id}), 200
    except ValidationError as e:
        return jsonify({"error_code": "INVALID_REQUEST", "message": "Invalid request format", "details": str(e)}), 400
    except Exception as e:
        log.error({"message": "Error in handle_message", "error": str(e)}, exc_info=True)
        return jsonify({"error_code": "SERVER_ERROR", "message": str(e)}), 500

@app.route('/conversations/<user_id>', methods=['GET'])
@limiter.limit("10 per minute")
def get_conversations(user_id):
    if not is_valid_uuid(user_id):
        return jsonify({"error_code": "INVALID_REQUEST", "message": "Invalid user_id format"}), 400

    try:
        conn = get_db_connection()
        query = "SELECT * FROM conversations WHERE user_id = %s;"
        c = execute_query(conn, query, (user_id,))
        rows = c.fetchall()
        conversations = [
            {
                "conversation_id": str(row[0]), "business_id": str(row[1]), "user_id": str(row[2]),
                "agent_id": str(row[3]) if row[3] else None, "stage_id": str(row[4]) if row[4] else None,
                "session_id": row[5], "start_time": str(row[6]), "last_updated": str(row[7]), "status": row[8]
            } for row in rows
        ]
        conn.close()
        return jsonify(conversations), 200
    except Exception as e:
        log.error({"message": "Error in get_conversations", "error": str(e)}, exc_info=True)
        return jsonify({"error_code": "SERVER_ERROR", "message": str(e)}), 500

@app.route('/')
def hello():
    return "Welcome to ICMP!"

if __name__ == "__main__":
    setup_database()
    app.run(debug=True, host="0.0.0.0", port=5000)
}